<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="MOUSETRAP">MouseTraps</a></h1>
<p><h3> Defined sub-regions of a window that can generate <a href="EVENT.htm#W32HMOUSETRAP">w32HMouseTrap</a> events.
</h3><br>
These are used to make it easy to detect mouse activity in specific sub-regions of a window or other control.

</p>
<li><a href="#CREATEMOUSETRAP"><i>func</i> createMouseTrap</a>(integer pWindow, object pRect) &nbsp;&nbsp;Defines a mousetrap area
<li><a href="#DELETEMOUSETRAP"><i>proc</i> deleteMouseTrap</a>(integer pWindow, integer pMouseTrap) &nbsp;&nbsp;This removes the specified mousetrap area from the window.
<li><a href="#ENABLEMOUSETRAP"><i>proc</i> enableMouseTrap</a>(integer pWindow, object pMouseTrap, integer pState) &nbsp;&nbsp;This alters the 'enabled' state of the specified mousetrap area in the window.
<li><a href="#FILTERMOUSETRAP"><i>proc</i> filterMouseTrap</a>(integer pWindow, object pMouseTrap, object pEvents) &nbsp;&nbsp;This alters the 'filters' of the specified mousetrap area in the window.
<li><a href="#GETMOUSETRAP"><i>func</i> getMouseTrap</a>(integer pWindow, object pMouseTrap) &nbsp;&nbsp;This fetches all the information about the specified mousetrap.
<li><a href="#GETTAGMOUSETRAP"><i>func</i> getTagMouseTrap</a>(integer pWindow, object pMouseTrap) &nbsp;&nbsp; This fetches the data stored by <a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>()
<li><a href="#HITMOUSETRAP"><i>func</i> hitMouseTrap</a>(integer pWindow, integer pEvent, integer pX, integer pY) &nbsp;&nbsp; This returns all mousetraps for the window that are under the <em>pX</em> and <em>pY</em> position.
<li><a href="#SETTAGMOUSETRAP"><i>proc</i> setTagMouseTrap</a>(integer pWindow, object pMouseTrap, object pData) &nbsp;&nbsp;This alters the 'user data' of the specified mousetrap area in the window.
<li><a href="#UPDATEMOUSETRAP"><i>proc</i> updateMouseTrap</a>(integer pWindow, integer pMouseTrap, object pRect) &nbsp;&nbsp;This changes the bounding rectangle for a mousetrap.
<li><a href="#ZORDERMOUSETRAP"><i>proc</i> zorderMouseTrap</a>(integer pWindow, object pMouseTrap, integer pOrder) &nbsp;&nbsp;This alters the 'depth' of the specified mousetrap area in the window.
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CREATEMOUSETRAP">[<i>func</i>]<br>createMouseTrap</a> (integer pWindow, object pRect)</h2>
<h3>Defines a mousetrap area</h3>
<h3>Returns: INTEGER: A mousetrap ID.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> This defines an subregion of <em>pWindow</em>, bounded by <em>pRect</em> that can generate
 <a href="EVENT.htm#W32HMOUSETRAP">w32HMouseTrap</a> events. <br>
 <em>pWindow</em> is a top-level Window control. It must not have any parent. <br>
 <em>pRect</em> is either a four-element sequence in the form
 {left, top, right, bottom} relative to <em>pWindow</em>, or the id of a
 child control of <em>pWindow</em>. In the second case, the mousetrap covers the entire
area of the child control.
<p>
Example:
<pre>
      integer mt
      mt1 = createMouseTrap(myWin, {10,10,30,30})
      mt2 = createMouseTrap(myWin, myBitMap)
</pre>
<p>See Also: 
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="DELETEMOUSETRAP">[<i>proc</i>]<br>deleteMouseTrap</a> (integer pWindow, integer pMouseTrap)</h2>
<h3>This removes the specified mousetrap area from the window.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap to remove. <br>
<p>
 <strong>Note</strong> that if <em>pMouseTrap</em> is less than one, all mousetraps
for the window will be deleted.
<p>
Example:
<pre>
      -- Remove mousetrap #3
      deleteMouseTrap(MyWindow, 3)
      -- Remove all mousetraps from the window.
      deleteMouseTrap(DiagWin, -1)
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="ENABLEMOUSETRAP">[<i>proc</i>]<br>enableMouseTrap</a> (integer pWindow, object pMouseTrap, integer pState)</h2>
<h3>This alters the 'enabled' state of the specified mousetrap area in the window.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap to enable. <br>
 <em>pState</em> is either w32True or w32False. A setting of w32False will prevent this mousetrap
from generating events.
<p>
 <strong>Note</strong> that <em>pMouseTrap</em> can also be a list of mousetrap Ids.
<p>
Example:
<pre>
      -- Disable mousetrap #1
      enableMouseTrap(myWin, 1, w32False)
      -- Enable mousetraps #2, 8, 5, and 4.
      enableMouseTrap(myWin, {2,8,5,4}, w32True)
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="FILTERMOUSETRAP">[<i>proc</i>]<br>filterMouseTrap</a> (integer pWindow, object pMouseTrap, object pEvents)</h2>
<h3>This alters the 'filters' of the specified mousetrap area in the window.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap to filter. <br>
 <em>pEvents</em> is a list of Windows mouse event codes. These are the only mouse events
that can cause this mousetrap area to react.
<p>
 <strong>Note</strong> that <em>pMouseTrap</em> can also be a list of mousetrap Ids.
<p>
Example:
<pre>
      -- Check for Wheel movement
      filterMouseTrap(myWin, 1, WM_WHEELMOUSE)
      -- Check for Right Button events
      filterMouseTrap(myWin, {2,8,5,4}, {WM_RBUTTONDOWN, WM_RBUTTONUP})
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETMOUSETRAP">[<i>func</i>]<br>getMouseTrap</a> (integer pWindow, object pMouseTrap)</h2>
<h3>This fetches all the information about the specified mousetrap.</h3>
<h3>Returns:  OBJECT: -1 if <em>pMouseTrap</em> is not valid, otherwise a MouseTrap sequence.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap. <br>
<p>
 Each mousetrap is a sequence of 8 elements: <br>
 <li> integer: <strong>zorder</strong>, the higher numbers are further in the background. The
initial value is zero when a mousetrap is created.
 <li> integer: <strong>left</strong>, the leftmost position of the mousetrap area
 <li> integer: <strong>top</strong>, the topmost position of the mousetrap area
 <li> integer: <strong>right</strong>, the rightmost position of the mousetrap area
 <li> integer: <strong>bottom</strong>, the bottommost position of the mousetrap area
 <li> integer: <strong>enableFlag</strong>, either w32True if enabled else w32False.
 <li> object: <strong>userdata</strong>, the data set by calling <a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>(). This is
never used by win32lib and is intended for use by the user for anything.
 <li> sequence: <strong>filters</strong>, a list of zero or more mouse event codes that are used
to filter in this mousetrap. Initially this set to {WM_LBUTTONDOWN} when
 then mousetrap is created. It can be changed by calling <a href="MOUSETRAP.htm#FILTERMOUSETRAP">filterMouseTrap</a>().
<p>
Example:
<pre>
      -- Fetch the mousetrap info.
      object MT
      MT = getMouseTrap(MyWindow, 1)
      if atom(MT) then
          -- the mousetrap doesn't exist.
      else
          -- process it...
      end if
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETTAGMOUSETRAP">[<i>func</i>]<br>getTagMouseTrap</a> (integer pWindow, object pMouseTrap)</h2>
<h3> This fetches the data stored by <a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>()</h3>
<h3>Returns: OBJECT: Whatever the user data has been set for the mousetrap.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap that holds the data. <br>
<p>
 You must use <a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>() to store this data.
<p>
Example:
<pre>
      -- Save a routine id to handle things.
      setTagMouseTrap(MyWindow, 1, routine_id("MT1_Catch"))
      . . .
      -- Fetch the routine id to use.
      rtnid = getTagMouseTrap(MyWindow, 1)
      call_proc(rtnid, . . .)
<p>
</pre>
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="HITMOUSETRAP">[<i>func</i>]<br>hitMouseTrap</a> (integer pWindow, integer pEvent, integer pX, integer pY)</h2>
<h3> This returns all mousetraps for the window that are under the <em>pX</em> and <em>pY</em> position.</h3>
<h3>Returns: SEQUENCE: A list of zero or more mousetraps.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pEvent</em> used to filter. Only mousetraps looking for this event can be returned./n
 <em>pX</em>, <em>pY</em> are  coordinates. Only mousetraps that are under this position can be returned.
<p>
 <strong>Note</strong> that disabled mousetraps are ignored.
<p>
The returned list is sorted from closest to furtherest away, based on the z-order settings
 of the mousetraps. These are set by calling <a href="MOUSETRAP.htm#ZORDERMOUSETRAP">zorderMouseTrap</a>().
<p>
The format of each element in the returned list is :
 <li> integer: <strong>zorder</strong>
 <li> integer: <strong>left</strong>
 <li> integer: <strong>top</strong>
 <li> integer: <strong>right</strong>
 <li> integer: <strong>bottom</strong>
 <li> integer: <strong>mousetrap id</strong>
 <li> object: <strong>userdata</strong>
 <li> sequence: <strong>filters</strong>
<p>
Example:
<pre>
      sequence MTList
      -- Get all the mousetraps that are under (100,100) that are looking for
      -- left button down events.
      MTList = hitMouseTrap(myWindow, WM_LBUTTONDOWN, 100, 100)
<p>
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETTAGMOUSETRAP">[<i>proc</i>]<br>setTagMouseTrap</a> (integer pWindow, object pMouseTrap, object pData)</h2>
<h3>This alters the 'user data' of the specified mousetrap area in the window.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap to hold the data. <br>
 <em>pData</em> is any data you wish to store with this mousetrap.
<p>
Win32lib never uses this data. It is a convenience for the coder to
save data specific for the user-defined mousetrap event processing.
<p>
 You can use <a href="MOUSETRAP.htm#GETTAGMOUSETRAP">getTagMouseTrap</a>() to retrieve this data.
<p>
Example:
<pre>
      -- Save a routine id to handle things.
      setTagMouseTrap(MyWindow, 1, routine_id("MT1_Catch"))
<p>
      -- Save some color data
      setTagMouseTrap(MyWindow, 2, {Red, Cyan, BrightGreen})
<p>
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="UPDATEMOUSETRAP">[<i>proc</i>]<br>updateMouseTrap</a> (integer pWindow, integer pMouseTrap, object pRect)</h2>
<h3>This changes the bounding rectangle for a mousetrap.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap to update. <br>
 <em>pRect</em> is either a four-element sequence in the form
 {left, top, right, bottom} relative to the <em>pWindow</em> control, or the id of a
 child control of <em>pWindow</em>. In the second case, the mousetrap covers the entire
 area of the child control. <br>
<p>
 <strong>Note</strong> that if the specified mousetrap does not exist, it will be created
automatically.
<p>
Example:
<pre>
      updateMouseTrap(myWin, 2, {20,17,156, 281})
      updateMouseTrap(myWin, 1, myBitMap)
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#ZORDERMOUSETRAP">zorderMouseTrap</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="ZORDERMOUSETRAP">[<i>proc</i>]<br>zorderMouseTrap</a> (integer pWindow, object pMouseTrap, integer pOrder)</h2>
<h3>This alters the 'depth' of the specified mousetrap area in the window.</h3>
Category: <a href="#MOUSETRAP">MouseTraps</a><br>
<p><p> <em>pWindow</em> is the window that owns the mousetrap. <br>
 <em>pMouseTrap</em> is the id of the mouse trap to order. <br>
 <em>pOrder</em> the absolute depth value. The higher the number, the further in the
background the mousetrap area is. Initially a mousetrap is created with a depth value
of zero. Negative numbers move the mousetrap closer to the foreground.
<p>
Use this if you have mousetrap areas that can overlap. When the w32HMouseTrap
event fires, you get a list of mousetrap areas sorted from closest (in foreground)
to furtherest (in background).
<p>
Example:
<pre>
      -- move area #1 close to the front.
      zorderMouseTrap(MyWindow, 1, -10)
<p>
      -- Order things so that the man is in front of the
      -- bush and the bush is in front of the wall.
      zorderMouseTrap(MyWindow, Wall, 3)
      zorderMouseTrap(MyWindow, Bush, 2)
      zorderMouseTrap(MyWindow, Man, 1)
<p>
</pre>
-------------------------------------------------------
<p>See Also: 
<a href="#CREATEMOUSETRAP">createMouseTrap</a>,
<a href="#DELETEMOUSETRAP">deleteMouseTrap</a>,
<a href="#ENABLEMOUSETRAP">enableMouseTrap</a>,
<a href="#FILTERMOUSETRAP">filterMouseTrap</a>,
<a href="#GETMOUSETRAP">getMouseTrap</a>,
<a href="#GETTAGMOUSETRAP">getTagMouseTrap</a>,
<a href="#HITMOUSETRAP">hitMouseTrap</a>,
<a href="#SETTAGMOUSETRAP">setTagMouseTrap</a>,
<a href="#UPDATEMOUSETRAP">updateMouseTrap</a>
<hr>
