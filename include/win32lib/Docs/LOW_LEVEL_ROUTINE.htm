<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="LOW_LEVEL_ROUTINE">Low Level Routines</a></h1>
<p><h3>These routines give you access to low-level internals.
</h3><br>
Such as C data structures, the device context,
and other Win32 API goodies.

</p>
<li><a href="#GETDC"><i>func</i> getDC</a>( id ) &nbsp;&nbsp;Get the DC (device context) of the control.
<li><a href="#GETIDFROMDC"><i>func</i> getIdFromDC</a>(atom DC) &nbsp;&nbsp;Finds the control Id associated with the supplied Device Context.
<li><a href="#KILLTIMER"><i>proc</i> killTimer</a>( window, timer ) &nbsp;&nbsp;Stop a timer.
<li><a href="#REGISTERW32FUNCTION"><i>func</i> registerw32Function</a>( dll, name, args, result ) &nbsp;&nbsp;Associates an internal id number with the function name.
<li><a href="#REGISTERW32LIBRARY"><i>func</i> registerw32Library</a>(sequence name) &nbsp;&nbsp;Associates an internal id number with the library name.
<li><a href="#REGISTERW32PROCEDURE"><i>func</i> registerw32Procedure</a>( dll, name, args ) &nbsp;&nbsp;Associates an internal id number with the procedure name.
<li><a href="#RELEASEDC"><i>proc</i> releaseDC</a>( control ) &nbsp;&nbsp;Release the device context of the control.
<li><a href="#SENDMESSAGE"><i>func</i> sendMessage</a>( object id, atom command, object wParam, object lParam ) &nbsp;&nbsp;Send a Win32 message to the requested control.
<li><a href="#SETTIMER"><i>proc</i> setTimer</a>( window, timer, ticks ) &nbsp;&nbsp; Start a timer ticking in <em>window</em>.
<li><a href="#W32FUNC"><i>func</i> w32Func</a>(atom funcid, sequence parms) &nbsp;&nbsp;Invoke a Windows function.
<li><a href="#W32PROC"><i>proc</i> w32Proc</a>(atom procid, sequence parms) &nbsp;&nbsp;Invoke a Windows procedure.
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETDC">[<i>func</i>]<br>getDC</a> ( id )</h2>
<h3>Get the DC (device context) of the control.</h3>
<h3>Returns: ATOM: Device Context (DC) of the control.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p>If the DC is already grabbed, the value is simply returned without
grabbing it again.
<p>
 <em>id</em> is either a simple integer or a sequence {id,option}. In the latter case, <em>option</em>
is the sum of zero or more flags:
 <li> DC_OPT_ERROR: if returned DC is 0, trigger an error instead of quietly returning it
 <li> DC_OPT_WINDOW: get a full window DC rather than a standard client DC. This flag only makes sense for standard windows.
<p>
When using the DC_OPT_WINDOW flag, be sure to have released the standard window DC prior.
In these DC's, coordinates are relative to the window rectangle, and not to the client rectangle.
<p>
There are some special cases that are handled:
 <li> Normal controls: This includes any control that is normally
 visible on the screen. This performs a normal <strong>GetDC</strong>.
 <li> <a href="CONTROL.htm#SCREEN">Screen</a>: Passing the parameter of <a href="CONTROL.htm#SCREEN">Screen</a> returns the
DC of the monitor.
 <li> <a href="CONTROL.htm#PRINTER">Printer</a>: Passing the parameter of <a href="CONTROL.htm#PRINTER">Printer</a> returns the
printer's DC, assuming that one has been selected with
 <a href="PRINTING.htm#GETPRINTER">getPrinter</a>.
 <li> <strong>Pixmaps</strong>: This causes a DC compatible with the screen resolution
to be created with the pixmap selected into it.
 <li> <strong>Other</strong>: If the value passed is not identifiable as a valid
Win32Lib control, it is assumed to be a DIB. A compatible DC
is created, and the DIB is selected into it.
<p>
 When you are done with the DC, it should be released with <a href="LOW_LEVEL_ROUTINE.htm#RELEASEDC">releaseDC</a>
 <strong>unless</strong> the DC was obtained during an <a href="#ONPAINT">onPaint</a> event, since the DC
will be released automatically.
<p>See Also: 
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETIDFROMDC">[<i>func</i>]<br>getIdFromDC</a> (atom DC)</h2>
<h3>Finds the control Id associated with the supplied Device Context.</h3>
<h3>Returns: INTEGER: Control ID or 0 if the DC is not associated with a win32lib control.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p> <em>DC</em> is the device context returned by <a href="LOW_LEVEL_ROUTINE.htm#GETDC">getDC</a>
<p>
This is primarily used by add-on libraries as a way to use Win32lib routines that need
a control ID rather than a device context.
<p>
Example:
<pre>
      integer id
      id = getIdFromDC ( theDC )
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="KILLTIMER">[<i>proc</i>]<br>killTimer</a> ( window, timer )</h2>
<h3>Stop a timer.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p> This deactivates <em>timer</em> that was set with <a href="LOW_LEVEL_ROUTINE.htm#SETTIMER">setTimer</a>.
<p>
Example:
<p>
<pre>
          -- deactivate timer #12
           <a href="LOW_LEVEL_ROUTINE.htm#KILLTIMER">killTimer</a>( MyWindow, 12 )
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="REGISTERW32FUNCTION">[<i>func</i>]<br>registerw32Function</a> ( dll, name, args, result )</h2>
<h3>Associates an internal id number with the function name.</h3>
<h3>Returns:  (INTEGER) An identifier for the function, to be used in <a href="LOW_LEVEL_ROUTINE.htm#W32FUNC">w32Func</a></h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p><p>
The library function is not actually linked until its first usage.
<p>
Example:
<pre>
      xLoadIcon = registerw32Function(user32, "LoadIconA", {C_POINTER, C_POINTER}, C_POINTER)
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="REGISTERW32LIBRARY">[<i>func</i>]<br>registerw32Library</a> (sequence name)</h2>
<h3>Associates an internal id number with the library name.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p> ret (INTEGER) An identifier for the library, to be used in <a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32FUNCTION">registerw32Function</a> or <a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32PROCEDURE">registerw32Procedure</a>.
 <em>name</em> is either a DLL name or a list of DLL names. If a list, then they
are tried from left to right until one is linked.
<p>
The library is not actually opened until it's first usage.
<p>
Example
<pre>
     atom libRichEdit, libUser
     -- Use riched20 if possible else use riched32
     libRichEdit = registerw32Library({"riched20.dll", "riched32.dll"} )
<p>
     libUser = registerw32Library("user32.dll")
<p>
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="REGISTERW32PROCEDURE">[<i>func</i>]<br>registerw32Procedure</a> ( dll, name, args )</h2>
<h3>Associates an internal id number with the procedure name.</h3>
<h3>Returns:  (INTEGER) An identifier for the procedure, to be used in <a href="LOW_LEVEL_ROUTINE.htm#W32PROC">w32Proc</a></h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p><p>
The library procedure is not actually linked until its first usage.
<p>
Example:
<pre>
      constant xKillTimer = registerw32Procedure(user32, "KillTimer", {C_POINTER, C_UINT})
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="RELEASEDC">[<i>proc</i>]<br>releaseDC</a> ( control )</h2>
<h3>Release the device context of the control.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p> The DC should have been obtained with <a href="LOW_LEVEL_ROUTINE.htm#GETDC">getDC</a>.
<p>
If the control is not a Pixmap or DIB, and the DC was obtained during an
 <a href="#ONPAINT">onPaint</a> event, there is no need to release the DC. Win32Lib will
 automatically release all DCs obtained during an <a href="#ONPAINT">onPaint</a> event.
<p>
 If the control is the <a href="CONTROL.htm#PRINTER">Printer</a>, there is no need to release the
 DC using <a href="LOW_LEVEL_ROUTINE.htm#RELEASEDC">releaseDC</a>. Instead, use <a href="PRINTING.htm#RELEASEPRINTER">releasePrinter</a>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SENDMESSAGE">[<i>func</i>]<br>sendMessage</a> ( object id, atom command, object wParam, object lParam )</h2>
<h3>Send a Win32 message to the requested control.</h3>
<h3>Returns: ATOM: Win32 result code.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p><p>
 <em>id</em> is either a control ID, or a control Name. <br>
 <em>command</em> is the Windows Message code to send. <br>
 <em>wParam</em> and lParam are the appropriate data items for the specific
 <em>command</em> you are sending. These can be either atom values or text strings.
<p>
There are hundreds of Windows message codes. Each type of control responds to
commands that are specific to it. There are too many to document here but
they can be found in many publications - the easiest might be the Microsoft
 SDK documentation found at <strong> http://msdn.microsoft.com </strong>. <a href="..\win32_constants.htm#Common Windows messages">Here</a>
is a list of messages understood bu win32lib, but it is not a comprehensive listing.
As a matter of fact, there is not a single, authoritative, official, comprehensive listing.
<p>
Example:
<pre>
      res = sendMessage(myToolbar, TB_ADDSTRING, 0, "Test String" )
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETTIMER">[<i>proc</i>]<br>setTimer</a> ( window, timer, ticks )</h2>
<h3> Start a timer ticking in <em>window</em>.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p>Timers are clocks that are maintained by Windows, and trigger events
at a user-specified interval, measured in milliseconds.
<p>
The arguments are:
 <li> <em>window</em>: <a href="CONTROL.htm#WINDOW">Window</a> the timer belongs to.
 <li> <em>timer</em>: Unique ID assigned to the timer.
 <li> <em>milliseconds</em>: How much time, in milliseconds, that must pass
 before triggering an <a href="#TIMER">Timer</a> event.
<p>
 To respond to timer events, set a handler for the <a href="EVENT.htm#W32HTIMER">w32HTimer</a> event. You can have more
 than one timer per <a href="CONTROL.htm#WINDOW">window</a>. If your window is too busy to receive the
timer messages, they will be discarded.
<p>
Example:
<p>
<pre>
          -- start a timer with id #12 in MyWindow
          -- it will trigger every 3 seconds.
           <a href="LOW_LEVEL_ROUTINE.htm#SETTIMER">setTimer</a>( MyWindow, 12, 3000 )
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#W32FUNC">w32Func</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32FUNC">[<i>func</i>]<br>w32Func</a> (atom funcid, sequence parms)</h2>
<h3>Invoke a Windows function.</h3>
<h3>Returns: (ATOM) The value from the windows function is returned.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p> The function to invoke is supplied in <em>funcid</em>. This can either be an
 identifier returned by <a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32FUNCTION">registerw32Function</a>() or one returned by define_c_func().
<p>
 The parameters for the function are contained in the sequence <em>parms</em>.
<p>
Example:
<pre>
    -- Get the width of the screen.
    screenCX = w32Func(xGetSystemMetrics, {SM_CXSCREEN})
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32PROC">w32Proc</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32PROC">[<i>proc</i>]<br>w32Proc</a> (atom procid, sequence parms)</h2>
<h3>Invoke a Windows procedure.</h3>
Category: <a href="#LOW_LEVEL_ROUTINE">Low Level Routines</a><br>
<p><p> The procedure to invoke is supplied in <em>procid</em>. This can either be an
 identifier returned by <a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32PROCEDURE">registerw32Procedure</a>() or one returned by define_c_proc().
<p>
 The parameters for the procedure are contained in the sequence <em>parms</em>.
<p>
Example:
<pre>
    -- Force the window to be updated now.
    w32Func(xUpdateWindow, {getHandle(myWin)})
</pre>
<p>See Also: 
<a href="#GETDC">getDC</a>,
<a href="#GETIDFROMDC">getIdFromDC</a>,
<a href="#KILLTIMER">killTimer</a>,
<a href="#REGISTERW32FUNCTION">registerw32Function</a>,
<a href="#REGISTERW32LIBRARY">registerw32Library</a>,
<a href="#REGISTERW32PROCEDURE">registerw32Procedure</a>,
<a href="#RELEASEDC">releaseDC</a>,
<a href="#SENDMESSAGE">sendMessage</a>,
<a href="#SETTIMER">setTimer</a>,
<a href="#W32FUNC">w32Func</a>
<hr>
