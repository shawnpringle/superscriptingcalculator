<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="FORM">Forms</a></h1>
<p><h3>Forms are a combination of a Window and its controls.
</h3><br>
Win32lib enables easy ways of creating a form and writing event handlers for it.

</p>
<li><a href="#CREATEFORM"><i>proc</i> createForm</a>( sequence pFormDefinition ) &nbsp;&nbsp;This creates a Window and its controls.
<li><a href="#GETFORMID"><i>func</i> getFormIds</a>(integer Action) &nbsp;&nbsp;Returns the most recently created form(s)
<li><a href="#LOADFORM"><i>func</i> loadForm</a>(sequence FileName) &nbsp;&nbsp;Builds a form definition from a text file.
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CREATEFORM">[<i>proc</i>]<br>createForm</a> ( sequence pFormDefinition )</h2>
<h3>This creates a Window and its controls.</h3>
Category: <a href="#FORM">Forms</a><br>
<p><p> <em>pFormDefinition</em> is a list of Control definitions, the first is assumed to be
a Window definition and the rest are the controls that the window is to contain.
 Each control definition is passed on to <a href="DEFINING_CONTROL.htm#NEWUIOBJ">newUIObj</a> to create the actual control in
 the order they are defined in <em>pFormDefinition</em>.
<p>
 The elements in <em>pFormDefinition</em> as strings that each define a single control. The
string is a comma separated list of parameters in the form KEY=VALUE, but note
that some key names can be defaulted if omitted.
All the parameters have a keyword name, which is not case sensitive, meaning
that "width=200" and "WIDTH=200" are both acceptable. However, certain
parameters can have assumed keyword names if not supplied. The first unnamed
parameter is assumed to be the "TYPE" parameter, the second unnamed
is assumed to be "CAPTION", and so on for "NAME", "LEFT", "TOP", "WIDTH",
"HEIGHT", "FLAGS", and "EXFLAGS" parameters, in that order. If there
are still unnamed parameters after all the assumed ones have been
allocated, an error message is issued.
<p>
 Also note that <strong>include w32Start.ew</strong> is usually used in conjunction with
applications that use createForm()
<p>
Example:
<pre>
      createForm({"Window, Login,height=200,bar=status, left=10, top=Center",
                  "RText,   User Name:, left=10,top=10",
                  "EditText,User Name Text,caption=(), from=UserName" &
                            ", left=(2),top=(-2,,), width=25chars",
                  "RText,   Password:, from=UserName,left=(),top=(15),width=()",
                  "EditText,Password Text,caption=(), from=Password" &
                            ", left=(2),top=(-2,,), width=(),flag=es_password",
                  "DefPushButton,&Submit, right=75, width=70,bottom=5, height=25",
                  "CancelButton,&Cancel,  from=Submit, left=(5),top=()" &
                  ", height=(), width=(), flag=autoclose",
                  "TabOrder=(UserName,PasswordText,Submit)"
                  })
</pre>
<p>See Also: 
<a href="#GETFORMID">getFormIds</a>,
<a href="#LOADFORM">loadForm</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETFORMID">[<i>func</i>]<br>getFormIds</a> (integer Action)</h2>
<h3>Returns the most recently created form(s)</h3>
<h3>Returns:  SEQUENCE: A list of window ids created by the <a href="FORM.htm#CREATEFORM">createForm</a> routine.</h3>
Category: <a href="#FORM">Forms</a><br>
<p><p> If <em>Action</em> = 1 then only the most recent form id is returned,
otherwise all the form ids are returned as a list ordered from
oldest to most recently created.
<p>
Example:
<pre>
      sequence fid
      -- Create a form
      createForm( FormDefn )
      -- Get its form (window) id.
      fid = getFormIds(1)
</pre>
<p>See Also: 
<a href="#CREATEFORM">createForm</a>,
<a href="#LOADFORM">loadForm</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="LOADFORM">[<i>func</i>]<br>loadForm</a> (sequence FileName)</h2>
<h3>Builds a form definition from a text file.</h3>
<h3>Returns:  SEQUENCE: A form definition suitable to give to <a href="FORM.htm#CREATEFORM">createForm</a>()</h3>
Category: <a href="#FORM">Forms</a><br>
<p><p> <em>FileName</em> is the pathname of a file that contains form definition
 statements. These are almost identical to the ones used by <a href="#NEWUIOBJECT">newUIObject</a>
but there are a few differences to help laying out the text file.
<p>
The form definition file consists of one or more lines of text. Any
 text following the <strong>comment string</strong> are stripped off. Initially
 the comment string is two semi-colons, eg. ";;". <br>
The lines are grouped into UI Object definitions. Each definition
starts in column 1. If you need to extend a definition over
multiple lines, offset the second and subsequent lines by at least
one space (or tab) character.
<p>
You can change the default comment string by inserting a comment
in the form "comment=&lt;xxx>" where "&lt;xxx>" is one or more characters
that become the new comment lead-in string from that point onwards.
<p>
Example of a form definition file:
<pre>
 ;;comment=---
 --- Customer.form
 --- This defines the customer input screen.
<p>
 Window, Customer Input
         at={20, 20}
         bar=status
<p>
<p>
 Label, Number ------------------ Customer Number
      at={5,10}
 EditText
      left={}, top={0}, width=20ch
<p>
 Label, Name ------------------ Customer Name
      left={}, top={4}
 EditText
      left={}, top={0}, width=50char
<p>
 Button, Accept
      left={}, top={10}
 Button, Cancel
      left={4}, top={}
</pre>
<p>
Example for calling loadForm:
<pre>
      sequence lFormDefn
      lFormDefn = loadForm("customer.form")
      createForm(lFormDefn)
      lFormId = getFormIds(1)
      setText(lFormId[1], sprintf("%s (%d)",{getText(lFormId[1]), lFormId[1]}))
</pre>
<p>See Also: 
<a href="#CREATEFORM">createForm</a>,
<a href="#GETFORMID">getFormIds</a>
<hr>
