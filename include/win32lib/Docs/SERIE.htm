<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="SERIE">Series</a></h1>
<p><h3>Some utility routines to manange series of numbers.
</h3><br>
<p>
A Series is just a set of numbers that you use when you need a set of sequential
values.
<p>
Example:
<pre>
    constant fldA = next_number("My Series")
    constant fldB = next_number("My Series")
    constant fldC = next_number("My Series")
    constant fldD = next_number("My Series")
    constant fldE = next_number("My Series")
    constant NumFlds = current_number("My Series")
</pre>
This would give the constants fldA - fldE the values 1 to 5 respectively, and the NumFlds is set to
5 as well.
<p>
 By default, a Series starts at 1 and increments by 1 with each call to <a href="SERIE.htm#NEXT_NUMBER">next_number</a>().
However, you may define a special series to suit particular needs. You can change the
increment amount, the starting value, and whether the series wraps around when getting
to the end.
<p>
Example:
<pre>
      -- Define a set of angles from 0 to 2PI, incrementing by 0.1.
      -- And when the last angle is reached, start again at zero.
      define_series("angle", { {SValue,0}, {SFirst,0}, {SLast,2*PI},
                               {sIncr,0.1}, {SWrap,True} } )
</pre>
<p>
If you have very special requirements, you can even define a routine_id that
will be called when the user calls next_number and current_number. You can then
make decisions about the value returned to the user; for example you may need to
update a database whenever the user gets a new series value, or maybe you need to
encrypt it before the user gets it, or convert it text, etc...
<p>
<pre>
      define_series("special", { {sRtnId,routine_id("SeriesChecker")}, {SUserData,Tolerance} } )
</pre>
<p>
The routine mentioned here will be called with five (5) parameters:
 <li> <em>object pName</em> : The name of the series.
 <li> <em>integer pRequest</em> : Either SCB_CurrentNum or SCB_NextNum which is the type of request that
the user is asking for.
 <li> <em>atom pValue</em> : The series' current value.
 <li> <em>integer pHasWrapped</em> : Either 0 (false) or 1 (true) indicating whether or not the series <strong>just</strong>
wrapped around to the start again.
 <li> <em>object pUserData</em> : The user data stored in the series by the last define_series() call to it.
<p>
The value returned by this routine will be passed directly to the user.

</p>
<li><a href="#CURRENT_NUMBER"><i>func</i> current_number</a>(object pName) &nbsp;&nbsp; Returns the current value in the series but does <strong>not</strong> increment it.
<li><a href="#DEFINE_SERIE"><i>proc</i> define_series</a>(object pName, sequence pAttributes) &nbsp;&nbsp;Defines a new series.
<li><a href="#GET_SERIE"><i>func</i> get_series</a>(object pName) &nbsp;&nbsp;Fetches an entire definition for a series.
<li><a href="#NEXT_NUMBER"><i>func</i> next_number</a>(object pName) &nbsp;&nbsp;Increments the series and returns the next value in it.
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CURRENT_NUMBER">[<i>func</i>]<br>current_number</a> (object pName)</h2>
<h3> Returns the current value in the series but does <strong>not</strong> increment it.</h3>
<h3>Returns: ATOM: The current value in the series.</h3>
Category: <a href="#SERIE">Series</a><br>
<p><p><p>
Example:
<pre>
    constant CUSTREC      = next_number("Record Layouts")
    constant C_Id         = next_number(CUSTREC)
    constant C_GivenName  = next_number(CUSTREC)
    constant C_FamilyName = next_number(CUSTREC)
    constant C_Address    = next_number(CUSTREC)
    constant C_Email      = next_number(CUSTREC)
    constant CUSTREC_SIZEOF = current_number(CUSTREC)
<p>
    constant INVOICE      = next_number("Record Layouts")
    constant I_Id         = next_number(INVOICE)
    constant I_Date       = next_number(INVOICE)
    constant I_CustId     = next_number(INVOICE)
    constant I_Terms      = next_number(INVOICE)
    constant I_Address    = next_number(INVOICE)
    constant INVOICE_SIZEOF = current_number(INVOICE)
</pre>
---------------------------------------------
<p>See Also: 
<a href="#DEFINE_SERIE">define_series</a>,
<a href="#GET_SERIE">get_series</a>,
<a href="#NEXT_NUMBER">next_number</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="DEFINE_SERIE">[<i>proc</i>]<br>define_series</a> (object pName, sequence pAttributes)</h2>
<h3>Defines a new series.</h3>
Category: <a href="#SERIE">Series</a><br>
<p><p>Normally one doesn't need to define a series as a default series is created
 one the first call of <a href="SERIE.htm#NEXT_NUMBER">next_number</a>(). However, if you have special requirements
this routine will help customize a series for you.
<p>
 <em>pName</em> is the user-defined name for this series.
 <em>pAttributes</em> is a set of zero or more attribute/value pairs to apply to this series.
<p>
 Valid attributes are : <br>
 <li> <strong>SValue</strong> : Only used when resetting a series to a defined value.
 <li> <strong>SIncr</strong> : The amount to increment the series by. Default is 1.
 <li> <strong>SWrap</strong> : Indicator that the series can wrap from last to first. Default is 0 (no wrap).
 <li> <strong>SFirst</strong> : The first value in the series. Default is 1.
 <li> <strong>SLast</strong> : The last value in the series. Default is 0. If wrapping, this is the value that triggers the wrap.
 <li> <strong>SRtnId</strong> : A routine_id that is called when <a href="SERIE.htm#NEXT_NUMBER">next_number</a>() and <a href="SERIE.htm#CURRENT_NUMBER">current_number</a>() are just about to
return a value to the user.
 <li> <strong>SUserData</strong> : Any user data you wish to be passed back to the routine_id. Default is {}.
Example:
<pre>
      -- Define a set of angles from 0 to 2PI, incrementing by 0.1.
      -- And when the last angle is reached, start again at zero.
      define_series("angle", { {SValue,0}, {SFirst,0}, {SLast,2*PI},
                               {sIncr,0.1}, {SWrap,True} } )
</pre>
<p>See Also: 
<a href="#CURRENT_NUMBER">current_number</a>,
<a href="#GET_SERIE">get_series</a>,
<a href="#NEXT_NUMBER">next_number</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GET_SERIE">[<i>func</i>]<br>get_series</a> (object pName)</h2>
<h3>Fetches an entire definition for a series.</h3>
<h3>Returns: SEQUENCE: A Series definition.</h3>
Category: <a href="#SERIE">Series</a><br>
<p><p><p>
 The returned value could be used as input to <a href="SERIE.htm#DEFINE_SERIE">define_series</a>() if you wish.
<p>
 The attributes are returned in this order as a set of attribute/value pairs: <br>
 <li> <strong>SValue</strong> : The current value of the series.
 <li> <strong>SIncr</strong> : The amount to increment the series by.
 <li> <strong>SWrap</strong> : Indicator that the series can wrap from last to first.
 <li> <strong>SFirst</strong> : The first value in the series.
 <li> <strong>SLast</strong> : The last value in the series.
 <li> <strong>SRtnId</strong> : The stored routine_id, if any
 <li> <strong>SUserData</strong> : Any user data you wish to be passed back to the routine_id.
<p>
Example:
<pre>
      sequence lDef
      lDef = get_series("Record Layouts")
</pre>
---------------------------------------------
<p>See Also: 
<a href="#CURRENT_NUMBER">current_number</a>,
<a href="#DEFINE_SERIE">define_series</a>,
<a href="#NEXT_NUMBER">next_number</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="NEXT_NUMBER">[<i>func</i>]<br>next_number</a> (object pName)</h2>
<h3>Increments the series and returns the next value in it.</h3>
<h3>Returns: ATOM: The next value in the series.</h3>
Category: <a href="#SERIE">Series</a><br>
<p><p><p>
Example:
<pre>
    constant CUSTREC      = next_number("Record Layouts")
    constant C_Id         = next_number(CUSTREC)
    constant C_GivenName  = next_number(CUSTREC)
    constant C_FamilyName = next_number(CUSTREC)
    constant C_Address    = next_number(CUSTREC)
    constant C_Email      = next_number(CUSTREC)
    constant CUSTREC_SIZEOF = current_number(CUSTREC)
<p>
    constant INVOICE      = next_number("Record Layouts")
    constant I_Id         = next_number(INVOICE)
    constant I_Date       = next_number(INVOICE)
    constant I_CustId     = next_number(INVOICE)
    constant I_Terms      = next_number(INVOICE)
    constant I_Address    = next_number(INVOICE)
    constant INVOICE_SIZEOF = current_number(INVOICE)
</pre>
---------------------------------------------
<p>See Also: 
<a href="#CURRENT_NUMBER">current_number</a>,
<a href="#DEFINE_SERIE">define_series</a>,
<a href="#GET_SERIE">get_series</a>
<hr>
