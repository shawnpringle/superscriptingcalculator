<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="DEFINING_CONTROL">Defining Controls</a></h1>
<p><h3>This section describes how to create windows and the various elements that can appear in them.
</h3><br>

</p>
<li><a href="#CREATE"><i>func</i> create</a>( pControl, title, parent, x, y, cx, cy, flags ) &nbsp;&nbsp; Create an object of type <em>pControl</em>.
<li><a href="#CREATEEX"><i>func</i> createEx</a>( integer controlType, sequence caption, atom Owner, object Left, object Top, object Width, object Height, object flags, object exFlags ) &nbsp;&nbsp; Create an object of type <em>controlType</em>.
<li><a href="#NEWUIOBJ"><i>proc</i> newUIObj</a>(sequence Definition) &nbsp;&nbsp;Defines a User Interface Object, a.k.a. a Control
<li><a href="#W32CONTROLNAME"><i>const</i> w32ControlNames</a> &nbsp;&nbsp;Holds the names of recognised controls.
<li><a href="#W32CONTROLTYPE"><i>const</i> w32ControlTypes</a> &nbsp;&nbsp; Holds the values of recognised controls, in the same order as <a href="DEFINING_CONTROL.htm#W32CONTROLNAME">w32ControlNames</a>.
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CREATE">[<i>func</i>]<br>create</a> ( pControl, title, parent, x, y, cx, cy, flags )</h2>
<h3> Create an object of type <em>pControl</em>.</h3>
<h3>Returns: Control identifier.</h3>
Category: <a href="#DEFINING_CONTROL">Defining Controls</a><br>
<p><p><p>
 The <em>title</em> is the text that will appear in the object's caption. It can be
a single string or a sequence of two strings. In this later form, the first
 string is the caption text, and the second is the tooltip text. <br>
 <br> Note for <a href="CONTROL.htm#BITMAP">Bitmap</a> or <a href="CONTROL.htm#ICON">Icon</a> controls, the caption can also be the name of a bitmap
(.BMP) or icon (.ICO) file. In this case, it will be automatically loaded into the
Bitmap control and placed in RAM until the program ends.
<p>
 <em>x</em> and <em>y</em> specify the position of the object, and <em>cx</em> and
 <a href="#CY">cy</a> specify the width and height.
<p>
 You can specify additional attributes by passing them in the <em>flags</em>
 parameter. If <em>flags</em> is an atom, then these are combined with the
 default style flags for the control class. If <em>flags</em> is a sequence of
flags, then they replace the default style flags.
<p>
 The <em>flags</em> parameter is used differently for <a href="CONTROL.htm#PICTUREBUTTON">PictureButton</a> and <a href="CONTROL.htm#TOGGLEPICTURE">TogglePicture</a>
controls. In this case, it can be the name of a bitmap (.BMP) or an icon (.ICO) file
which causes that image to be displayed on the button face. Alternatively, you can
pass the handle of bitmap or icon in the flags parameter. This technique is useful
if you have preloaded images from files and intend to reuse them. Once the type
of image, bitmap or icon, is determined for the control, you cannot change
it to the other type. For icons, you can specify the caption as {filename,icon_index}.
<p>
 Note that if the <em>flags</em> parameter contains the flag 'w32AUTOCLOSE', the
control's click event will close its parent window.
<p>
 <strong>Returns</strong>: The value returned is the <em>id</em> of the control. This is
typically the first parameter expected in Win32Lib functions.
<p>
The parent of the main window is 0.
<p>
If you don't care about the positioning of a window, you can
 use the parameter <strong>Default</strong>, and Windows will automatically
position the window.
<p>
 <strong>Note</strong>: for windows, the size specified by <em>cx</em>, <em>cy</em> is
 the <em>total</em> size of the window, not the size of the client area.
 After creating a Window, you can use <a href="ATTRIBUTE.htm#SETCLIENTRECT">setClientRect</a> to give an exact
client area size.
<p>
If you wish a window to share the background and menu bar of another automatically,  pass {id}
 as first argument, where <em>id</em> is the ID of the base window. This link can never be broken.
<p>
 <strong>Note</strong>: The <em>x</em> and <em>y</em> values are relative to the parent's client area. For tab controls,
this is the whole area of the control, including the tabs themselves, so you'll usually want
to use values of y not less than 30 (the exact figure depends on the font being used).
<p>
 Each dimension for <em>x</em>, <em>y</em>, <em>cx</em>, and <em>cy</em> can be expressed as either... <br>
 a) an integer >= 0, in which case it is not touched. <br>
 eg.  50 (= 50 pixels) <br>
b) an atom in the range > 0 and &lt; 1, which is taken to be a %
 of the control's parent dimension. <br>
 eg.  0.50 (= 50% of parent's size) <br>
 c) The constant <em>w32Edge</em> which signifies the parent's extreme
client edge for the dimension. That is, either the rightmost or
 bottom most edge, as appropriate. <br>
d) a sequence of two elements, the first as in (b) or (c) above, and
 the other a pixel offset. The offset is added after converting. <br>
 eg.  {0.50, -3} ( = 50% of parent size less 3 pixels) <br>
 eq   (w32Edge, -10} ( = right/bottom pixel less 10 pixels) <br>
e) a sequence of three elements, the first two as in (d), and
the other a two-element sequence containing the minimum and
maximum allowable values. These can be a percentage or a
 pixel amount. <br>
eg.  {0.50, -3, {20, 300}} ( = 50% of parent size less
3 pixels, and a minimum of 20 pixels and a
 maximum of 300 pixels) <br>
<p>
NOTE: specifying size or position relative to the paent or another control enables
their being figured out when the parent window opens. The controls won't resize until
you take appropriate steps for them to do so. The various bars are an exception to this rule.
<p>
 However, for <a href="CONTROL.htm#STATUSBAR">StatusBar</a> controls, the <em>x</em> and <em>cx</em> values are ignored,
as a statusbar is always aligned to the bottom left edge of a window.
 Also for <a href="CONTROL.htm#STATUSBAR">StatusBar</a> controls, the <em>y</em> can be used to define subPanels
 in the bar. See <a href="ATTRIBUTE.htm#SETSUBFIELD">setSubFields</a> for details.
<p>
 For <strong>Menus</strong> , if the <em>title</em> contains a '!' character, a <strong>Command</strong> menu
 is created rather than a <strong>Popup</strong> menu. The difference is that a Command menu
reacts immediately to being clicked, while a Popup menu will display its
 menu items instead. <br>
 <strong>Note 1:</strong> This type of menu will not be allowed
to contain MenuItems. The reason being that when you click on the menu
 a w32HClick event is generated and any items are never shown. <br>
 <strong>Note 2:</strong> The '!' character is stripped out of the title before displaying
 it on screen. <br>
For Menu, Popup, MenuItem and MenuSpacer controls, the position, size and extended flags are interpreted as follows:
 <li> <strong>x</strong>: insertion point. This may be any of
<ul>
 <li>MP_BEFORE: <strong>y</strong> is the id of the item before which to insert;
 <li>MP_AT: <strong>y</strong> is the 1-based position at which to insert;
 <li>MP_AFTER: <strong>y</strong> is the id of the item after which to insert;
 <li>MP_END: insert at end, <strong>y</strong> is ignored.
 </ul> 
 <li> <strong>cx</strong> is the handle to the unchecked mark bitmap;
 <li> <strong>cy</strong> is the handle to the checked mark bitmap;
 <li> exFlags is the handle to the displayed bitmap.
<p>
For ListView controls, the caption is interpretated as a sequence of formatting hints, one for each column.
 The complete form of a hint is a triple {title,width,alignment} as in <a href="#SETLVCOLUMNHEADING">setLVColumnHeadings</a>().
Sensible defaults are used when the hint is not complete. Passing a single string is equivalent
to {{that string}}, and {number} is treated as {{"",that number}}.
<p>
 For tab items, the <strong>x</strong> parameter is the 1 based position at which to insert (use 0
 to insert at end), and exFlags is the index of an image in the common image list. <br>
Examples:
<pre>
      -- create a window
       --  The following will create a <a href="CONTROL.htm#WINDOW">Window</a> called <strong>MyWindow</strong>:
      constant MyWindow = create( Window,         -- the pControl
                          "My Window",        -- the caption
                          0,                  -- the parent
                          Default, Default,   -- x and y position
                          0.5,                -- 50% of the screen width
                          40,                 -- 40 pixels high
                          0 )                 -- no special flags
<p>
      constant MsgWindow = create( Window,         -- the pControl
                          "Messages",        -- the caption
                          0,                  -- the parent
                          Default, Default,   -- x and y position
                          200,                -- 200 pixels wide
                          200,                -- 200 pixels high
                          {WS_DLGFRAME,
                           WS_SYSMENU,
                           WS_MINIMIZEBOX
                           } )-- replacement flags
</pre>
<p>
 The following will create a <a href="CONTROL.htm#PUSHBUTTON">PushButton</a> in <strong>MyWindow</strong>:
<pre>
      -- create a pushbutton
      constant MyButton = create(
                              PushButton,         -- the pControl
                              {"Push Me!",        -- the caption
                               "Go on, have a go!"}, -- the tooltip text
                              MyWindow,           -- the parent
                              10, 10,             -- x and y position
                              60, 40,             -- width and height
                              0 )                 -- no special flags
</pre>
<p>
 The following will create a <a href="CONTROL.htm#BITMAP">Bitmap</a> in <strong>MyWindow</strong>:
<pre>
      -- create a bitmap
      constant BM1 = create(
                              Bitmap,         -- the pControl
                              "images\\logo.bmp", -- the file to display
                              MyWindow,           -- the parent
                              10, 90,             -- x and y position
                              60, 40,             -- width and height
                              0 )                 -- no special flags
</pre>
<p>
The different classes of objects are:
 <li> <a href="CONTROL.htm#BITMAP">Bitmap</a>: static bitmap
 <li> <a href="CONTROL.htm#CHECKBOX">CheckBox</a>: check box
 <li> <a href="CONTROL.htm#COMBO">Combo</a>: combo box - has edit box and drop down list (aka ComboBox)
 <li> <a href="CONTROL.htm#COMBOBOXEX">ComboBoxEx</a>: Combo with images
 <li> <a href="CONTROL.htm#CTEXT">CText</a>: static text lable, center justified
 <li> <a href="CONTROL.htm#DEFPUSHBUTTON">DefPushButton</a>: default push button
 <li> <a href="CONTROL.htm#DROPDOWNLIST">DropDownList</a>: drop down list, non-editable
 <li> <a href="CONTROL.htm#EDITTEXT">EditText</a>: edit text (aka EditBox, TextBox, SleText)
 <li> <a href="CONTROL.htm#FLATTOOLBAR">FlatToolBar</a>: like a toolbar, only flat
 <li> <a href="CONTROL.htm#GROUP">Group</a>: group box  (aka GroupBox)
 <li> <a href="CONTROL.htm#HSCROLL">HScroll</a>: horizontal scroll bar
 <li> <a href="CONTROL.htm#HTRACKBAR">HTrackBar</a>: horizontal track bar
 <li> <a href="CONTROL.htm#ICON">Icon</a>: static icon
 <li> <a href="#IMAGELIST">ImageList</a>: A storage container for images.
 <li> <a href="CONTROL.htm#LIST">List</a>: list with scroll bar (aka ListBox)
 <li> <a href="CONTROL.htm#LISTVIEW">ListView</a>: list with icons, labels and columns
 <li> <a href="CONTROL.htm#LTEXT">LText</a>: left justified static label
 <li> <a href="MENU.htm#MENU">Menu</a>: menu bar item
 <li> <a href="CONTROL.htm#MENUITEM">MenuItem</a>: dropdown menu item
 <li> <a href="CONTROL.htm#MENUSPACER">MenuSpacer</a>: Horizontal line in a menu.
 <li> <a href="CONTROL.htm#MLETEXT">MleText</a>: multiple line text edit
 <li> <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a>: select dates
 <li> <a href="CONTROL.htm#PICTUREBUTTON">PictureButton</a>: push button with graphic
 <li> <a href="CONTROL.htm#PIXMAP">Pixmap</a>: off-screen color bitmap
 <li> <a href="CONTROL.htm#POPUP">Popup</a>: a pop up menu
 <li> <a href="CONTROL.htm#PROGRESSBAR">ProgressBar</a>: shows task completion state
 <li> <a href="CONTROL.htm#PUSHBUTTON">PushButton</a>: push button (aka Button, CommandButton)
 <li> <a href="CONTROL.htm#RADIO">Radio</a>: radio button (aka RadioButton)
 <li> <a href="CONTROL.htm#REBAR">ReBar</a>: advanced toolbars
 <li> <a href="#REBARBAND">ReBarBand</a>: Rebar divider for grouping controls
 <li> <a href="CONTROL.htm#RICHEDIT">RichEdit</a>: text edit with formatting
 <li> <a href="CONTROL.htm#RTEXT">RText</a>: right-justified static text label
 <li> <a href="CONTROL.htm#SEPBUTTON">SepButton</a>: divider on FlatToolBars
 <li> <a href="CONTROL.htm#SIMPLECOMBO">SimpleCombo</a>: combo box, no drop down list
 <li> <a href="CONTROL.htm#SORTEDCOMBO">SortedCombo</a>: combo box, with sorted list
 <li> <a href="CONTROL.htm#SORTEDLIST">SortedList</a>: list, with sorted elements
 <li> <a href="CONTROL.htm#STATUSBAR">StatusBar</a>: control for status text
 <li> <a href="CONTROL.htm#TABCONTROL">TabControl</a>: control containing tab items
 <li> <a href="CONTROL.htm#TABITEM">TabItem</a>: control item in <a href="CONTROL.htm#TABCONTROL">TabControl</a>
 <li> <a href="CONTROL.htm#TOGGLEBUTTON">ToggleButton</a>: push button that toggles off and on
 <li> <a href="CONTROL.htm#TOGGLEPICTURE">TogglePicture</a>: toggle button with picture
 <li> <a href="CONTROL.htm#TOOLBAR">ToolBar</a>: control for placing other controls into
 <li> <a href="CONTROL.htm#TOOLTIP">ToolTip</a>: A group of tooltips with all the same style.
 <li> <a href="CONTROL.htm#TREEVIEW">TreeView</a>: hierarchical list
 <li> <a href="CONTROL.htm#TRICHECKBOX">TriCheckBox</a>: 3 state check box
 <li> <a href="CONTROL.htm#UPDOWN">UpDown</a>: increment/decrement control
 <li> <a href="CONTROL.htm#VSCROLL">VScroll</a>: vertical scroll bar
 <li> <a href="CONTROL.htm#VTRACKBAR">VTrackBar</a>: vertical track bar
 <li> <a href="CONTROL.htm#WINDOW">Window</a>: window
<p>See Also: 
<a href="#CREATEEX">createEx</a>,
<a href="#NEWUIOBJ">newUIObj</a>,
<a href="#W32CONTROLNAME">w32ControlNames</a>,
<a href="#W32CONTROLTYPE">w32ControlTypes</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CREATEEX">[<i>func</i>]<br>createEx</a> ( integer controlType, sequence caption, atom Owner, object Left, object Top, object Width, object Height, object flags, object exFlags )</h2>
<h3> Create an object of type <em>controlType</em>.</h3>
<h3>Returns: Control identifier.</h3>
Category: <a href="#DEFINING_CONTROL">Defining Controls</a><br>
<p><p><p>
 This is the same as <a href="DEFINING_CONTROL.htm#CREATE">create</a>, but allows you to specify extented
attribute flags.
<p>See Also: 
<a href="#CREATE">create</a>,
<a href="#NEWUIOBJ">newUIObj</a>,
<a href="#W32CONTROLNAME">w32ControlNames</a>,
<a href="#W32CONTROLTYPE">w32ControlTypes</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="NEWUIOBJ">[<i>proc</i>]<br>newUIObj</a> (sequence Definition)</h2>
<h3>Defines a User Interface Object, a.k.a. a Control</h3>
Category: <a href="#DEFINING_CONTROL">Defining Controls</a><br>
<p><p>This is a high-level method of defining the attributes of a control
 to be used by your program. It is an interface to the <a href="DEFINING_CONTROL.htm#CREATE">create</a>() routine.
<p>
 <a href="EVENT.htm#SETCALLBACK">setCallback</a>() is usually used in conjunction with applications that use newUIObj()
<p>
 The <em>Definition</em> parameter is used to specify a specific type of control
to create and its attributes. It consists of one or more parameters that
can be expressed in a variety of formats, depending on your preferred
 way of doing things. However they are all variations on a set of <em>keyword=value</em>
 pairs, where the <strong>key</strong> is expresses the type of parameter and the <strong>value</strong>
 is the parameter's information. <br>
<p>
 The parameters inside <em>Definition</em> can be formed as a 2-element sequence
where the first element is the keyword and the second is the information. For
 example <strong>("width", 200)</strong>. The alternative to this is to have the
 parameter as a string, <strong>"width=200"</strong>. In fact, when using the string form
you can have multiple parmeters in the same string, eg.
 <strong>"width=200, height=300, left=20, top=35"</strong> with each parmeter delimited
 by a comma. <br>
 So to summarize this, the <em>Definition</em> sequence consists of one or more
 elements, and each element can <strong>either</strong> be a 2-element sequence of
(keyword,value) or a string that contains one or more comma delimited
'keyword=value' entries.
<p>
All the parameters have a keyword name, which is not case sensitive, meaning
that "width=200" and "WIDTH=200" are both acceptable. However, certain
parameters can have assumed keyword names if not supplied. The first unnamed
parameter is assumed to be the "TYPE" parameter, the second unnamed
is assumed to be "CAPTION", and so on for "NAME", "LEFT", "TOP", "WIDTH",
"HEIGHT", "FLAGS", and "EXFLAGS" parameters, in that order. If there
are still unnamed parameters after all the assumed ones have been
allocated, an error message is issued.
<p>
 <strong>Reference Control</strong>
Some of the commands deal with a 'reference control'. By default, this is the previously
defined control, but can be explictly named in some cases too.
<p>
 The keywords supported are ... <br>
 <strong>AT</strong> ** This is a shorthand for LEFT=n,TOP=n. It specifies both the left and top position
 of the control. The format is AT=(leftpos,toppos) where both <em>leftpos</em> and <em>toppos</em> have the
 same formats as allowed for <em>LEFT</em>= and <em>TOP</em>= parameters respectively. <br>
 Additionally, if either <em>leftpos</em> or <em>toppos</em> is omitted, then <em></em>() is assumed
for them, meaning that they use the same position as the previous control, respectively.
 Also, if <em>leftpos</em> or <em>toppos</em> are in the form <em></em>/b"x"nnn where <em>x</em> is either '>' or '&lt;'
 and <em>nnn</em> is a number. The '>' means that the control is positioned <em>nnn</em> pixels after
 the previous control's <em>other</em> edge and '&lt;' means it is positioned <em>nnn</em> pixels before
 the previous control's <em>other</em> edge. By " <em>other</em>" edge
 the same as LEFT=(+/-nnn) and TOP=(+/-nnn) respectively. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>at=(20,10)</strong> --> The control's is positioned at 20 pixels from the left,
 and 10 pixels from the top. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>at=((3),(0,OtherControl))</strong> --> The control's is positioned at 3 pixels to the left
 of the previously defined control, and 0 pixels from the bottom a control called "OtherControl". <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>at=(,+4)</strong> --> The control is positioned with the same <em>left</em> position as the
previous control and 4 pixels below the previous control.
<p>
 <strong>BARS</strong> or <strong>BAR</strong> ** This only applies to a Window control. It is used to specify any toolbar,
 scrollbar, and statusbar that the window has.  <br>
 For statusbars, the form is either <em>BAR=status</em>, which will cause a simple statusbar to be defined for
 the window, or <em>BAR=status=(re1,re2,...)</em> which specifies the set of <strong>righthand</strong> edge
 locations for a multi-panel statusbar. <br>
 <em>BAR=(vert,horz)</em> can be used to specify vertical and horizontal scrollbars for the window <br>
 <em>BAR=toolbar</em> will define a toolbar, 34 pixels high. <br>
 <em>BAR=flattoolbar</em> will define a FlatToolbar, high enough for a 32x32 button and text underneath.
 <strong>Note</strong> that the name assigned to the statusbar, toolbar and flattoolbar will be the name of the Window
with "SB", "TB", and "FB" appended respectively.
<p>
 <strong>BGCOLOR</strong> or <strong>BGCOLOUR</strong> ** This specifies the background color for the control. Note that
some types of controls, for example Buttons, cannot have their background changed by this method.
<p>
It can take one of three forms: A single RGB value, the name of one of the predefined colors, or
a list of three color values from 0 - 255.
<p>
Example:
BGCOLOR=1188733
BGCOLOR=Purple
BGCOLOR=(#70,#80,#FF)
<p>
 <strong>BOTTOM</strong> ** This specifies the bottom edge position of the control. You
would only specify either TOP or BOTTOM, but if you did use both, then the
 BOTTOM specification takes precedence. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>bottom=20</strong> --> The control's bottom edge is 20 pixels above it's
container's bottom edge.
<p>
 <strong>BUDDY</strong> ** This only applies to an UpDown control. It specifies the 'buddy' control that
is linked to the UpDown control being defined.
<p>
 <strong>CAPTION</strong> or <strong>TEXT</strong> ** Specifies the control's initial display value. If
the value is not enclosed in () then it is trimmed of leading and
trailing spaces. And note that if the value has any commas, it must be
 enclosed in (). <br>
 &nbsp;&nbsp;&nbsp;eg.&nbsp; <strong>"caption= Customer's Name: "</strong> --> The spaces are trimmed to
 produce a value of "Customer's Name:". <br>
 &nbsp;&nbsp;&nbsp;eg.&nbsp; <strong>"caption=( Customer's Name: )"</strong> --> The spaces are not trimmed to
 produce a value of " Customer's Name: ". <br>
 &nbsp;&nbsp;&nbsp;eg.&nbsp; <strong>"caption=(Hello, world!)"</strong> --> The text value has an embedded
 comma so is enclosed in (). <br>
 &nbsp;&nbsp;&nbsp;eg.&nbsp; <strong>"caption=Hello, world!"</strong> --> This example shows why the ()
are needed for text that as commas. Without the enclosing () this would
produce the value "Hello" and the "world!" would be interpreted as an
 unknown keyword. <br>
<p>
It is also possible to look up caption text from an external file. If the
 caption parameter has the form <strong>"caption=&lt;HW>"</strong>, the library looks
 for the "HW" key in the messages text file. Unless changed by <a href="#SETMSGFILE">setMsgFile</a>
this is "msgs.ini" in the current folder. Also, unless changed by
 <a href="MISCELLANEOU.htm#SETUSERLANGUAGE">setUserLanguage</a>, this looks in the [english] section of the messages file. <br>
Thus if the messages file looked like ...
<p>
<pre>
    [english]
    HW = Hello World
    [francais]
    HW = Bonjour Monde
</pre>
<p>
and the user's language was 'francais' then the above caption example
 would be equivalent to <strong>"caption=Bonjour Monde"</strong>
<p>
A special format is available to load a combo or list control with its
initial set of list items. To do this, the keyword and value must use the
 2-element sequence form rather than the simple string form. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>("text", ("item1","item2","item3"))</strong> --> causes the three
 items to be loaded as the initial list values. <strong>Note</strong> that this only applies
 to <em>combo</em> and <em>list</em> type of controls. <br>
<p>
 <strong>CHECK</strong> or <strong>CHECKED</strong> ** This specifies whether or not the control is initially checked. It
has the form of check=&lt;setting>, where &lt;setting> can be one of Yes, w32True, 1, or On
 to set it to checked, or anything else to uncheck it. <br>
&nbsp;&nbsp;eg.&nbsp;check=no
<p>
 <strong>COLUMNS</strong> or <strong>COLUMN</strong> ** This specifies the column headings, widths, and alignment for
ListView controls. This takes the form of a list of column definitions enclosed in braces. Each
column definition is a set of one, two, or three elements enclosed in braces. The elements
 are a column header (text), a column width (integer) and an alignment keyword - <strong>left</strong>,
 <strong>center</strong>, and <strong>right</strong>. You can also use the characters &lt;, ^, >, for left, center and right
 respectively. <br>
 Example: columns=((First Name, 80, &lt;), (Surname, 110, &lt;), (Age, 30, >), (Status, 40, ^)) <br>
Note that if you specify ListView columns, the flag LVS_REPORT is automatically added.
<p>
 <strong>DELTA</strong> ** This specifies the increments for scrollbars. It takes the form of
 delta=(small,large). <br>
 &nbsp;&nbsp;eg.&nbsp;delta=(1,15) <br>
<p>
 <strong>ENABLE</strong> or <strong>ENABLED</strong> ** This specifies whether or not the control is initially enabled. It
has the form of enable=&lt;setting>, where &lt;setting> can be one of Yes, w32True, 1, or On
 to set it to enabled, or anything else to disable it. <br>
&nbsp;&nbsp;eg.&nbsp;enable=no
<p>
 <strong>EVENTS</strong> or <strong>EVENT</strong> ** This specifies one or more events that the control expects your application
to provide handlers for. It takes the form of a list of event names or 2-element sets of the
 form (eventname, eventhandler_name). <br>
Example:
<p>
 event=((click,ShowCustomer)) <br>
event=(mouse,keypress)
<p>
 Some controls always assume certain events even if you don't specify them here. <br>
 <li> Button-type controls, Statusbar and MenuItems always assume a w32HClick event.
 <li> HScroll, VScroll, HTrackBar, VTrackBar, ProgressBar, and UpDown
controls always assume a w32HScroll event.
 <li> Window controls always assume w32HScroll, w32HPaint, w32HOpen, w32HActivate, w32HResize, and
w32HClose events.
<p>
All this means is that for these control types, you do not have to explicitly add these event
types as they will be automatically assumed.
<p>
The suggested naming convention for event handlers is &lt;eventname>_&lt;controlname>, for example
a control called "Go Button" that invokes the w32HClick event, the suggested handler name
would be "Click_GoButton"
<p>
When the application starts and if an event resolution callback routine has been supplied,
Win32lib calls the event resolution callback routine for each event specified in this parameter.
This callback routine is expected to return a routine_id that will handle any events for the
 control. <br>
<pre>
  procedure AppCallback(integer self, integer event, sequence parms)
      -- self is the control's id value
      -- event can be w32HGetHandler, in which case ...
          -- parms[1] is the routine handler name
          -- if a handler name is not supplied then this
          -- is in the form &lt;eventname>_&lt;controlname>
          -- eg. "Click_PushBtn"
          -- parms[2] is the event code to be handled
          -- eg. w32HClick
          -- parms[3] is the control's name
          -- eg. "PushBtn"
<p>
      if event = w32HGetHandler then
          returnValue(routine_id(parms[1]))
      end if
  end procedure
  startApp(routine_id("AppCallback"))
</pre>
<p>
 <strong>EXFLAGS</strong> or <strong>EXFLAG</strong> ** This is similar to the FLAGS keyword but <em>only</em>
applies to the extended flag values. Its primary usage is for when you need to
replace the default extended flags with the ones you enter with this keyword.
<p>
 &nbsp;&nbsp;eg.&nbsp;flags=(NEW, WS_EX_CLIENTEDGE) -- Replaces the default extended flags <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flags=WS_EX_CLIENTEDGE -- combined with default flags.
<p>
 <strong>FGCOLOR</strong> or <strong>FGCOLOUR</strong> ** This specifies the text (foreground) color for the control. Note that
some types of controls, for example Buttons, cannot have their text color changed by this method.
<p>
It can take one of three forms: A single RGB value, the name of one of the predefined colors, or
a list of three color values from 0 - 255.
<p>
Example:
FGCOLOR=1188733
FGCOLOR=Purple
FGCOLOR=(#70,#80,#FF)
<p>
 <strong>FLAGS</strong> or <strong>FLAG</strong> ** This specifies one or more flag values used to
create the control. If you need more than one flag value, you must enclose
all the values in matching () and separate the values with commas. Normally
the values are combined with a control's default flags but if you need to
replace the default flags, include the special value 'NEW' in the list
of flag values. Note that you can freely intermix normal flags with extended
 flags. <br>
 &nbsp;&nbsp;eg.&nbsp;flags=(NEW, WS_VISIBLE, WS_POPUP, WS_BORDER, WS_EX_CLIENTEDGE) <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flags=SS_NOTIFY <br>
If you specify WS_CHILD and do not specify a parent control, the most recent
Window is used as the parent control.
 <strong>POSITION</strong> ** This specifies the initial position of the thumb in scrollbars. <br>
&nbsp;&nbsp;eg.&nbsp;position=10
<p>
 <strong>FONT</strong> ** This specifies the font to use for the control. It takes the form
FONT=(w32FontName, size, style)
<p>
 <strong>FROM</strong> ** The specifies the reference control to use with subsequent commands for
the current control definition. This is a control that is the basis for the
relative values in any LEFT, TOP, WIDTH, and HEIGHT parameters for this control.
Normally, these values are relative to the previously defined control, but
sometimes you may need to override that.
<p>
 Example: FROM=Go Button, left=(5), top=() <br>
which means that the control being defined starts 5 pixels to the left of the Go Button
and has the same 'top' value as the go button.
<p>
 This is really a shorthand because the same effect could be achieved by doing ... <br>
 left=(5,Go Button), top=(0,Go Button,) <br>
<p>
 <strong>HEIGHT</strong> ** This specifies the height of the control. It has three basic forms, a simple
value that is the absolute height, a percentage value that is relative to the control's
 container, and a specification that is relative to another control. <br>
 Some examples... <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=400</strong> --> Exactly 400 pixels high. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=400pxl</strong> --> Just an alternative to above, exactly 400 pixels high. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=100char</strong> --> Exactly 100 characters high. The exact pixel value depends on the font
 set for the control. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=40%</strong> --> 40 percent of the container's height. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=CustName+10</strong> --> The height is calculated as 'CustName' height + 10 pixels <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=CustName*2</strong> --> The height is calculated as 'CustName' height * 2 <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=CustName</strong> --> The height is calculated as the same as 'CustName' height <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=CustName*90%</strong> --> The height is calculated as 'CustName' height * 0.9 <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=*</strong> --> The height is the same the current reference control's height. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>height=*-5</strong> --> The height is calculated as the current reference control's height less 5 pixels/n
 &nbsp;&nbsp;eg.&nbsp; <strong>height=**0.5</strong> --> The height is calculated as half the current reference control's height. <br>
 The examples above talk about a <em>current reference control</em>. This is the control used
as a reference point in WIDTH, HEIGHT, TOP and LEFT parameters when no explicit control
is named in those parameters. You can set the current reference control by using the FROM
parameter, otherwise it is the control that was most recently defined before the current one.
<p>
 <strong>Note:</strong> If you specify <strong>more</strong> than one height parameter in a control's definition,
the values accumulate. Thus if you need a control to be half the height of another control
plus 3 pixels you would specify "height=OtherControl*0.5,height=3", or if you need the
sum of two other controls, "height=CTRL1,height=CTRL2"
<p>
 <strong>IMAGE</strong> ** This specifies an image to be used with Window, Icon, and Bitmap controls. For
Bitmaps it must be the name of a ".BMP" file and for Windows and Icon controls, it can be either
an ".ICO" file or a predefined MS-Windows name "APPLICATION", "ERROR", "QUESTION", "WARNING",
"ASTERISK", or "WINLOGO". For TabItems, it can be either a filename or a string
<filename>,<icon index>.
<p>
 <strong>INDEX</strong>: this is used as the 1 based insertion point for TabItems.
<p>
 <strong>INITIALFOCUS</strong> ** This indicates that the control is the one that has the initial focus
when the form is opened.  It has the form of initialfocus=&lt;setting>, where &lt;setting> can be
 one of Yes, 1, or On to set it, or anything else to unset it. <br>
<p>
 <strong>LEFT</strong> ** This specifies the left edge position of the control. It has four forms, a simple
value that is the absolute position, a percentage value that is relative to the control's
 container's width, the word 'Center', and one that is relative to another control. <br>
 Some examples... <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=400</strong> --> Exactly 400 pixels. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=400pxl</strong> --> Just an alternative to above, exactly 400 pixels. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=100char</strong> --> Exactly 100 characters. The exact pixel value depends on the font
 set for the container control. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=40%</strong> --> 40 percent of the container's width. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=center</strong> --> The control is centered horizontally in its container. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=CustName</strong> --> The left is calculated as the same as 'CustName' right. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=CustName+10</strong> --> The left is calculated as 'CustName' right + 10 pixels. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=CustName*</strong> --> The left is calculated as 'CustName' left. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=CustName*+10</strong> --> The left is calculated as 'CustName' left + 10. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=*</strong> --> The left is calculated as the current reference control's right <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=*+5</strong> --> The left is calculated as the current reference control's right + 5 <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>left=**</strong> --> The left is the same the current reference control's left. <br>
 The examples above talk about a <em>current reference control</em>. This is the control used
as a reference point in WIDTH, HEIGHT, TOP and LEFT parameters when no explicit control
is named in those parameters. You can set the current reference control by using the FROM
parameter, otherwise it is the control that was most recently defined before the current one.
<p>
 <strong>Note:</strong> If you specify more than one left parameter in a control's definition,
 the values <strong>do not</strong> accumulate. Instead, the last <em>left=</em> parameter is used.
<p>
 <strong>MEMBER</strong> ** This specifies the ControlSet that the new control will belong to. Its value
 must be a positive integer. See <a href="CONTROL.htm#SHOWCONTROLSET">showControlSet</a> and <a href="CONTROL.htm#SETCONTROLSET">setControlSet</a> for details about
 control sets. <br>
Example: MEMBER=2
<p>
Example:
<pre>
      procedure Click_AcceptForm(integer self, integer event, sequence parms)
          -- code to handle the user pressing the Accept Form button.
          . . .
      end procedure
<p>
      procedure AppCallback(integer self, integer event, sequence parms)
          if event = w32HGetHandler then
              returnValue(routine_id(parms[1]))
          end if
      end procedure
<p>
      newUIObj(("Window,Main Window", "width=400,height=50%"))
      newUIObj("LText, at=(5,5),caption=Name:")
      newUIObj(("EditText, UserName", "left=(),top=(0),width=20char"))
      newUIObj(("Button,AcceptForm", "left=5,bottom=5,height=40",
                                     "caption=&Accept"))
      newUIObj(("List,Devices,left=100, top=5, height=4char",
                ("text", ("Tape","DVD","Disk","Printer")),
                "events=(Click,change)")
      prevValue = setCallback(routine_id("AppCallback"))
      . . .
</pre>
<p>
 <strong>NAME</strong> ** Each control created by newUIObj should have a unique name. The name can
have any character in it however all but alphabetic characters, digits and the
underscore character are stripped out of the supplied name. Also, any leading
 digits are stripped out. For example, if you had used <strong>NAME=(Customer's Name)</strong>
 then the actual stored name would be <strong>CustomersName</strong>
<p>
 If no <em>name</em> parameter is supplied, the control's caption, if supplied is used. And
 if neither <em>name</em> or <em>caption</em> is supplied, the control's name is set to <strong>NoName</strong>&lt;id>,
where &lt;id> is the control's Id number.
<p>
 You can always change a control's name with the <a href="SYSTEM_ATTRIBUTE.htm#SETIDNAME">setIdName</a>() routine, and fetch a control's
 name with <a href="SYSTEM_ATTRIBUTE.htm#GETIDNAME">getIdName</a>()
<p>
 <strong>OWNER</strong> or <strong>PARENT</strong> ** This specifies the parent control, also known as 'owner', of the control
being defined. It can be either the name of a control or the actual control id value.
 Most of the time this is not required as the default parent is sufficient. <br>
 The default parent is determined as ... <br>
If the control is a MenuItem or MenuSpacer then the most recently defined menu, otherwise if the control
is a TabItem, the most recently defined TabControl, otherwise if the control is a ReBarBand then
 the toolbar attached to the most recently defined window, otherwise if the control is <strong>not</strong>
a Window and not a Pixmap then the most recently defined Window, TabItem or Group, otherwise
the main window.
<p>
 <strong>See</strong> the keyword '*' for details about how to change the default parent id.
<p>
 <strong>POINTER</strong> ** This specifies the shape of the mouse pointer when it is over this control. It
can specify either a cursor file (.CUR or .ANI) or one of the system predefined shapes. See
 <a href="MOUSE.htm#SETMOUSEPOINTER">setMousePointer</a> for more details. <br>
Example:   POINTER=SizeWE
<p>
 <strong>POPUP</strong> ** This specifies the menu(s) that will popup when the user presses the
righthand mouse button in this control. It takes the form of
POPUP=(normal,shift,control,shift-control) where 'normal','shift', 'control', and
'shift-control' are the names of menus that will popup in combination of the Righthand mouse
button being pressed and No-Control-Shift, Shift, Control, and Shift-Control keys
 being held down respectively. <br>
If any of these names are omitted, the corresponding combination is not set. Thus to
 set popup menus for only the Normal and Control key combinations, use <br>
something like POPUP=(NormalPopup,,ControlPopup)
<p>
 <strong>PRAGMA</strong> ** This is a <em>directive</em> type command and does not actually create a control. It can
only have the value 'PARENT' for now. This will cause the named control to become the
 default parent for subsequent controls being created in the form. <br>
This is typically used after the last control in a Group control has been defined, or
 after the last menu item in a sub-menu has been defined. <br>
 Example:  "Window,name=MainWin,pragma=PARENT" says that 'MainWin' is the new default Window. <br>
 Example:  "Menu,name=FileMenu,pragma=PARENT" says that 'FileMenu' is the new default Menu. <br>
<p>
 <strong>RANGE</strong> ** This specifies the minimum and maximum values for scrollbars,
 progressbars and UpDown controls. It takes the form of range=(lower,upper). <br>
&nbsp;&nbsp;eg.&nbsp;range=(4,1200)
<p>
 <strong>RIGHT</strong> ** This specifies the right edge position of the control. You
would only specify either LEFT or RIGHT, but if you did use both, then the
 RIGHT specification takes precedence. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>right=20</strong> --> The control's right edge is 20 pixels to the left
of it's container's right edge.
<p>
 <strong>SIZE</strong> ** This is a shorthand for WIDTH=n,HEIGHT=n. It specifies both the width and height
 of the control. The format is SIZE=(width,height) where both <em>width</em> and <em>height</em> have the
 same formats as allowed for <em>WIDTH</em>= and <em>HEIGHT</em>= parameters respectively. <br>
 Additionally, if either <em>width</em> or <em>height</em> is omitted, then <em></em>() is assumed
for them, meaning that they use the same dimensions as the reference control, respectively.
 Also, if <em>width</em> or <em>height</em> are in the form ?+nnn or ?-nnn this is taken to be
 the same as WIDTH=(+/-nnn) and HEIGHT=(+/-nnn) respectively. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>size=(100,200)</strong> --> The control's is 100 pixels wide, and 200 pixels high. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>size=(,?-15)</strong> --> The control is the same <em>width</em> as the
reference control and 15 pixels shorter the reference control.
<p>
 There are some special forms of <strong>size</strong>. <br>
 <strong>size=()</strong> means that the width and height of this control is
the same as the respective values of the reference control (usually the previously defined
 control). <br>
 <strong>size=maximum</strong> means that when this window is first opened, it will be maximized. <br>
 <strong>size=minimum</strong> means that when this window is first opened, it will be minimized. <br>
 <strong>size=&lt;cntrl></strong> where &lt;cntl> is the name of a control previously defined in this form./n
 <strong>size=*</strong> which makes this new control the same size as the reference control./n
<p>
 <strong>TAG</strong> ** This is a general purpose value that can be attached to any control.
Win32lib does not use this in any way at all. It is in fact a shorthand for
adding a User Defined Property called "Tag" to the control. You would get and
 set the Tag value using the <a href="ATTRIBUTE.htm#GETUSERPROPERTY">getUserProperty</a>(cntrl, "Tag") and
 <a href="ATTRIBUTE.htm#SETUSERPROPERTY">setUserProperty</a>(cntrl, "Tag", newvalue). <br>
&nbsp;&nbsp;eg.&nbsp;tag=Special
<p>
 <strong>TOOLTIP</strong> or <strong>HINT</strong> ** This specifies the hint text for a control. If the text has an embedded
comma, it must be enclosed in braces eg. HINT=(This has a, comma in it)
<p>
 <strong>TOP</strong> ** This specifies the top edge position of the control. It has four forms, a simple
value that is the absolute position, a percentage value that is relative to the control's
 container's height, the word 'Center', and one that is relative to another control. <br>
 Some examples... <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=400</strong> --> Exactly 400 pixels. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=400pxl</strong> --> Just an alternative to above, exactly 400 pixels. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=100char</strong> --> Exactly 100 characters. The exact pixel value depends on the font
 set for the container control. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=40%</strong> --> 40 percent of the container's height. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=center</strong> --> The control is centered vertically in its container. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=CustName</strong> --> The top is calculated as the same as 'CustName' bottom. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=CustName+10</strong> --> The top is calculated as 'CustName' bottom + 10 pixels. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=CustName*</strong> --> The top is calculated as 'CustName' top. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=CustName*+10</strong> --> The top is calculated as 'CustName' top + 10. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=*</strong> --> The top is the same the current reference control's bottom. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=*+5</strong> --> The top is calculated as the current reference control's bottom + 5 <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>top=**</strong> --> The top is the same the current reference control's top. <br>
 The examples above talk about a <em>current reference control</em>. This is the control used
as a reference point in WIDTH, top, TOP and LEFT parameters when no explicit control
is named in those parameters. You can set the current reference control by using the FROM
parameter, otherwise it is the control that was most recently defined before the current one.
<p>
 <strong>Note:</strong> If you specify more than one top parameter in a control's definition,
 the values <strong>do not</strong> accumulate. Instead, the last <em>top=</em> parameter is used.
<p>
 <strong>TYPE</strong> ** This specifies the type of control you are defining. If omitted, and
there are no 'unnamed' parameters, the default type is LText. If you specify an
unknown type, an error is generated.
 If you are using the <em> <strong>events</strong></em> <em>Parameter</em>, you will also have to
 use either the <a href="EVENT.htm#SETCALLBACK">setCallback</a> or <a href="EVENT.htm#STARTAPP">startApp</a> routine in your program. <br>
 If the <em>type</em> is a Window and a window has already been defined, then this new
window will be forced into being a child window.
<p>
 <strong>USER</strong> ** This is similar to TAG but can be used to add any user defined property
 to the control. It takes the form of user=(PropertyName, PropertyValue). <br>
 &nbsp;&nbsp;eg.&nbsp;user=(DefaultColor, #308817) <br>
<p>
 <strong>VISIBLE</strong> ** This specifies whether or not the control is initially visible. It
has the form of visible=&lt;setting>, where &lt;setting> can be one of Yes, w32True, 1, or On
 to set it to visible, or anything else to hide it. <br>
&nbsp;&nbsp;eg.&nbsp;visible=off
<p>
 <strong>WIDTH</strong> ** This specifies the width of the control. It has three basic forms, a simple
value that is the absolute width, a percentage value that is relative to the control's
container, and a specification that is relative to another control.
 Some examples... <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=400</strong> --> Exactly 400 pixels wide. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=400pxl</strong> --> Just an alternative to above, exactly 400 pixels wide. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=100char</strong> --> Exactly 100 characters wide. The exact pixel value depends on the font
 set for the control. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=40%</strong> --> 40 percent of the container's width. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=CustName+10</strong> --> The width is calculated as 'CustName' width + 10 pixels <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=CustName*2</strong> --> The width is calculated as 'CustName' width * 2 <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=CustName</strong> --> The width is calculated as the same as 'CustName' width <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=CustName*90%</strong> --> The width is calculated as 'CustName' width * 0.9 <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=*-5</strong> --> The width is calculated as the current reference control's width less 5 pixels <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=**0.5</strong> --> The width is calculated as half the current reference control's width. <br>
 &nbsp;&nbsp;eg.&nbsp; <strong>width=*</strong> --> The width is the same the current reference control's width. <br>
 The examples above talk about a <em>current reference control</em>. This is the control used
as a reference point in WIDTH, HEIGHT, TOP and LEFT parameters when no explicit control
is named in those parameters. You can set the current reference control by using the FROM
parameter, otherwise it is the control that was most recently defined before the current one.
<p>
 <strong>Note:</strong> If you specify more than one WIDTH parameter in a control's definition,
the values accumulate. Thus if you need a control to be half the width of another control
plus 3 pixels you would specify "width=OtherControl*0.5,width=3", or if you need the
sum of two other controls, "width=CTRL1,width=CTRL2"
<p>
<p>See Also: 
<a href="#CREATE">create</a>,
<a href="#CREATEEX">createEx</a>,
<a href="#W32CONTROLNAME">w32ControlNames</a>,
<a href="#W32CONTROLTYPE">w32ControlTypes</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32CONTROLNAME">[<i>const</i>]<br>w32ControlNames</a> </h2>
<h3>Holds the names of recognised controls.</h3>
Category: <a href="#DEFINING_CONTROL">Defining Controls</a><br>
<p><p><p>See Also: 
<a href="#CREATE">create</a>,
<a href="#CREATEEX">createEx</a>,
<a href="#NEWUIOBJ">newUIObj</a>,
<a href="#W32CONTROLTYPE">w32ControlTypes</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32CONTROLTYPE">[<i>const</i>]<br>w32ControlTypes</a> </h2>
<h3> Holds the values of recognised controls, in the same order as <a href="DEFINING_CONTROL.htm#W32CONTROLNAME">w32ControlNames</a>.</h3>
Category: <a href="#DEFINING_CONTROL">Defining Controls</a><br>
<p><p><p>See Also: 
<a href="#CREATE">create</a>,
<a href="#CREATEEX">createEx</a>,
<a href="#NEWUIOBJ">newUIObj</a>,
<a href="#W32CONTROLNAME">w32ControlNames</a>
<hr>
