<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><b>Introduction</b></h1>
 <em>see also:</em> <a href="GENERAL_INFO.htm#GENERAL_INFO">General Info</a>
<pre>
------------------NOTICE-------------------------------*
 Software ID: win32lib
  Copyright:   (c) 2000-2009 <a href="AUTHOR.htm#DAVID_CUNY">David Cuny</a> and friends
              All rights reserved.
 Licence:
 This software is provided 'as-is', without any express or implied warranty.
 In no event will the authors be held liable for any damages arising from
 the use of this software.
<p>
 Permission is granted to anyone to use this software for any purpose,
 including commercial applications, and to alter it and redistribute it
 freely, subject to the following restrictictions:
 1. The origin of this software must not be misrepresented; you must not
    claim that you wrote the original software.
 2. If you use this software in a product, acknowedgement in the product's
    documenation and binary are required.
 3. Altered source versions, and works substantially derived from the it,
    must...
   a) be plainly be marked as such,
   b) not be misrepresented as the original software,
   c) include this notice, unaltered.
------------------End of NOTICE------------------------*
</pre>

<hr>
<a name="makedocTOC"></a>
<table width=100% border=1><caption>Table of Contents</caption>
<thead><tr><td><h2>Topic</h2></td><td><h2>Description<h2></td></tr></thead>
<tr><td><a href="index.htm#makedocINDEX">Index</a></td><td>Alphabetical list of all items.</td></tr>
<tr><td><a href="APPLICATION.htm#APPLICATION">Application</a></td><td>Routines dealing with the running application process.
</td></tr>
<tr><td><a href="ATTRIBUTE.htm#ATTRIBUTE">Attributes</a></td><td>These are routines that let you inspect and alter attributes of controls.
</td></tr>
<tr><td><a href="AUTHOR.htm#AUTHOR">Authors</a></td><td>A bit of background on the authors of this library.
</td></tr>
<tr><td><a href="CHANGE_HISTORY.htm#CHANGE_HISTORY">Change History</a></td><td>This records, in brief, the major changes done to the source code.
</td></tr>
<tr><td><a href="COLOR.htm#COLOR">Colors</a></td><td></td></tr>
<tr><td><a href="CONSTANT.htm#CONSTANT">Constants</a></td><td>These are constants that are used in a number of Win32Lib routines.
</td></tr>
<tr><td><a href="CONTROL.htm#CONTROL">Controls</a></td><td>Controls are the basic elements of Windows programs.
</td></tr>
<tr><td><a href="DATE_AND_TIME.htm#DATE_AND_TIME">Date and time</a></td><td>These routines are used to extract and display system date and time information.
</td></tr>
<tr><td><a href="DEFAULT.htm#DEFAULT">Defaults</a></td><td>Setting the default values that Win32lib applications use.
</td></tr>
<tr><td><a href="DEFINING_CONTROL.htm#DEFINING_CONTROL">Defining Controls</a></td><td>This section describes how to create windows and the various elements that can appear in them.
</td></tr>
<tr><td><a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#DEGRADED_ROUTINES_AND_CONSTANT">Degraded Routines and Constants</a></td><td>These are identifiers that will be removed in future releases.
</td></tr>
<tr><td><a href="EDIT_CONTROL.htm#EDIT_CONTROL">Edit Controls</a></td><td>These are routines that let you inspect and alter attributes of the text edit controls
</td></tr>
<tr><td><a href="ERROR.htm#ERROR">Errors</a></td><td>These routines are used to manage warnings and errors occurring as your program runs.
</td></tr>
<tr><td><a href="EVENT.htm#EVENT">Events</a></td><td>Events are routines that are triggered in response to actions taken by the user.
</td></tr>
<tr><td><a href="FILE_OPERATION.htm#FILE_OPERATION">File Operations</a></td><td> The basic File I/O routines using Windows API routines. 
</td></tr>
<tr><td><a href="FONT.htm#FONT">Fonts</a></td><td>These routines allow you to work with text.
</td></tr>
<tr><td><a href="FORM.htm#FORM">Forms</a></td><td>Forms are a combination of a Window and its controls.
</td></tr>
<tr><td><a href="FREQUENTLY_ASKED_QUESTION.htm#FREQUENTLY_ASKED_QUESTION">Frequently Asked Questions</a></td><td>Questions and Answers that are often sought by new comers to Win32lib.
</td></tr>
<tr><td><a href="GENERAL_INFO.htm#GENERAL_INFO">General Info</a></td><td>Some background and historical notes about win32lib.
</td></tr>
<tr><td><a href="GRAPHIC.htm#GRAPHIC">Graphics</a></td><td>These are routines that allow you to draw on controls.
</td></tr>
<tr><td><a href="IMAGE_LIST.htm#IMAGE_LIST">Image Lists</a></td><td> These routines deal with win32lib's <a href="#IMAGELIST">ImageList</a> controls.
</td></tr>
<tr><td><a href="LIST_CONTROL.htm#LIST_CONTROL">List Control</a></td><td>These are routines that let you inspect and alter attributes of controls with lists
</td></tr>
<tr><td><a href="LISTVIEW_CONTROL.htm#LISTVIEW_CONTROL">ListView Control</a></td><td> These routines deal with the <a href="CONTROL.htm#LISTVIEW">ListView</a> common control. <br>
</td></tr>
<tr><td><a href="LOW_LEVEL_ROUTINE.htm#LOW_LEVEL_ROUTINE">Low Level Routines</a></td><td>These routines give you access to low-level internals.
</td></tr>
<tr><td><a href="MEMORY_MANAGEMENT.htm#MEMORY_MANAGEMENT">Memory management</a></td><td>Routines to allocate, use, and release of Random Access Memory (RAM).
</td></tr>
<tr><td><a href="MENU.htm#MENU">Menus</a></td><td>Routines that deal with menu and menuitem handling.
</td></tr>
<tr><td><a href="MISCELLANEOU.htm#MISCELLANEOU">Miscellaneous</a></td><td>Routines that don't easily fit into other categories.
</td></tr>
<tr><td><a href="MONTHCALENDAR_CONTROL.htm#MONTHCALENDAR_CONTROL">MonthCalendar Control</a></td><td> These routines work with <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> Controls:
</td></tr>
<tr><td><a href="MOUSE.htm#MOUSE">Mouse</a></td><td>These are routines that deal with the mouse and mouse pointer.
</td></tr>
<tr><td><a href="MOUSETRAP.htm#MOUSETRAP">MouseTraps</a></td><td> Defined sub-regions of a window that can generate <a href="EVENT.htm#W32HMOUSETRAP">w32HMouseTrap</a> events.
</td></tr>
<tr><td><a href="OLE_ACTIVEX.htm#OLE_ACTIVEX">OLE ActiveX</a></td><td>Object Linking and Embedding
</td></tr>
<tr><td><a href="PRINTING.htm#PRINTING">Printing</a></td><td> These are routines that allow you to interact with the <a href="CONTROL.htm#PRINTER">Printer</a>.
</td></tr>
<tr><td><a href="RESOURCE.htm#RESOURCE">Resources</a></td><td>This set of routines helps you to manage Windows resources.
</td></tr>
<tr><td><a href="RICHEDIT_CONTROL.htm#RICHEDIT_CONTROL">RichEdit controls</a></td><td> In addition to the specialized <a href="CONTROL.htm#RICHEDIT">RichEdit</a> control routines.
</td></tr>
<tr><td><a href="SCROLL_CONTROL.htm#SCROLL_CONTROL">Scroll Control</a></td><td>These routines let you inspect and alter attributes of the scroll bar controls.
</td></tr>
<tr><td><a href="SERIE.htm#SERIE">Series</a></td><td>Some utility routines to manange series of numbers.
</td></tr>
<tr><td><a href="SUPPORT_ROUTINE.htm#SUPPORT_ROUTINE">Support Routines</a></td><td>Miscellaneous 'generic' routines used by win32lib
</td></tr>
<tr><td><a href="SYSTEM_ATTRIBUTE.htm#SYSTEM_ATTRIBUTE">System Attributes</a></td><td>These are routines that let you inspect and alter attributes of various system-wide elements.
</td></tr>
<tr><td><a href="TEXT.htm#TEXT">Text</a></td><td>Routines that deal with text output.
</td></tr>
<tr><td><a href="TREEVIEW_CONTROL.htm#TREEVIEW_CONTROL">TreeView Control</a></td><td> These routines deal with the <a href="CONTROL.htm#TREEVIEW">TreeView</a> common control.
</td></tr>
<tr><td><a href="TYPE.htm#TYPE">Types</a></td><td>These are data types defined by Win32Lib.
</td></tr>
<tr><td><a href="UPDOWN_CONTROL.htm#UPDOWN_CONTROL">Updown Control</a></td><td>These routines let you manage the attributes of the UpDown control.
</td></tr>
<tr><td><a href="UTILITIE.htm#UTILITIE">Utilities</a></td><td>These are useful routines that don't seem to fit in any other category.
</td></tr>
<tr><td><a href="VALUE.htm#VALUE">Values</a></td><td>These are routines that let you inspect and alter the current value of a control.
</td></tr>
<tr><td><a href="XPM.htm#XPM">XPM</a></td><td>These routines deal with a portable graphics file format called XPM
</td></tr>
</table>
<a name="makedocINDEX"><h1><b>Index</b></h1></a>
<a href="PRINTING.htm#ABORTDOC">abortDoc</a>  [<i><code>proc</code></i>] Abandons the print job, flushing anything created so far for it.<br>
<a href="ERROR.htm#ABORTERR">abortErr</a>  [<i><code>proc</code></i>] Display an error message, run any user-defined cleanup routines, and then abort.<br>
<a href="IMAGE_LIST.htm#ADDDIB">addDIB</a>  [<i><code>func</code></i>] Adds DIB's to win32lib's imagelists<br>
<a href="IMAGE_LIST.htm#ADDEUBMP">addEuBmp</a>  [<i><code>func</code></i>] Adds EuBitmaps to win32lib's imagelists<br>
<a href="IMAGE_LIST.htm#ADDICON">addIcon</a>  [<i><code>func</code></i>] Adds icons to win32lib's imagelists<br>
<a href="LIST_CONTROL.htm#ADDITEM">addItem</a>  [<i><code>proc</code></i>]  Add <em>text</em> to the end of <em>control</em>'s list.<br>
<a href="LISTVIEW_CONTROL.htm#ADDLVITEM">addLVItem</a>  [<i><code>func</code></i>]  Add an item to a <a href="CONTROL.htm#LISTVIEW">ListView</a><br>
<a href="UTILITIE.htm#ADDSTYLE">addStyle</a>  [<i><code>proc</code></i>] Add a style to a control.<br>
<a href="ATTRIBUTE.htm#ADDTOBAND">addToBand</a>  [<i><code>proc</code></i>]  Add a control <em>id</em> to a <a href="#REBARBAND">RebarBand</a> <em>band</em><br>
<a href="SUPPORT_ROUTINE.htm#ADDTOCTYPE">addToCType</a>  [<i><code>proc</code></i>] Adds characters to one or more sets.<br>
<a href="TREEVIEW_CONTROL.htm#ADDTVITEM">addTVItem</a>  [<i><code>func</code></i>]  Add an item to a <a href="CONTROL.htm#TREEVIEW">TreeView</a><br>
<a href="IMAGE_LIST.htm#ADDXPM">addXpm</a>  [<i><code>func</code></i>] Adds xpm's to win32lib's imagelists<br>
<a href="GRAPHIC.htm#ADJUSTBRIGHTNES">adjustBrightness</a>  [<i><code>func</code></i>] Applies a luminosity factor to a color supplied as a 24-bit integer.<br>
<a href="SYSTEM_ATTRIBUTE.htm#ADJUSTCREATEFONT">adjustCreateFont</a>  [<i><code>func</code></i>] changes some of the attributes of the font used for controls when they are created.<br>
<a href="CONSTANT.htm#ADVAPI32">advapi32</a>  [<i><code>const</code></i>] Windows Library: Advanced API<br>
<a href="ATTRIBUTE.htm#ALIGNCONTROL">alignControls</a>  [<i><code>proc</code></i>] Set the edge position for a set of controls.<br>
<a href="SUPPORT_ROUTINE.htm#ANSILOWER">ansiLower</a>  [<i><code>func</code></i>] Converts a 8-bit encoded string to lower case, using the current codepage.<br>
<a href="SUPPORT_ROUTINE.htm#ANSIUPPER">ansiUpper</a>  [<i><code>func</code></i>] Converts a 8-bit encoded string to upper case, using the current codepage.<br>
<a href="EVENT.htm#APPCALLBACK">AppCallback</a>  [<i><code>proc</code></i>] An application specific callback routine used by win32lib.<br>
<a href="VALUE.htm#APPENDTEXT">appendText</a>  [<i><code>proc</code></i>] Adds text to the end of a edit control.<br>
<a href="APPLICATION.htm#APPLICATION">Application</a> <br>
<a href="FONT.htm#ASSIGNFONT">assignFont</a>  [<i><code>func</code></i>]  Gets the device context for <em>id</em> with the current font installed.<br>
<a href="ERROR.htm#ATTACHCLEANUP">attachCleanUp</a>  [<i><code>proc</code></i>] Establishes a user defined clean up routine which is invoked just prior to win32lib ending or aborting.<br>
<a href="MENU.htm#ATTACHMENUHANDLE">attachMenuHandle</a>  [<i><code>func</code></i>]  Changes (or sets) the parent of the control <em>id</em> to <em>newparent</em>, using the <em>index</em> attachment data if it is relevant.<br>
<a href="MENU.htm#ATTACHPOPUP">attachPopup</a>  [<i><code>func</code></i>] Associates one or more menus to a control as popup or context menus.<br>
<a href="ATTRIBUTE.htm#ATTRIBUTE">Attributes</a> <br>
<a href="AUTHOR.htm#AUTHOR">Authors</a> <br>
<a href="EDIT_CONTROL.htm#AUTOSELECT">autoSelect</a>  [<i><code>func</code></i>] Turns on and off an edit control's auto-selection property.<br>
<a href="MISCELLANEOU.htm#BEEP">Beep</a>  [<i><code>proc</code></i>] Sounds one of the standard beeps.<br>
<a href="GRAPHIC.htm#BITBLT">bitBlt</a>  [<i><code>proc</code></i>] Copy image (or partial image) from source to destination.<br>
<a href="CONTROL.htm#BITMAP">Bitmap</a>  [<i><code>const</code></i>] Static bitmap control.<br>
<a href="FILE_OPERATION.htm#BUILDDEFAULTOFN">buildDefaultOfn</a>  [<i><code>func</code></i>] Creates a OpenFile structure used by the standard dialog.<br>
<a href="CONTROL.htm#CANCELBUTTON">CancelButton</a>  [<i><code>const</code></i>] Command button that reacts to the Escape key.<br>
<a href="ATTRIBUTE.htm#CANFOCU">canFocus</a>  [<i><code>func</code></i>] Turns on and off a control's CanFocus property.<br>
<a href="MOUSE.htm#CAPTUREMOUSE">captureMouse</a>  [<i><code>proc</code></i>]  Send all mouse events to <em>window</em>.<br>
<a href="CONSTANT.htm#CCEXFLAG">CCexflags</a>  [<i><code>const</code></i>]  Used by function <a href="SYSTEM_ATTRIBUTE.htm#CLASSDEFAULT">classDefaults</a>() to indicate Extended Style Flags<br>
<a href="CONSTANT.htm#CCFLAG">CCflags</a>  [<i><code>const</code></i>]  Used by function <a href="SYSTEM_ATTRIBUTE.htm#CLASSDEFAULT">classDefaults</a>() to indicate Style Flags<br>
<a href="CONSTANT.htm#CCWINSTYLE">CCwinstyle</a>  [<i><code>const</code></i>]  Used by function <a href="SYSTEM_ATTRIBUTE.htm#CLASSDEFAULT">classDefaults</a>() to set the style flags when<br>
<a href="ATTRIBUTE.htm#CENTERCONTROL">centerControl</a>  [<i><code>proc</code></i>]  Centers <em>Id</em> with respect to <em>RefId</em><br>
<a href="CHANGE_HISTORY.htm#CHANGE_HISTORY">Change History</a> <br>
<a href="MOUSE.htm#CHANGEMOUSEPOINTER">changeMousePointer</a>  [<i><code>proc</code></i>]  Set the pointer the mouse displays when in <em>id</em>, without saving the previous shape.<br>
<a href="EDIT_CONTROL.htm#CHARTOINDEX">charToIndex</a>  [<i><code>func</code></i>] Retrieves the index of a character at a given line and column.<br>
<a href="CONTROL.htm#CHECKBOX">CheckBox</a>  [<i><code>const</code></i>] CheckBox control.<br>
<a href="PRINTING.htm#CHECKPRINTER">checkPrinter</a>  [<i><code>proc</code></i>] Checks if a printer was chosen. Prompts the user if none found, or possibly release it.<br>
<a href="SYSTEM_ATTRIBUTE.htm#CLASSAUTOSELECT">classAutoSelect</a>  [<i><code>proc</code></i>] Turns on and off edit controls' default auto-selection property.<br>
<a href="SYSTEM_ATTRIBUTE.htm#CLASSDEFAULT">classDefaults</a>  [<i><code>func</code></i>] Used to change the default values for style and extended style flags.<br>
<a href="EDIT_CONTROL.htm#CLEAR">clear</a>  [<i><code>proc</code></i>]  Clear selected text from <em>object</em>.<br>
<a href="ATTRIBUTE.htm#CLEARWINDOW">clearWindow</a>  [<i><code>proc</code></i>]  Sets <em>id</em> to its background color<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#CLICKPOINTERLEFT">ClickPointerLeft</a>  [<i><code>proc</code></i>]  See <a href="MOUSE.htm#CLICKPOINTERLEFT">clickPointerLeft</a><br>
<a href="MOUSE.htm#CLICKPOINTERLEFT">clickPointerLeft</a>  [<i><code>proc</code></i>] Simulates the clicking of the left mouse button.<br>
<a href="SYSTEM_ATTRIBUTE.htm#CLIENTTOCLIENT">clientToClient</a>  [<i><code>func</code></i>]  Converts a point in <em>id1</em> to a relative point in <em>id2</em><br>
<a href="SYSTEM_ATTRIBUTE.htm#CLIENTTOSCREEN">ClientToScreen</a>  [<i><code>func</code></i>] Converts a point in a control to screen-based coordinates.<br>
<a href="EVENT.htm#CLOSEAPP">closeApp</a>  [<i><code>proc</code></i>] Closes the application down.<br>
<a href="CONTROL.htm#CLOSEWINDOW">closeWindow</a>  [<i><code>proc</code></i>]  Close <em>window</em>.<br>
<a href="TREEVIEW_CONTROL.htm#COLLAPSEITEM">collapseItem</a>  [<i><code>proc</code></i>]  Hides the children of a single <a href="CONTROL.htm#TREEVIEW">TreeView</a> Item<br>
<a href="GRAPHIC.htm#COLORVALUE">colorValue</a>  [<i><code>func</code></i>] Converts the parameter into the equivalent 24-bit color value.<br>
<a href="CONTROL.htm#COMBO">Combo</a>  [<i><code>const</code></i>] Combo box control.<br>
<a href="CONTROL.htm#COMBOBOXEX">ComboBoxEx</a>  [<i><code>const</code></i>] Combobox with images<br>
<a href="CONSTANT.htm#COMCTL32">comctl32</a>  [<i><code>const</code></i>] Windows Library: Common Controls<br>
<a href="CONSTANT.htm#COMDLG32">comdlg32</a>  [<i><code>const</code></i>] Windows Library: Common Dialogs<br>
<a href="CONSTANT.htm#CONSTANT">Constants</a> <br>
<a href="CONTROL.htm#CONTROL">Controls</a> <br>
<a href="ATTRIBUTE.htm#CONTROLSTYLE">controlStyle</a>  [<i><code>func</code></i>] <br>
<a href="SYSTEM_ATTRIBUTE.htm#CONVPCTTOPIXEL">convPctToPixel</a>  [<i><code>func</code></i>] Converts relative coordinates to pixel coordinates.<br>
<a href="FONT.htm#CONVPOINTSTOLOGICAL">convPointsToLogical</a>  [<i><code>func</code></i>] Calculates the 'logical' height of a font given its 'points' size.<br>
<a href="EDIT_CONTROL.htm#COPY">copy</a>  [<i><code>proc</code></i>]  Copy any selected text from <em>object</em> and place in the clipboard.<br>
<a href="GRAPHIC.htm#COPYBLT">copyBlt</a>  [<i><code>proc</code></i>] Copy full image from source to destination.<br>
<a href="FILE_OPERATION.htm#COPYFILE">copyFile</a>  [<i><code>func</code></i>] Copies a file.<br>
<a href="GRAPHIC.htm#COPYTOBITMAPFILE">copyToBitmapFile</a>  [<i><code>func</code></i>]  Copies image from <em>window</em> to file <em>fileName</em>.<br>
<a href="GRAPHIC.htm#COPYTOTRUECOLORBITMAPFILE">copyToTrueColorBitmapFile</a>  [<i><code>func</code></i>]  Copies image from <em>window</em> to file <em>fileName</em>.<br>
<a href="DEFINING_CONTROL.htm#CREATE">create</a>  [<i><code>func</code></i>]  Create an object of type <em>pControl</em>.<br>
<a href="GRAPHIC.htm#CREATEDIB">createDIB</a>  [<i><code>func</code></i>] Converts a Euphoria bitmap format into a Win32 bitmap.<br>
<a href="FILE_OPERATION.htm#CREATEDIRECTORY">createDirectory</a>  [<i><code>func</code></i>] Creates a new directory<br>
<a href="DEFINING_CONTROL.htm#CREATEEX">createEx</a>  [<i><code>func</code></i>]  Create an object of type <em>controlType</em>.<br>
<a href="FORM.htm#CREATEFORM">createForm</a>  [<i><code>proc</code></i>] This creates a Window and its controls.<br>
<a href="MOUSE.htm#CREATEMOUSEPOINTER">createMousePointer</a>  [<i><code>func</code></i>] Create a new mouse pointer.<br>
<a href="MOUSETRAP.htm#CREATEMOUSETRAP">createMouseTrap</a>  [<i><code>func</code></i>] Defines a mousetrap area<br>
<a href="CONTROL.htm#CREATEWINDOW">createWindow</a>  [<i><code>proc</code></i>] Creates or reuses a window class for the supplied control id.<br>
<a href="XPM.htm#CREATEXPM">createXpm</a>  [<i><code>func</code></i>] Creates an XPM file from a Euphoria bitmap.<br>
<a href="XPM.htm#CREATEXPMFROMBMPFILE">createXpmFromBmpFile</a>  [<i><code>func</code></i>] Creates an XPM file from a bitmap file.<br>
<a href="CONTROL.htm#CTEXT">CText</a>  [<i><code>const</code></i>] Center-justified label control.<br>
<a href="SERIE.htm#CURRENT_NUMBER">current_number</a>  [<i><code>func</code></i>]  Returns the current value in the series but does <strong>not</strong> increment it.<br>
<a href="EDIT_CONTROL.htm#CUT">cut</a>  [<i><code>proc</code></i>]  Cut any selected text from <em>object</em> and place in the clipboard.<br>
<a href="DATE_AND_TIME.htm#DATE_AND_TIME">Date and time</a> <br>
<a href="CONSTANT.htm#DEFAULT">Default</a>  [<i><code>const</code></i>]  Indicates the use of the Windows default position values when creating <a href="CONTROL.htm#CONTROL">Controls</a>.<br>
<a href="DEFAULT.htm#DEFAULT">Defaults</a> <br>
<a href="MENU.htm#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>  [<i><code>proc</code></i>] Defines a set of menu items that form a radio-group<br>
<a href="ATTRIBUTE.htm#DEFINEUSERPROPERTY">defineUserProperty</a>  [<i><code>proc</code></i>]  Defines a user defined property for this control <em>id</em>.<br>
<a href="SERIE.htm#DEFINE_SERIE">define_series</a>  [<i><code>proc</code></i>] Defines a new series.<br>
<a href="DEFINING_CONTROL.htm#DEFINING_CONTROL">Defining Controls</a> <br>
<a href="CONTROL.htm#DEFPUSHBUTTON">DefPushButton</a>  [<i><code>const</code></i>] Default command button control.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#DEGRADED_ROUTINES_AND_CONSTANT">Degraded Routines and Constants</a> <br>
<a href="FILE_OPERATION.htm#DELETEFILE">deleteFile</a>  [<i><code>func</code></i>] Deletes an operating system file.<br>
<a href="LIST_CONTROL.htm#DELETEITEM">deleteItem</a>  [<i><code>func</code></i>]  Delete item from <em>list</em>'s list at position <em></em>.<br>
<a href="EDIT_CONTROL.htm#DELETELINE">deleteLine</a>  [<i><code>proc</code></i>] Removes the line with supplied number.<br>
<a href="LISTVIEW_CONTROL.htm#DELETELVCOLUMN">deleteLVColumn</a>  [<i><code>proc</code></i>] Removes a column from a listview control.<br>
<a href="MOUSETRAP.htm#DELETEMOUSETRAP">deleteMouseTrap</a>  [<i><code>proc</code></i>] This removes the specified mousetrap area from the window.<br>
<a href="RESOURCE.htm#DELETEOBJECT">deleteObject</a>  [<i><code>proc</code></i>] Deletes a Windows GDI resource.<br>
<a href="TREEVIEW_CONTROL.htm#DELETETVCHILDREN">deleteTVChildren</a>  [<i><code>func</code></i>]  Deletes all children at "position" in the <em>tree</em> view.<br>
<a href="ATTRIBUTE.htm#DELETEUSERPROPERTY">deleteUserProperty</a>  [<i><code>proc</code></i>]  Deletes a user defined property for this control <em>id</em>.<br>
<a href="ATTRIBUTE.htm#DESTROY">destroy</a>  [<i><code>proc</code></i>]  Destroy an object created with the <a href="DEFINING_CONTROL.htm#CREATE">create</a> function.<br>
<a href="ERROR.htm#DETACHCLEANUP">detachCleanUp</a>  [<i><code>proc</code></i>] Removes a user defined clean up routine from the list of attached ones.<br>
<a href="CONTROL.htm#DISABLECONTROLSET">disableControlSet</a>  [<i><code>proc</code></i>] Disables all the controls in the identified set(s).<br>
<a href="ATTRIBUTE.htm#DISTRIBUTECONTROL">distributeControls</a>  [<i><code>proc</code></i>] Evenly distributes a set of controls.<br>
<a href="EVENT.htm#DOEVENT">doEvents</a>  [<i><code>proc</code></i>] Gives control back to windows until there are no pending events to process.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#DRAGPOINTERTO">DragPointerTo</a>  [<i><code>proc</code></i>]  See <a href="MOUSE.htm#DRAGPOINTERTO">dragPointerTo</a><br>
<a href="MOUSE.htm#DRAGPOINTERTO">dragPointerTo</a>  [<i><code>proc</code></i>] Simulates the draging of the left mouse button to a specified position.<br>
<a href="GRAPHIC.htm#DRAWARC">drawArc</a>  [<i><code>proc</code></i>] Draw an arc.<br>
<a href="GRAPHIC.htm#DRAWBITMAP">drawBitmap</a>  [<i><code>proc</code></i>]  Draws <em>DIB</em> (device independant bitmap) in <em>window</em> at { <em>x</em>, <em>y</em> }.<br>
<a href="GRAPHIC.htm#DRAWCHORD">drawChord</a>  [<i><code>proc</code></i>] Draw a chord.<br>
<a href="GRAPHIC.htm#DRAWELLIPSE">drawEllipse</a>  [<i><code>proc</code></i>] Draw an ellipse.<br>
<a href="GRAPHIC.htm#DRAWLINE">drawLine</a>  [<i><code>proc</code></i>] Draw a line.<br>
<a href="GRAPHIC.htm#DRAWLINE">drawLines</a>  [<i><code>proc</code></i>] Draws zero or more lines.<br>
<a href="GRAPHIC.htm#DRAWPIE">drawPie</a>  [<i><code>proc</code></i>] Draw a pie slice.<br>
<a href="GRAPHIC.htm#DRAWPOLYGON">drawPolygon</a>  [<i><code>proc</code></i>] Draw a polygon.<br>
<a href="GRAPHIC.htm#DRAWRECTANGLE">drawRectangle</a>  [<i><code>proc</code></i>] Draw a rectangle.<br>
<a href="GRAPHIC.htm#DRAWROUNDRECT">drawRoundRect</a>  [<i><code>proc</code></i>] Draw a rounded rectangle.<br>
<a href="TEXT.htm#DRAWTEXT">drawText</a>  [<i><code>func</code></i>]  Places the text <em>text</em> into the rectangle <em>rect</em>, wrapping words if necessary.<br>
<a href="CONTROL.htm#DROPDOWNLIST">DropDownList</a>  [<i><code>const</code></i>] Drop down list control.<br>
<a href="EDIT_CONTROL.htm#EDIT_CONTROL">Edit Controls</a> <br>
<a href="CONTROL.htm#EDITTEXT">EditText</a>  [<i><code>const</code></i>] Text edit control control.<br>
<a href="CONTROL.htm#ENABLECONTROLSET">enableControlSet</a>  [<i><code>proc</code></i>] Enables all the controls in the identified set, and disables the previously enabled set.<br>
<a href="EVENT.htm#ENABLEHANDLER">enableHandler</a>  [<i><code>func</code></i>] Retrieves and possibly sets the state of a user written event handler.<br>
<a href="MOUSETRAP.htm#ENABLEMOUSETRAP">enableMouseTrap</a>  [<i><code>proc</code></i>] This alters the 'enabled' state of the specified mousetrap area in the window.<br>
<a href="PRINTING.htm#ENDDOC">endDoc</a>  [<i><code>func</code></i>] Ends the print job.<br>
<a href="PRINTING.htm#ENDPAGE">endPage</a>  [<i><code>func</code></i>] Ends the printing of the current page.<br>
<a href="LIST_CONTROL.htm#ERASEITEM">eraseItems</a>  [<i><code>proc</code></i>]  Remove all items from <em>list</em>.<br>
<a href="ERROR.htm#ERROR">Errors</a> <br>
<a href="EVENT.htm#EVENT">Events</a> <br>
<a href="TREEVIEW_CONTROL.htm#EXPANDITEM">expandItem</a>  [<i><code>proc</code></i>]  Show the children of a single <a href="CONTROL.htm#TREEVIEW">TreeView</a> Item<br>
<a href="TREEVIEW_CONTROL.htm#EXPANDTV">expandTV</a>  [<i><code>func</code></i>] Expands or Collapses all child tree items.<br>
<a href="GRAPHIC.htm#EXTRACTICON">extractIcon</a>  [<i><code>func</code></i>] Gets the an icon from the file (DLL, EXE or ICO) specified.<br>
<a href="FONT.htm#EZCREATEFONT">EzCreateFont</a>  [<i><code>func</code></i>] Creates a Font resource<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#FETCH_CHARFORMAT">fetch_CHARFORMAT</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32FROM_MEMORY">w32from_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#FETCH_SYSTEMTIME">fetch_SYSTEMTIME</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32FROM_MEMORY">w32from_memory</a>()<br>
<a href="FILE_OPERATION.htm#FILE_OPERATION">File Operations</a> <br>
<a href="GRAPHIC.htm#FILLRECTANGLE">fillRectangle</a>  [<i><code>func</code></i>]  Fills a rectangle in the window <em>id</em> with an arbitrary brush.<br>
<a href="MOUSETRAP.htm#FILTERMOUSETRAP">filterMouseTrap</a>  [<i><code>proc</code></i>] This alters the 'filters' of the specified mousetrap area in the window.<br>
<a href="ATTRIBUTE.htm#FINDCHILDREN">findChildren</a>  [<i><code>func</code></i>]  Used to find all the children controls contained in the specified <em>id</em>.<br>
<a href="LIST_CONTROL.htm#FINDITEM">findItem</a>  [<i><code>func</code></i>]  Locates <em>text</em> in the <em>list</em>, starting from index <em>startpos</em><br>
<a href="ATTRIBUTE.htm#FINDPARENT">findParent</a>  [<i><code>func</code></i>]  Used to find the owning control for the specified <em>id</em>.<br>
<a href="ATTRIBUTE.htm#FINDPARENTWINDOW">findParentWindow</a>  [<i><code>func</code></i>]  Used to get the Window id of the control specified by <em>id</em><br>
<a href="RICHEDIT_CONTROL.htm#FINDTEXT">findText</a>  [<i><code>func</code></i>]  Find text in a <a href="CONTROL.htm#RICHEDIT">RichEdit</a> Control.<br>
<a href="RESOURCE.htm#FINDTRACKEDOBJECT">findTrackedObject</a>  [<i><code>func</code></i>] Looks amongst the tracked objects for one that matches the criteria.<br>
<a href="SYSTEM_ATTRIBUTE.htm#FINDWINDOW">findWindow</a>  [<i><code>func</code></i>] Looks to see if the named window exists in the system. Only top level or pop-up windows are inspected.<br>
<a href="CONTROL.htm#FLATTOOLBAR">FlatToolbar</a>  [<i><code>const</code></i>] Creates a toolbar without a 3D border.<br>
<a href="GRAPHIC.htm#FLOODFILL">floodFill</a>  [<i><code>func</code></i>] Performs a 'flood fill' operation.<br>
<a href="FONT.htm#FONT">Fonts</a> <br>
<a href="MONTHCALENDAR_CONTROL.htm#FORMATDATE">formatDate</a>  [<i><code>func</code></i>]  Format a system date as returned by <a href="MONTHCALENDAR_CONTROL.htm#GETSELECTEDDATE">getSelectedDate</a>, <a href="MONTHCALENDAR_CONTROL.htm#GETSELECTEDDATERANGE">getSelectedDateRange</a><br>
<a href="MISCELLANEOU.htm#FORMATMSG">FormatMsg</a>  [<i><code>func</code></i>]  Fetches the format template associated with <em>pTextCode</em> and applies <em>pData</em> to it.<br>
<a href="FORM.htm#FORM">Forms</a> <br>
<a href="RESOURCE.htm#FORPAINT">ForPaint</a>  [<i><code>const</code></i>] Indicates that the resource lives until the end of the onPaint operation.<br>
<a href="RESOURCE.htm#FORPROGRAM">ForProgram</a>  [<i><code>const</code></i>] Indicates that the resource lives until the end of the program.<br>
<a href="FREQUENTLY_ASKED_QUESTION.htm#FREQUENTLY_ASKED_QUESTION">Frequently Asked Questions</a> <br>
<a href="CONSTANT.htm#GDI32">gdi32</a>  [<i><code>const</code></i>] Windows Library: Graphic Device Interface (drawing, text, etc)<br>
<a href="GENERAL_INFO.htm#GENERAL_INFO">General Info</a> <br>
<a href="MENU.htm#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>  [<i><code>desc</code></i>] <br>
<a href="SYSTEM_ATTRIBUTE.htm#GETACTIVEWINDOW">getActiveWindow</a>  [<i><code>func</code></i>]  Returns the <strong>id</strong> of the control that the user is working on.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETAPPNAME">getAppName</a>  [<i><code>func</code></i>] Gets the application's name.<br>
<a href="APPLICATION.htm#GETAPPSTATE">getAppState</a>  [<i><code>func</code></i>] Returns the current state of the application.<br>
<a href="VALUE.htm#GETCAPTION">getCaption</a>  [<i><code>func</code></i>]  This returns any caption text associated with <em>id</em><br>
<a href="EDIT_CONTROL.htm#GETCHARACTERAT">getCharacterAt</a>  [<i><code>func</code></i>] Determines the line and column a screen position maps to.<br>
<a href="EDIT_CONTROL.htm#GETCHARACTERCOUNT">getCharacterCount</a>  [<i><code>func</code></i>] Returns the number of characters in the control.<br>
<a href="EDIT_CONTROL.htm#GETCHARACTERPOSITION">getCharacterPosition</a>  [<i><code>func</code></i>] Determines the screen position of the designated character relative to the upper left corner of the client area of the control.<br>
<a href="FONT.htm#GETCHAREXTENT">getCharExtent</a>  [<i><code>proc</code></i>]  Gets the average character width and height for the <em>Id</em>'s current font.<br>
<a href="ATTRIBUTE.htm#GETCHILDREN">getChildren</a>  [<i><code>func</code></i>]  Used to get all the child controls contained in the specified <em>id</em>.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETCLASSNAME">getClassName</a>  [<i><code>func</code></i>] Gets the Windows Class name for the control.<br>
<a href="ATTRIBUTE.htm#GETCLIENTPOINT">getClientPoint</a>  [<i><code>func</code></i>]  Get screen position of point { <em>x</em>, <em>y</em> } in <em>window</em>.<br>
<a href="ATTRIBUTE.htm#GETCLIENTRECT">getClientRect</a>  [<i><code>func</code></i>] Get uncovered portion of the client area.<br>
<a href="ATTRIBUTE.htm#GETCLIENTSIZE">getClientSize</a>  [<i><code>func</code></i>]  Get the dimensions of <em>id's</em> client area.<br>
<a href="UTILITIE.htm#GETCLIPBOARD">getClipboard</a>  [<i><code>func</code></i>] Retrieves data in the clipboard with this format<br>
<a href="COLOR.htm#GETCOLORDIALOG">getColorDialog</a>  [<i><code>func</code></i>] "Get Color" Dialog<br>
<a href="LISTVIEW_CONTROL.htm#GETCOLUMNHEADING">getColumnHeadings</a>  [<i><code>proc</code></i>] Gets a list of headings for each column in a list view.<br>
<a href="ATTRIBUTE.htm#GETCONTROLINFO">getControlInfo</a>  [<i><code>func</code></i>] Get various internal information about a control.<br>
<a href="MENU.htm#GETCOUNT">getCount</a>  [<i><code>func</code></i>] <br>
<a href="LIST_CONTROL.htm#GETCOUNT">getCount</a>  [<i><code>func</code></i>]  Get the count of items in <em>list</em> ( <a href="CONTROL.htm#LIST">List</a> or <a href="CONTROL.htm#COMBO">Combo</a> )<br>
<a href="ATTRIBUTE.htm#GETCTLSIZE">getCtlSize</a>  [<i><code>func</code></i>]  Get the width and height of <em>object</em>.<br>
<a href="FILE_OPERATION.htm#GETCURRENTDIRECTORY">getCurrentDirectory</a>  [<i><code>func</code></i>] Gets the current directory<br>
<a href="VALUE.htm#GETDATA">getData</a>  [<i><code>func</code></i>]  This returns any data value associated with <em>id</em><br>
<a href="LOW_LEVEL_ROUTINE.htm#GETDC">getDC</a>  [<i><code>func</code></i>] Get the DC (device context) of the control.<br>
<a href="PRINTING.htm#GETDEFAULTPRINTER">getDefaultPrinter</a>  [<i><code>proc</code></i>] Sets up the last printer used (or default printer) for printing<br>
<a href="PRINTING.htm#GETDEFAULTPRINTERNAME">getDefaultPrinterName</a>  [<i><code>func</code></i>] Determines the name of the current default printer.<br>
<a href="CONTROL.htm#GETEDIT">getEdit</a>  [<i><code>func</code></i>]  Get the control id of the <em>ComboId</em> control's edit box.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#GETEXTENT">getExtent</a>  [<i><code>func</code></i>]  See <a href="ATTRIBUTE.htm#GETCTLSIZE">getCtlSize</a><br>
<a href="FILE_OPERATION.htm#GETFILEINFO">getFileInfo</a>  [<i><code>func</code></i>] Retrieves various properties of a file.<br>
<a href="TEXT.htm#GETFINDTEXT">getFindText</a>  [<i><code>proc</code></i>] Opens the "Find" Dialog<br>
<a href="ATTRIBUTE.htm#GETFOCU">getFocus</a>  [<i><code>func</code></i>] Gets the id of the control that has focus.<br>
<a href="FONT.htm#GETFONTDIALOG">getFontDialog</a>  [<i><code>func</code></i>] "Get Font" Dialog<br>
<a href="FONT.htm#GETFONTDIALOGEX">getFontDialogEx</a>  [<i><code>func</code></i>]  "Get Font" Dialog. <em>flags</em> controls which fonts are selectable, as well as other features of the dialog.<br>
<a href="FONT.htm#GETFONTMETRIC">getFontMetric</a>  [<i><code>func</code></i>]  Gets font metric field value for <em>id</em>'s current font.<br>
<a href="FONT.htm#GETFONTPOINTSIZE">getFontPointSize</a>  [<i><code>func</code></i>] Returns the logical size, in points, of the font currently used by the target window.<br>
<a href="FONT.htm#GETFONTSIZE">getFontSize</a>  [<i><code>func</code></i>]  Gets font metrics for <em>id</em>'s current font.<br>
<a href="FORM.htm#GETFORMID">getFormIds</a>  [<i><code>func</code></i>] Returns the most recently created form(s)<br>
<a href="TEXT.htm#GETFRTEXT">getFRText</a>  [<i><code>proc</code></i>] Opens the "Find" Dialog<br>
<a href="FILE_OPERATION.htm#GETFULLPATHNAME">getFullPathName</a>  [<i><code>func</code></i>]  Returns the path and long file name that <em>File</em> refers to.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETHANDLE">getHandle</a>  [<i><code>func</code></i>] Returns the Windows Handle of the specified control<br>
<a href="EVENT.htm#GETHANDLER">getHandler</a>  [<i><code>func</code></i>] Gets the event handler(s) defined for a control.<br>
<a href="UTILITIE.htm#GETHANDLE">getHandles</a>  [<i><code>func</code></i>] Gets all the hWnd handles for every control created in your application.<br>
<a href="ATTRIBUTE.htm#GETHINT">getHint</a>  [<i><code>func</code></i>] Find the hint text for a control, or the caption for a flattoolbar button<br>
<a href="SCROLL_CONTROL.htm#GETHSCROLLPO">getHScrollPos</a>  [<i><code>func</code></i>] Gets the value of a window's horizontal scroll bar.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETHWND">getHWND</a>  [<i><code>func</code></i>] Returns the Windows Handle of the specified control<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETID">getId</a>  [<i><code>func</code></i>]  Finds the control/window ID given a Window Handle. <br>
<a href="LOW_LEVEL_ROUTINE.htm#GETIDFROMDC">getIdFromDC</a>  [<i><code>func</code></i>] Finds the control Id associated with the supplied Device Context.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETIDNAME">getIdName</a>  [<i><code>func</code></i>] Returns the name of a control, given it's id.<br>
<a href="LIST_CONTROL.htm#GETINDEX">getIndex</a>  [<i><code>func</code></i>] Get the index of the selected item(s), or cursor position in an edit control.<br>
<a href="LIST_CONTROL.htm#GETITEM">getItem</a>  [<i><code>func</code></i>]  Return the text of item at <em>index</em> in <em>list</em>.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETKEYSTATE">getKeyState</a>  [<i><code>func</code></i>]  Gets the depressed stats of the <em>key</em>.<br>
<a href="EVENT.htm#GETLASTMSG">getLastMsg</a>  [<i><code>func</code></i>] Gets information about the Windows message(s) being processed.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETLED">getLEDs</a>  [<i><code>func</code></i>] Returns or'ed flags representing the state of the keyboard LEDs.<br>
<a href="EDIT_CONTROL.htm#GETLINE">getLine</a>  [<i><code>func</code></i>] Fetches the text of the request line.<br>
<a href="DATE_AND_TIME.htm#GETLOCALTIME">getLocalTime</a>  [<i><code>func</code></i>] Gets the date and time according to your timezone settings.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVALLCHECKED">getLVAllChecked</a>  [<i><code>func</code></i>] Returns a list of the indexes of     those rows that are Checked.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVALLTEXT">getLVAllText</a>  [<i><code>func</code></i>] Gets the text associated with every column in a listview row.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVCHECKED">getLVChecked</a>  [<i><code>func</code></i>] Gets whether or not an row has its checkbox ticked.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVCOUNT">getLVCount</a>  [<i><code>func</code></i>] Gets the number of rows in a list view.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVITEM">getLVItem</a>  [<i><code>func</code></i>] Gets various attributes of a listview item.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVITEMLPARAM">getLVItemlParam</a>  [<i><code>func</code></i>] Gets the user-defined data for this specific row in the list.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVITEMTEXT">getLVItemText</a>  [<i><code>func</code></i>] Gets the text associated with a listview item.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVSELECTED">getLVSelected</a>  [<i><code>func</code></i>] get a list of the selected items' indexes<br>
<a href="LISTVIEW_CONTROL.htm#GETLVSELECTEDCOUNT">getLVSelectedCount</a>  [<i><code>func</code></i>] Gets the number of selected items in a list view.<br>
<a href="LISTVIEW_CONTROL.htm#GETLVSELECTEDTEXT">getLVSelectedText</a>  [<i><code>func</code></i>] Gets the column-1 text for each selected item in the listview.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETMAINWINDOW">getMainWindow</a>  [<i><code>func</code></i>] Gets the id of the main window for this application.<br>
<a href="MENU.htm#GETMENUBAR">getMenuBar</a>  [<i><code>func</code></i>] <br>
<a href="MENU.htm#GETMENUPOSN">getMenuPosn</a>  [<i><code>func</code></i>] Get the zero-based relative position of a menu item.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#GETMOUSEPO">getMousePos</a>  [<i><code>func</code></i>]  See <a href="MOUSE.htm#GETPOINTERPO">getPointerPos</a><br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#GETMOUSERELPO">getMouseRelPos</a>  [<i><code>func</code></i>]  See <a href="MOUSE.htm#GETPOINTERRELPO">getPointerRelPos</a><br>
<a href="MOUSETRAP.htm#GETMOUSETRAP">getMouseTrap</a>  [<i><code>func</code></i>] This fetches all the information about the specified mousetrap.<br>
<a href="LIST_CONTROL.htm#GETMULTINDICE">getMultIndices</a>  [<i><code>func</code></i>] Get indices of multiple selections in a multi-selection list<br>
<a href="LIST_CONTROL.htm#GETMULTITEM">getMultItems</a>  [<i><code>func</code></i>] Get text of multiple selections in a multi-selection list<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETNAMEID">getNameId</a>  [<i><code>func</code></i>] Returns the id of a control, given it's name.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETNAMEIDINCONTEXT">getNameIdInContext</a>  [<i><code>func</code></i>] Returns the id of a control, given it's name and parent control.<br>
<a href="EVENT.htm#GETNOTIFICATIONDATA">getNotificationData</a>  [<i><code>func</code></i>] Returns the user data associated with the notification.<br>
<a href="VALUE.htm#GETNUMBER">getNumber</a>  [<i><code>func</code></i>]  Get the numeric value of text from <em>object</em>.<br>
<a href="FILE_OPERATION.htm#GETOPENFILENAME">getOpenFileName</a>  [<i><code>func</code></i>] "Open File" dialog.<br>
<a href="FILE_OPERATION.htm#GETOPENFILENAMEEX">getOpenFileNameEx</a>  [<i><code>func</code></i>] "Open File" dialog.<br>
<a href="MISCELLANEOU.htm#GETOPT">getOpt</a>  [<i><code>func</code></i>]  Retrieves the data associated with <em>pKey</em> in the file <em>pSource</em> under the group <em>pCategory</em><br>
<a href="PRINTING.htm#GETPAGESETUP">getPageSetup</a>  [<i><code>func</code></i>] Page setup dialog<br>
<a href="PRINTING.htm#GETPAGESETUPEX">getPageSetupEx</a>  [<i><code>func</code></i>] Page setup dialog<br>
<a href="ATTRIBUTE.htm#GETPARENT">getParent</a>  [<i><code>func</code></i>]  an alias for <a href="ATTRIBUTE.htm#FINDPARENT">findParent</a><br>
<a href="SYSTEM_ATTRIBUTE.htm#GETPATHFROMIDLIST">getPathFromIDList</a>  [<i><code>func</code></i>] Translates values returned from selection folder standard dialog boxes into a folder name.<br>
<a href="GRAPHIC.htm#GETPIXEL">getPixel</a>  [<i><code>func</code></i>]  Get a pixel value from <em>window</em>'s client area.<br>
<a href="MOUSE.htm#GETPOINTERPO">getPointerPos</a>  [<i><code>func</code></i>] Find where the mouse pointer is on the screen.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#GETPOINTERPOSN">GetPointerPosn</a>  [<i><code>proc</code></i>]  See <a href="MOUSE.htm#GETPOINTERPO">getPointerPos</a><br>
<a href="MOUSE.htm#GETPOINTERRELPO">getPointerRelPos</a>  [<i><code>func</code></i>] Retrieves relative position of the mouse.<br>
<a href="ATTRIBUTE.htm#GETPOSITION">getPosition</a>  [<i><code>func</code></i>]  Get the location of <em>object</em>.<br>
<a href="PRINTING.htm#GETPRINTCHOICE">getPrintChoice</a>  [<i><code>func</code></i>] Get the choices from a user before printing.<br>
<a href="PRINTING.htm#GETPRINTER">getPrinter</a>  [<i><code>func</code></i>]  Get the <a href="CONTROL.htm#PRINTER">Printer</a>.<br>
<a href="PRINTING.htm#GETPRINTERNAME">getPrinterName</a>  [<i><code>func</code></i>] Gets the current printer name.<br>
<a href="MISCELLANEOU.htm#GETRANDINT">getRandInt</a>  [<i><code>func</code></i>] Gets a random number.<br>
<a href="UTILITIE.htm#GETRECENT">getRecent</a>  [<i><code>func</code></i>] Gets the most recently defined control of a specifc kind, and returns the requested id.<br>
<a href="ATTRIBUTE.htm#GETRECT">getRect</a>  [<i><code>func</code></i>]  Get the dimensions of <em>id</em>.<br>
<a href="TEXT.htm#GETREPLACETEXT">getReplaceText</a>  [<i><code>proc</code></i>] Opens the "Replace" Dialog<br>
<a href="EVENT.htm#GETRETURNVALUE">getReturnValue</a>  [<i><code>func</code></i>] Gets the current value of the value that will be returned to Windows.<br>
<a href="RICHEDIT_CONTROL.htm#GETRICHTEXT">getRichText</a>  [<i><code>func</code></i>]  Get text from a <a href="CONTROL.htm#RICHEDIT">RichEdit</a> control<br>
<a href="FILE_OPERATION.htm#GETSAVEFILENAME">getSaveFileName</a>  [<i><code>func</code></i>] "Save File" dialog.<br>
<a href="SCROLL_CONTROL.htm#GETSCROLLCHANGE">getScrollChange</a>  [<i><code>func</code></i>]  Returns the amount that <em>scroll</em> will change.<br>
<a href="SCROLL_CONTROL.htm#GETSCROLLPO">getScrollPos</a>  [<i><code>func</code></i>] Gets the value of a scroll control.<br>
<a href="SCROLL_CONTROL.htm#GETSCROLLRANGE">getScrollRange</a>  [<i><code>func</code></i>]  Returns <em>id</em>'s range of values.<br>
<a href="MONTHCALENDAR_CONTROL.htm#GETSELECTEDDATE">getSelectedDate</a>  [<i><code>func</code></i>]  Get the selected date in a <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> Control<br>
<a href="MONTHCALENDAR_CONTROL.htm#GETSELECTEDDATERANGE">getSelectedDateRange</a>  [<i><code>func</code></i>]  Get selected range of dates in a <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> Control<br>
<a href="VALUE.htm#GETSELECTEDTEXT">getSelectedText</a>  [<i><code>func</code></i>]  Get the selected text in <em>object</em>.<br>
<a href="RICHEDIT_CONTROL.htm#GETSELECTION">getSelection</a>  [<i><code>func</code></i>] Gets the character range of any selected text.<br>
<a href="RICHEDIT_CONTROL.htm#GETSELECTIONFONT">getSelectionFont</a>  [<i><code>func</code></i>] Returns the address of a LOGFONT structure which describes the font used in the selection.<br>
<a href="ATTRIBUTE.htm#GETSELF">getSelf</a>  [<i><code>func</code></i>] Get the id number of the current active control.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#GETSIZE">getSize</a>  [<i><code>proc</code></i>]  See <a href="ATTRIBUTE.htm#GETRECT">getRect</a><br>
<a href="RICHEDIT_CONTROL.htm#GETSTREAM">getStream</a>  [<i><code>func</code></i>] Convert the data in a RichEdit control to a sequence.<br>
<a href="UTILITIE.htm#GETSTYLEFLAG">getStyleFlags</a>  [<i><code>func</code></i>] Retrieves the standard and extra style flags for a control.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETSYSCOLOR">getSysColor</a>  [<i><code>func</code></i>] Return atom with value of a system color.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETSYSTEMMETRIC">getSystemMetrics</a>  [<i><code>func</code></i>] Allows you to get miscellaneous information about the Windows system your application is running on.<br>
<a href="DATE_AND_TIME.htm#GETSYSTEMTIME">getSystemTime</a>  [<i><code>func</code></i>] Gets the date and time as UTC (a.k.a. GMT)<br>
<a href="VALUE.htm#GETTABITEM">getTabItem</a>  [<i><code>func</code></i>] Used to get the current tabitem selected in a tabcontrol<br>
<a href="MOUSETRAP.htm#GETTAGMOUSETRAP">getTagMouseTrap</a>  [<i><code>func</code></i>]  This fetches the data stored by <a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>()<br>
<a href="FILE_OPERATION.htm#GETTEMPFILE">getTempFile</a>  [<i><code>func</code></i>] Used to create an empty file, intended to temporary use.<br>
<a href="FILE_OPERATION.htm#GETTEMPPATH">getTempPath</a>  [<i><code>func</code></i>] Used to find out the directory designated for temporary files.<br>
<a href="VALUE.htm#GETTEXT">getText</a>  [<i><code>func</code></i>]  Get the text in <em>object</em>.<br>
<a href="FONT.htm#GETTEXTEXTENT">getTextExtent</a>  [<i><code>func</code></i>]  Gets the metrics of the <em>textset</em> strings, using <em>Id</em>'s current font.<br>
<a href="FONT.htm#GETTEXTHEIGHT">getTextHeight</a>  [<i><code>func</code></i>]  Gets the height of the <em>text</em> using the current font for the <em>id</em><br>
<a href="FONT.htm#GETTEXTWIDTH">getTextWidth</a>  [<i><code>func</code></i>]  Gets the width of the <em>text</em> using the current font for the <em>id</em><br>
<a href="SCROLL_CONTROL.htm#GETTHUMBPO">getThumbPos</a>  [<i><code>func</code></i>] Gets the position of the scroll thumb while being dragged.<br>
<a href="MONTHCALENDAR_CONTROL.htm#GETTODAY">getToday</a>  [<i><code>func</code></i>]  Returns today's date from the MonthCalendar control <em>id</em><br>
<a href="RESOURCE.htm#GETTRACKEDOBJECT">getTrackedObject</a>  [<i><code>func</code></i>]  Gets the data saved against this <em>Resource</em><br>
<a href="TREEVIEW_CONTROL.htm#GETTVCHILDREN">getTVChildren</a>  [<i><code>func</code></i>]  Returns all child items for the passed item in the <em>tree</em> view.<br>
<a href="TREEVIEW_CONTROL.htm#GETTVINDEX">getTVIndex</a>  [<i><code>func</code></i>] Find which is the selected item in a treeview.<br>
<a href="TREEVIEW_CONTROL.htm#GETTVPARENT">getTVParent</a>  [<i><code>func</code></i>]  Get the parent id of a <a href="CONTROL.htm#TREEVIEW">TreeView</a> item.<br>
<a href="TREEVIEW_CONTROL.htm#GETTVSELECTEDTEXT">getTVSelectedText</a>  [<i><code>func</code></i>] Gets the text associated with the selected item in a TreeView.<br>
<a href="TREEVIEW_CONTROL.htm#GETTVTEXT">getTVText</a>  [<i><code>func</code></i>]  Gets the text associated with a TreeView item with id <em>iItem</em>.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETUSERNAME">getUserName</a>  [<i><code>func</code></i>] Fetches the id of the currently logged in user.<br>
<a href="ATTRIBUTE.htm#GETUSERPROPERTY">getUserProperty</a>  [<i><code>func</code></i>]  Retrieves data from a user defined property for this control <em>id</em>.<br>
<a href="VALUE.htm#GETVALUE">getValues</a>  [<i><code>func</code></i>] Gets the values from one or more specified controls.<br>
<a href="EDIT_CONTROL.htm#GETVISIBLELINE">getVisibleLines</a>  [<i><code>func</code></i>] Determines the numbers of first and last lines displayed on screen.<br>
<a href="SCROLL_CONTROL.htm#GETVSCROLLPO">getVScrollPos</a>  [<i><code>func</code></i>] Gets the value of a window's vertical scroll bar.<br>
<a href="MOUSE.htm#GETWHEELSCROLLLINE">getWheelScrollLines</a>  [<i><code>func</code></i>] Retrieves the number of lines that a mouse wheel movement represents.<br>
<a href="ATTRIBUTE.htm#GETWINDOWINFO">getWindowInfo</a>  [<i><code>func</code></i>] Get various information about a window.<br>
<a href="ATTRIBUTE.htm#GETWINDOWRECT">getWindowRect</a>  [<i><code>func</code></i>]  Dimensions of window <em>id</em>.<br>
<a href="SYSTEM_ATTRIBUTE.htm#GETWINVERSION">getWinVersion</a>  [<i><code>func</code></i>] Gets the version information of the windows platform you are running in.<br>
<a href="SERIE.htm#GET_SERIE">get_series</a>  [<i><code>func</code></i>] Fetches an entire definition for a series.<br>
<a href="GRAPHIC.htm#GRAPHIC">Graphics</a> <br>
<a href="CONTROL.htm#GROUP">Group</a>  [<i><code>const</code></i>] Group control.<br>
<a href="CONTROL.htm#HIDECONTROLSET">hideControlSet</a>  [<i><code>proc</code></i>] Hides all the controls in the identified set(s).<br>
<a href="MOUSETRAP.htm#HITMOUSETRAP">hitMouseTrap</a>  [<i><code>func</code></i>]  This returns all mousetraps for the window that are under the <em>pX</em> and <em>pY</em> position.<br>
<a href="LISTVIEW_CONTROL.htm#HITTESTLV">hitTestLV</a>  [<i><code>func</code></i>]  Check to see if mouse is over a <a href="CONTROL.htm#LISTVIEW">ListView</a> item<br>
<a href="UTILITIE.htm#HITTESTTT">hitTestTT</a>  [<i><code>func</code></i>] Tests to see if the mouse is currently over a control that has a tooltip.<br>
<a href="TREEVIEW_CONTROL.htm#HITTESTTV">hitTestTV</a>  [<i><code>func</code></i>]  Check to see if mouse is over a <a href="CONTROL.htm#TREEVIEW">TreeView</a> item<br>
<a href="CONTROL.htm#HSCROLL">HScroll</a>  [<i><code>const</code></i>] Horizontal scrollbar control.<br>
<a href="CONTROL.htm#HTRACKBAR">HTrackBar</a>  [<i><code>const</code></i>] Horizontal track bar control.<br>
<a href="CONTROL.htm#ICON">Icon</a>  [<i><code>const</code></i>] Icon control.<br>
<a href="ATTRIBUTE.htm#IDTOINDEX">idToIndex</a>  [<i><code>func</code></i>] Given an item id, returns its index in the parent control.<br>
<a href="IMAGE_LIST.htm#IMAGE_LIST">Image Lists</a> <br>
<a href="ATTRIBUTE.htm#INDEXTOID">indexToId</a>  [<i><code>func</code></i>] Given a parent control id and an index, returns an id for the item with that index.<br>
<a href="EDIT_CONTROL.htm#INDEXTOLINE">indexToLine</a>  [<i><code>func</code></i>] Translates a character index to a {line,column} pair.<br>
<a href="MENU.htm#INMENUBAR">inMenuBar</a>  [<i><code>func</code></i>] Determines whether a menu belongs to a window menu bar.<br>
<a href="LIST_CONTROL.htm#INSERTITEM">insertItem</a>  [<i><code>func</code></i>]  Insert <em>text</em> into <em>list</em> at <em>position</em>.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#INSERTLISTVIEWCOLUMN">insertListViewColumn</a>  [<i><code>proc</code></i>]  See <a href="LISTVIEW_CONTROL.htm#INSERTLVCOLUMN">insertLVColumn</a><br>
<a href="LISTVIEW_CONTROL.htm#INSERTLVCOLUMN">insertLVColumn</a>  [<i><code>proc</code></i>] Inserts a new column into a listview control.<br>
<a href="LISTVIEW_CONTROL.htm#INSERTLVITEM">insertLVItem</a>  [<i><code>func</code></i>]  Low-Level version of <a href="LISTVIEW_CONTROL.htm#ADDLVITEM">addLVItem</a>.<br>
<a href="VALUE.htm#INSERTTEXT">insertText</a>  [<i><code>proc</code></i>] Inserts text at the current caret (insersion point)<br>
<a href="EDIT_CONTROL.htm#INSERTTEXTAT">insertTextAt</a>  [<i><code>proc</code></i>]  Inesrts <em>text</em> in the text of <em>at</em> a defined point.<br>
<a href="EVENT.htm#INVOKEHANDLER">invokeHandler</a>  [<i><code>func</code></i>] Triggers a Win32Lib event.<br>
<a href="VALUE.htm#ISCHECKED">isChecked</a>  [<i><code>func</code></i>]  Gets the checked state of <em>id</em>.<br>
<a href="ATTRIBUTE.htm#ISDROPPED">isDropped</a>  [<i><code>func</code></i>] Returns 1 if the control is currently in dropped state, else 0.<br>
<a href="ATTRIBUTE.htm#ISENABLED">isEnabled</a>  [<i><code>func</code></i>]  Returns the enabled state of <em>object</em>.<br>
<a href="MEMORY_MANAGEMENT.htm#ISFIELDOF">isFieldOf</a>  [<i><code>func</code></i>]  Determines whether <em>field</em> is a field of the <em>struct_type</em> structure type.<br>
<a href="ATTRIBUTE.htm#ISMAXIMIZED">isMaximized</a>  [<i><code>func</code></i>]  Used to see if the window <em>object</em> is maximized (zoomed) or not.<br>
<a href="ATTRIBUTE.htm#ISMINIMIZED">isMinimized</a>  [<i><code>func</code></i>]  Used to see if the window <em>object</em> is minimized (iconic) or not.<br>
<a href="ATTRIBUTE.htm#ISSCREENPOINTIN">isScreenPointIn</a>  [<i><code>func</code></i>]  Return <strong>w32True</strong> if the screen point { <em>x</em>, <em>y</em> } is within <em>control</em>.<br>
<a href="ATTRIBUTE.htm#ISTOPLEVELWINDOW">isTopLevelWindow</a>  [<i><code>func</code></i>]  Used to determine if the <em>id</em> is a Window that acts independently of other windows.<br>
<a href="ATTRIBUTE.htm#ISVISIBLE">isVisible</a>  [<i><code>func</code></i>]  Returns the visibility state of <em>object</em>.<br>
<a href="CONSTANT.htm#KERNEL32">kernel32</a>  [<i><code>const</code></i>] Windows Library: Memory and Basic Windows Core<br>
<a href="LOW_LEVEL_ROUTINE.htm#KILLTIMER">killTimer</a>  [<i><code>proc</code></i>] Stop a timer.<br>
<a href="CONSTANT.htm#KLVCOLTYPE">kLVColTypes</a>  [<i><code>const</code></i>]  Used by <a href="LISTVIEW_CONTROL.htm#SETLVATTR">setLVAttr</a><br>
<a href="CONSTANT.htm#KLVSORTRTN">kLVSortRtn</a>  [<i><code>const</code></i>]  Used by <a href="LISTVIEW_CONTROL.htm#SETLVATTR">setLVAttr</a><br>
<a href="CONSTANT.htm#KLVSORTSEQ">kLVSortSeq</a>  [<i><code>const</code></i>]  Used by <a href="LISTVIEW_CONTROL.htm#SETLVATTR">setLVAttr</a><br>
<a href="CONSTANT.htm#KMAINMSG">kMainMsg</a>  [<i><code>const</code></i>]  Used by the notify and raw message handlers. See <a href="EVENT.htm#SETNOTIFYHANDLER">setNotifyHandler</a><br>
<a href="CONSTANT.htm#KPROCESSMSG">kProcessMsg</a>  [<i><code>const</code></i>]  Used by the notify and raw message handlers. See <a href="EVENT.htm#SETNOTIFYHANDLER">setNotifyHandler</a><br>
<a href="CONSTANT.htm#KRETURNNOW">kReturnNow</a>  [<i><code>const</code></i>]  Used by the notify and raw message handlers. See <a href="EVENT.htm#SETNOTIFYHANDLER">setNotifyHandler</a><br>
<a href="CONSTANT.htm#KSUBCLASSEDMSG">kSubclassedMsg</a>  [<i><code>const</code></i>]  Used by the notify and raw message handlers. See <a href="EVENT.htm#SETNOTIFYHANDLER">setNotifyHandler</a><br>
<a href="EDIT_CONTROL.htm#LIMITTEXT">limitText</a>  [<i><code>proc</code></i>] Limits the amount of text a user can enter into an Edit control.<br>
<a href="CONTROL.htm#LIST">List</a>  [<i><code>const</code></i>] List.<br>
<a href="LIST_CONTROL.htm#LIST_CONTROL">List Control</a> <br>
<a href="CONTROL.htm#LISTVIEW">ListView</a>  [<i><code>const</code></i>] ListView<br>
<a href="LISTVIEW_CONTROL.htm#LISTVIEW_CONTROL">ListView Control</a> <br>
<a href="GRAPHIC.htm#LOADBITMAPFROMFILE">loadBitmapFromFile</a>  [<i><code>func</code></i>] Loads a bitmap file.<br>
<a href="MOUSE.htm#LOADCURSOR">loadCursor</a>  [<i><code>func</code></i>] Loads a cursor from a file.<br>
<a href="FORM.htm#LOADFORM">loadForm</a>  [<i><code>func</code></i>] Builds a form definition from a text file.<br>
<a href="SYSTEM_ATTRIBUTE.htm#LOADICONFROMFILE">loadIconFromFile</a>  [<i><code>func</code></i>] Get an icon from a file.<br>
<a href="LISTVIEW_CONTROL.htm#LOADLVINFO">loadLVInfo</a>  [<i><code>proc</code></i>] Used to bulk load data into a list view control<br>
<a href="LOW_LEVEL_ROUTINE.htm#LOW_LEVEL_ROUTINE">Low Level Routines</a> <br>
<a href="CONTROL.htm#LTEXT">LText</a>  [<i><code>const</code></i>] Left-justified label control.<br>
<a href="EVENT.htm#MAIN">main</a>  [<i><code>func</code></i>]  An optional application routine, called within <a href="EVENT.htm#W32START">w32start</a>.ew just prior to Windows gaining control.<br>
<a href="ATTRIBUTE.htm#MAKEFRONT">makeFront</a>  [<i><code>proc</code></i>] Brings to control to the front<br>
<a href="MISCELLANEOU.htm#MAKESTANDARDNAME">makeStandardName</a>  [<i><code>func</code></i>] Transforms a string into a standardized format suitable for naming things.<br>
<a href="SYSTEM_ATTRIBUTE.htm#MANAGETOOLTIP">manageToolTip</a>  [<i><code>func</code></i>] Helps manage the ToolTip controls.<br>
<a href="MEMORY_MANAGEMENT.htm#MEMORY_MANAGEMENT">Memory management</a> <br>
<a href="CONTROL.htm#MENU">Menu</a>  [<i><code>const</code></i>] Menu bar item control.<br>
<a href="CONTROL.htm#MENUITEM">MenuItem</a>  [<i><code>const</code></i>] Dropdown menu item control.<br>
<a href="MENU.htm#MENU">Menus</a> <br>
<a href="CONTROL.htm#MENUSPACER">MenuSpacer</a>  [<i><code>const</code></i>] Horizontal spacer (line) in menu items.<br>
<a href="MISCELLANEOU.htm#MISCELLANEOU">Miscellaneous</a> <br>
<a href="GRAPHIC.htm#MIXCOLOR">mixColors</a>  [<i><code>func</code></i>]  Computes the weighted average of the supplied colors by calling <a href="SUPPORT_ROUTINE.htm#W32AVERAGE">w32average</a>()<br>
<a href="CONTROL.htm#MLETEXT">MleText</a>  [<i><code>const</code></i>] Multi-line edit control.<br>
<a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a>  [<i><code>const</code></i>] MonthCalendar<br>
<a href="MONTHCALENDAR_CONTROL.htm#MONTHCALENDAR_CONTROL">MonthCalendar Control</a> <br>
<a href="MOUSE.htm#MOUSE">Mouse</a> <br>
<a href="MOUSETRAP.htm#MOUSETRAP">MouseTraps</a> <br>
<a href="FILE_OPERATION.htm#MOVEFILE">moveFile</a>  [<i><code>func</code></i>] Renames or Moves a file.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#MOVEWINDOW">moveWindow</a>  [<i><code>proc</code></i>]  See <a href="ATTRIBUTE.htm#SETRECT">setRect</a><br>
<a href="ATTRIBUTE.htm#MOVEZORDER">moveZOrder</a>  [<i><code>proc</code></i>]  Move <em>id</em> to up or down the of Z order of windows.<br>
<a href="GRAPHIC.htm#NEWCOLOR">newColor</a>  [<i><code>func</code></i>]  Attempts to define a new color named <em>name</em> with value <em>value</em><br>
<a href="EVENT.htm#NEWEVENT">newEvent</a>  [<i><code>func</code></i>]  Defines a new event, and cause it to be triggered by <em>message</em>, with processing routine with routine_id <em>rid</em>.<br>
<a href="PRINTING.htm#NEWPRINTER">newPrinter</a>  [<i><code>proc</code></i>] Sets up the printer whose friendly name is supplied.<br>
<a href="DEFINING_CONTROL.htm#NEWUIOBJ">newUIObj</a>  [<i><code>proc</code></i>] Defines a User Interface Object, a.k.a. a Control<br>
<a href="SERIE.htm#NEXT_NUMBER">next_number</a>  [<i><code>func</code></i>] Increments the series and returns the next value in it.<br>
<a href="OLE_ACTIVEX.htm#OLE_ACTIVEX">OLE ActiveX</a> <br>
<a href="CONSTANT.htm#OLE32">ole32</a>  [<i><code>const</code></i>] Windows Library: Graphic Device Interface (drawing, text, etc)<br>
<a href="OLE_ACTIVEX.htm#OLEINITIALIZE">OleInitialize</a>  [<i><code>proc</code></i>] Initializes the thread's OLE subsystem<br>
<a href="OLE_ACTIVEX.htm#OLEUNINITIALIZE">OleUninitialize</a>  [<i><code>proc</code></i>] Resets the thread's OLE subsystem<br>
<a href="ATTRIBUTE.htm#OPENDIALOG">openDialog</a>  [<i><code>proc</code></i>]  Opens a window, <em>id</em>, as a modal dialog.<br>
<a href="ATTRIBUTE.htm#OPENWINDOW">openWindow</a>  [<i><code>proc</code></i>] Opens a window<br>
<a href="EDIT_CONTROL.htm#PASTE">paste</a>  [<i><code>proc</code></i>]  Paste text from the clipboard to <em>object</em>.<br>
<a href="CONTROL.htm#PICTUREBUTTON">PictureButton</a>  [<i><code>const</code></i>] Command button with graphic control.<br>
<a href="CONTROL.htm#PIXMAP">Pixmap</a>  [<i><code>const</code></i>] Color bitmap.<br>
<a href="UTILITIE.htm#PLAYSOUND">playSound</a>  [<i><code>func</code></i>] Play the .WAV file.<br>
<a href="CONTROL.htm#POPUP">Popup</a>  [<i><code>const</code></i>] Popup menu control.<br>
<a href="ATTRIBUTE.htm#POPUP">popup</a>  [<i><code>proc</code></i>]  Display popupMenu at { <em>x</em>, <em>y</em> }.<br>
<a href="CONTROL.htm#PRINTER">Printer</a>  [<i><code>const</code></i>] Handle to the printer.<br>
<a href="PRINTING.htm#PRINTING">Printing</a> <br>
<a href="RICHEDIT_CONTROL.htm#PRINTRICHTEXT">printRichText</a>  [<i><code>proc</code></i>] Prints some or all the contents of a rich edit control.<br>
<a href="RICHEDIT_CONTROL.htm#PRINTRICHTEXTPAGE">printRichTextPages</a>  [<i><code>proc</code></i>] Prints the contents of a RichText control.<br>
<a href="CONTROL.htm#PROGRESSBAR">ProgressBar</a>  [<i><code>const</code></i>] Progress Bar<br>
<a href="CONTROL.htm#PUSHBUTTON">PushButton</a>  [<i><code>const</code></i>] Command button control.<br>
<a href="RICHEDIT_CONTROL.htm#PUTSTREAM">putStream</a>  [<i><code>proc</code></i>] Load text into a RichEdit control from a text sequence.<br>
<a href="ATTRIBUTE.htm#QUERYDEVICE">queryDevice</a>  [<i><code>func</code></i>] Gets device informtion for the screen or a printer.<br>
<a href="CONTROL.htm#RADIO">Radio</a>  [<i><code>const</code></i>] Radio button control.<br>
<a href="CONTROL.htm#REBAR">ReBar</a>  [<i><code>const</code></i>] ReBar<br>
<a href="ATTRIBUTE.htm#REFRESHWINDOW">refreshWindow</a>  [<i><code>proc</code></i>] Forces the control(s) to be refreshed.<br>
<a href="CONTROL.htm#REGISTERCONTROL">registerControl</a>  [<i><code>func</code></i>] Enables you to define new control types.<br>
<a href="ATTRIBUTE.htm#REGISTERHOTKEY">registerHotKey</a>  [<i><code>proc</code></i>] Allows you to associate a ALT-key combination to set focus to a control.<br>
<a href="EVENT.htm#REGISTERNOTIFICATION">registerNotification</a>  [<i><code>proc</code></i>] Defines, modifies or removes an event forwarding.<br>
<a href="SUPPORT_ROUTINE.htm#REGISTERROUTINE">registerRoutine</a>  [<i><code>proc</code></i>] Registers a text string with an associated routine_id.<br>
<a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32FUNCTION">registerw32Function</a>  [<i><code>func</code></i>] Associates an internal id number with the function name.<br>
<a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32LIBRARY">registerw32Library</a>  [<i><code>func</code></i>] Associates an internal id number with the library name.<br>
<a href="LOW_LEVEL_ROUTINE.htm#REGISTERW32PROCEDURE">registerw32Procedure</a>  [<i><code>func</code></i>] Associates an internal id number with the procedure name.<br>
<a href="LOW_LEVEL_ROUTINE.htm#RELEASEDC">releaseDC</a>  [<i><code>proc</code></i>] Release the device context of the control.<br>
<a href="MOUSE.htm#RELEASEMOUSE">releaseMouse</a>  [<i><code>proc</code></i>] Return control of the mouse to Windows.<br>
<a href="PRINTING.htm#RELEASEPRINTER">releasePrinter</a>  [<i><code>proc</code></i>]  Release the <a href="CONTROL.htm#PRINTER">Printer</a>, freeing it up for others to use.<br>
<a href="SUPPORT_ROUTINE.htm#REMOVEFROMCTYPE">removeFromCType</a>  [<i><code>proc</code></i>] Removes characters from one or more sets.<br>
<a href="EVENT.htm#REMOVEHANDLER">removeHandler</a>  [<i><code>proc</code></i>]  Removes user written event handlers previously set with <a href="EVENT.htm#SETHANDLER">setHandler</a>()<br>
<a href="MENU.htm#REMOVEMENU">removeMenu</a>  [<i><code>func</code></i>] Removes a menu item from a menu.<br>
<a href="UTILITIE.htm#REMOVESTYLE">removeStyle</a>  [<i><code>proc</code></i>] Remove a style from a control.<br>
<a href="GRAPHIC.htm#REPAINTFG">repaintFG</a>  [<i><code>proc</code></i>]  Force <em>window</em> to be repainted but without clearing it first.<br>
<a href="GRAPHIC.htm#REPAINTRECT">repaintRect</a>  [<i><code>proc</code></i>]  Force <em>window</em> to be partially repainted.<br>
<a href="GRAPHIC.htm#REPAINTWINDOW">repaintWindow</a>  [<i><code>proc</code></i>]  Force <em>window</em> to be entirely repainted.<br>
<a href="RESOURCE.htm#REPLACEOBJECT">replaceObject</a>  [<i><code>proc</code></i>] Selects an object into a device context, which automatically tracks that object.<br>
<a href="EVENT.htm#RESETRETURNVALUE">resetReturnValue</a>  [<i><code>proc</code></i>] Removes any value returned by handler.<br>
<a href="ATTRIBUTE.htm#RESETUSERPROPERTY">resetUserProperty</a>  [<i><code>proc</code></i>]  Initializes a user defined property for this control <em>id</em>.<br>
<a href="RESOURCE.htm#RESOURCE">Resources</a> <br>
<a href="MOUSE.htm#RESTOREMOUSEPOINTER">restoreMousePointer</a>  [<i><code>proc</code></i>]  Gets back the previous pointer the mouse had before the last <a href="MOUSE.htm#SETMOUSEPOINTER">setMousePointer</a> call.<br>
<a href="EVENT.htm#RETURNVALUE">returnValue</a>  [<i><code>proc</code></i>] Override default value returned by handler.<br>
<a href="GRAPHIC.htm#RGB">rgb</a>  [<i><code>func</code></i>] Convert a {red, green, blue} tuple into a 24-bit color value.<br>
<a href="CONSTANT.htm#RICHED32">riched32</a>  [<i><code>const</code></i>] Windows Library: Rich Edit Control<br>
<a href="CONTROL.htm#RICHEDIT">RichEdit</a>  [<i><code>const</code></i>] RichEdit<br>
<a href="RICHEDIT_CONTROL.htm#RICHEDIT_CONTROL">RichEdit controls</a> <br>
<a href="CONTROL.htm#RTEXT">RText</a>  [<i><code>const</code></i>] Right-justified label control.<br>
<a href="CONTROL.htm#SCREEN">Screen</a>  [<i><code>const</code></i>] Identifes the screen.<br>
<a href="SYSTEM_ATTRIBUTE.htm#SCREENTOCLIENT">ScreenToClient</a>  [<i><code>func</code></i>] Converts a point on a screen to control-based coordinates.<br>
<a href="SCROLL_CONTROL.htm#SCROLL_CONTROL">Scroll Control</a> <br>
<a href="FILE_OPERATION.htm#SELECTDIRECTORY">selectDirectory</a>  [<i><code>func</code></i>] Displays a dialog for selecting directories.<br>
<a href="LOW_LEVEL_ROUTINE.htm#SENDMESSAGE">sendMessage</a>  [<i><code>func</code></i>] Send a Win32 message to the requested control.<br>
<a href="CONTROL.htm#SEPBUTTON">SepButton</a>  [<i><code>const</code></i>]  Separator button for use with <a href="CONTROL.htm#FLATTOOLBAR">FlatToolBar</a> Controls<br>
<a href="SERIE.htm#SERIE">Series</a> <br>
<a href="UPDOWN_CONTROL.htm#SETACCELERATION">setAcceleration</a>  [<i><code>proc</code></i>] Set the rate of change for an UpDown control<br>
<a href="RICHEDIT_CONTROL.htm#SETALIGNMENT">setAlignment</a>  [<i><code>proc</code></i>]  Align text in a <a href="CONTROL.htm#RICHEDIT">RichEdit</a> Control<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETAPPNAME">setAppName</a>  [<i><code>func</code></i>] Sets the text used as a class name prefix for new Windows.<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETAUTOFOCUSLABEL">setAutoFocusLabels</a>  [<i><code>func</code></i>] Possibly sets whether or not a '&' in labels set focus to subsequent edit field.<br>
<a href="GRAPHIC.htm#SETBACKCOLOR">setBackColor</a>  [<i><code>proc</code></i>]  Set the color for used for the pen fill color in <em>id</em>.<br>
<a href="ATTRIBUTE.htm#SETBACKGROUND">setBackground</a>  [<i><code>proc</code></i>]  Sets the background of control <em>id</em> with a color, pattern or bitmap.<br>
<a href="VALUE.htm#SETBITMAP">setBitmap</a>  [<i><code>proc</code></i>]  Assign an bitmap to <em>Object</em>.<br>
<a href="UPDOWN_CONTROL.htm#SETBUDDY">setBuddy</a>  [<i><code>proc</code></i>]  Set the buddy control of an <a href="CONTROL.htm#UPDOWN">UpDown</a> control <em>id</em> to be <em>buddy</em>. The buddy<br>
<a href="RICHEDIT_CONTROL.htm#SETBULLET">setBullet</a>  [<i><code>proc</code></i>] <br>
<a href="EVENT.htm#SETCALLBACK">setCallback</a>  [<i><code>func</code></i>] gets and sets the application's generic callback routine id<br>
<a href="VALUE.htm#SETCHECK">setCheck</a>  [<i><code>proc</code></i>]  Check or uncheck <em>id</em>.<br>
<a href="ATTRIBUTE.htm#SETCLIENTRECT">setClientRect</a>  [<i><code>proc</code></i>] Sets the size of the client area in a window.<br>
<a href="UTILITIE.htm#SETCLIPBOARD">setClipboard</a>  [<i><code>func</code></i>]  Sets the clipboard to <em>data</em> using the other parameters.<br>
<a href="LISTVIEW_CONTROL.htm#SETCOLUMN">setColumn</a>  [<i><code>proc</code></i>] Changes the column header text, or width, or alignment.<br>
<a href="LISTVIEW_CONTROL.htm#SETCOLUMNHEADING">setColumnHeadings</a>  [<i><code>proc</code></i>]  Sets the heading text for the columns in a <a href="CONTROL.htm#LISTVIEW">ListView</a> Control.<br>
<a href="MISCELLANEOU.htm#SETCONTAINER">setContainer</a>  [<i><code>func</code></i>]  Defines the message file that is used by <a href="MISCELLANEOU.htm#USETEXT">Usetext</a><br>
<a href="CONTROL.htm#SETCONTROLBLOCK">setControlBlocks</a>  [<i><code>proc</code></i>] Sets the number of new memory areas created for new controls<br>
<a href="CONTROL.htm#SETCONTROLSET">setControlSet</a>  [<i><code>proc</code></i>] Create and maintains the entries in a control set.<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETCREATEFONT">setCreateFont</a>  [<i><code>func</code></i>] sets the font used for controls when they are created.<br>
<a href="ATTRIBUTE.htm#SETCTLPOSITION">setCtlPosition</a>  [<i><code>proc</code></i>]  Sets the location of the control. x and y can have any format <a href="DEFINING_CONTROL.htm#CREATE">create</a>() supports.<br>
<a href="ATTRIBUTE.htm#SETCTLSIZE">setCtlSize</a>  [<i><code>proc</code></i>]  Resizes <em>control</em> to <em>Width</em> and <em>Height</em>.<br>
<a href="FILE_OPERATION.htm#SETCURRENTDIRECTORY">setCurrentDirectory</a>  [<i><code>proc</code></i>] Sets the current directory<br>
<a href="SUPPORT_ROUTINE.htm#SETDECIMALMARK">setDecimalMark</a>  [<i><code>func</code></i>] Gets and possibly sets the decimal mark w32TextToNumner() is to recognise.<br>
<a href="FONT.htm#SETDEFAULTFONT">setDefaultFont</a>  [<i><code>proc</code></i>] Set the font to default system font.<br>
<a href="EVENT.htm#SETDEFAULTPROCESSING">setDefaultProcessing</a>  [<i><code>func</code></i>] This establishes a replacement routine to handle the Windows default processing,<br>
<a href="ATTRIBUTE.htm#SETDISABLEBG">setDisableBg</a>  [<i><code>proc</code></i>]  Sets the color to use when disabling the control <em>id</em>.<br>
<a href="MOUSE.htm#SETDRAGPOINTER">setDragPointer</a>  [<i><code>proc</code></i>] Sets the mouse pointer shape to use when dragging.<br>
<a href="ATTRIBUTE.htm#SETENABLE">setEnable</a>  [<i><code>proc</code></i>]  Enable or disable <em>id</em>.<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETENDACTION">setEndAction</a>  [<i><code>func</code></i>] Sets the exit code and behaviour at application closure.<br>
<a href="ATTRIBUTE.htm#SETERASEPOLICY">setErasePolicy</a>  [<i><code>func</code></i>]  Possibly sets and gets the Background Erasing policy for the control <em>id</em><br>
<a href="EVENT.htm#SETEVENTLOOP">setEventLoop</a>  [<i><code>func</code></i>] This establishes an replacement event loop.<br>
<a href="FILE_OPERATION.htm#SETFILEATTR">setFileAttr</a>  [<i><code>func</code></i>] Sets one or more attibutes for the specified file.<br>
<a href="ATTRIBUTE.htm#SETFOCU">setFocus</a>  [<i><code>proc</code></i>] Set the focus to the specified window or control.<br>
<a href="FONT.htm#SETFONT">setFont</a>  [<i><code>proc</code></i>] Set the font for a control or window.<br>
<a href="FONT.htm#SETFONTWEIGHT">setFontWeight</a>  [<i><code>func</code></i>]  Possibly sets what you mean by 'bold' when using <a href="FONT.htm#SETFONT">setFont</a>(..., <em>Bold</em> )<br>
<a href="RICHEDIT_CONTROL.htm#SETFRDATA">setFRData</a>  [<i><code>func</code></i>]  Gets and possibly sets the "find what" and "replace with" strings used in a Find/Replace dialog box, as well as its control flags. <br>
<a href="TEXT.htm#SETFRMSGSTRING">setFRMsgStrings</a>  [<i><code>func</code></i>] Gets and possibly sets the strings appearing in the default message boxes when &<br>
<a href="EVENT.htm#SETHANDLER">setHandler</a>  [<i><code>proc</code></i>] Sets up an user written event handler<br>
<a href="EVENT.htm#SETHANDLERPROTECTION">setHandlerProtection</a>  [<i><code>func</code></i>] Possibly sets the protection status for a pair {id,event}.<br>
<a href="ATTRIBUTE.htm#SETHINT">setHint</a>  [<i><code>proc</code></i>] Set the tooltip text for a control.<br>
<a href="ATTRIBUTE.htm#SETHINTEX">setHintEx</a>  [<i><code>proc</code></i>] Set the tooltip text for a control.<br>
<a href="FONT.htm#SETHINTFONT">setHintFont</a>  [<i><code>proc</code></i>] Set font type and size for the control's hints.<br>
<a href="ATTRIBUTE.htm#SETHINTWIDTH">setHintWidth</a>  [<i><code>func</code></i>] Possibly sets the maximum width, in pixels, of the control's tooltip box.<br>
<a href="SCROLL_CONTROL.htm#SETHSCROLLPO">setHScrollPos</a>  [<i><code>proc</code></i>]  Sets the value of a window's horizontal <em>scroll</em>.<br>
<a href="VALUE.htm#SETICON">setIcon</a>  [<i><code>proc</code></i>]  Assign an icon to <em>object</em>.<br>
<a href="EVENT.htm#SETIDLE">setIdle</a>  [<i><code>func</code></i>] Possibly sets whether or not the library implements w32HIdle<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETIDNAME">setIdName</a>  [<i><code>proc</code></i>] Sets the name of a control, given it's id.<br>
<a href="IMAGE_LIST.htm#SETIMAGELIST">setImageList</a>  [<i><code>proc</code></i>] Sets the image list for a ListView, TreeView, TabControl or ComboBoxEx control.<br>
<a href="RICHEDIT_CONTROL.htm#SETINDENT">setIndent</a>  [<i><code>proc</code></i>]  Change indenting in a <a href="CONTROL.htm#RICHEDIT">RichEdit</a> Control<br>
<a href="RICHEDIT_CONTROL.htm#SETINDEX">setIndex</a>  [<i><code>proc</code></i>]  Select characters in the control. <br><br>
<a href="LIST_CONTROL.htm#SETINDEX">setIndex</a>  [<i><code>proc</code></i>]  Set the selected item on the list to <em>index</em>.<br>
<a href="ATTRIBUTE.htm#SETKBDINPUT">setKbdInput</a>  [<i><code>func</code></i>] Possibly sets the value to return, or the routine_id to use, when control receives the WM_GETDLGCODE message.<br>
<a href="LIST_CONTROL.htm#SETLISTHSCROLL">setListHScroll</a>  [<i><code>func</code></i>] Recalculates the size of a horizontal scroll bar on a listbox.<br>
<a href="LISTVIEW_CONTROL.htm#SETLVATTR">setLVAttr</a>  [<i><code>func</code></i>] Set (some) attributes of a ListView control<br>
<a href="LISTVIEW_CONTROL.htm#SETLVCHECKED">setLVChecked</a>  [<i><code>proc</code></i>]  Sets the checked state for a <a href="CONTROL.htm#LISTVIEW">ListView</a> Item<br>
<a href="LISTVIEW_CONTROL.htm#SETLVIMAGE">setLVImage</a>  [<i><code>func</code></i>] Possibly sets the new background image of the ListView, and returns previous state.<br>
<a href="LISTVIEW_CONTROL.htm#SETLVINSERT">setLVInsert</a>  [<i><code>func</code></i>] Possibly sets the default position for ListView inserts.<br>
<a href="LISTVIEW_CONTROL.htm#SETLVITEM">setLVItem</a>  [<i><code>proc</code></i>] Enables you to set a number of the properties of a ListView item in one call.<br>
<a href="LISTVIEW_CONTROL.htm#SETLVITEMEX">setLVItemEx</a>  [<i><code>proc</code></i>] Enables you to set a number of the properties of a ListView item in one call,<br>
<a href="LISTVIEW_CONTROL.htm#SETLVITEMLPARAM">setLVItemlParam</a>  [<i><code>proc</code></i>] Sets the user-defined data for this specific row in the list.<br>
<a href="LISTVIEW_CONTROL.htm#SETLVITEMTEXT">setLVItemText</a>  [<i><code>proc</code></i>] Sets the text of a List View item or subitem.<br>
<a href="LISTVIEW_CONTROL.htm#SETLVSTYLE">setLVStyle</a>  [<i><code>proc</code></i>] Sets the extended style flags on a listview<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETMAINWINDOW">setMainWindow</a>  [<i><code>func</code></i>] Used to tell the library which window is the primary one.<br>
<a href="MONTHCALENDAR_CONTROL.htm#SETMAXDATERANGE">setMaxDateRange</a>  [<i><code>proc</code></i>] Sets the maximum number of days that can be selected.<br>
<a href="MENU.htm#SETMENUITEMBITMAP">setMenuItemBitmaps</a>  [<i><code>func</code></i>]  Sets the bitmap on a menu item, or the checked/unchecked marks <br>
<a href="MONTHCALENDAR_CONTROL.htm#SETMONTHCOLOR">setMonthColor</a>  [<i><code>proc</code></i>]  Change color of a <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> Control<br>
<a href="EVENT.htm#SETMOUSECLICK">setMouseClick</a>  [<i><code>func</code></i>]  Sets/gets the mouse click detection parameters. <br>
<a href="MOUSE.htm#SETMOUSEPOINTER">setMousePointer</a>  [<i><code>proc</code></i>]  Set the pointer the mouse displays when in <em>id</em>.<br>
<a href="EVENT.htm#SETNOTIFICATIONSTATE">setNotificationState</a>  [<i><code>func</code></i>] Possibly sets the state for the designated notification, and returns the former value of the state.<br>
<a href="EVENT.htm#SETNOTIFYHANDLER">setNotifyHandler</a>  [<i><code>func</code></i>] Sets a handler for WM_NOTIFY type of messages.<br>
<a href="GRAPHIC.htm#SETPAINTPOLICY">setPaintPolicy</a>  [<i><code>func</code></i>] Possibly sets the paint policy flag.<br>
<a href="ATTRIBUTE.htm#SETPARENT">setParent</a>  [<i><code>func</code></i>]  Changes (or sets) the parent of the control <em>id</em> to <em>newparent</em>, using the <em>index</em> attachment data if it is relevant.<br>
<a href="GRAPHIC.htm#SETPENBKCOLOR">setPenBkColor</a>  [<i><code>proc</code></i>] Determines the background color for text.<br>
<a href="GRAPHIC.htm#SETPENBKMODE">setPenBkMode</a>  [<i><code>proc</code></i>] Determines if the background color for lines and text.<br>
<a href="GRAPHIC.htm#SETPENBRUSHCOLOR">setPenBrushColor</a>  [<i><code>proc</code></i>] Determines the solid brush color for filled shapes.<br>
<a href="GRAPHIC.htm#SETPENCOLOR">setPenColor</a>  [<i><code>proc</code></i>]  Set the the pen color used in <em>window</em>.<br>
<a href="GRAPHIC.htm#SETPENMODE">setPenMode</a>  [<i><code>proc</code></i>] Determines what mode graphics are drawn in.<br>
<a href="FONT.htm#SETPENPO">setPenPos</a>  [<i><code>proc</code></i>]  Position the text pen in <em>window</em>.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#SETPENPOSITION">setPenPosition</a>  [<i><code>proc</code></i>]  See <a href="FONT.htm#SETPENPO">setPenPos</a><br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#SETPENROP2">setPenROP2</a>  [<i><code>func</code></i>]  See <a href="GRAPHIC.htm#SETPENMODE">setPenMode</a><br>
<a href="GRAPHIC.htm#SETPENSTYLE">setPenStyle</a>  [<i><code>proc</code></i>] Set the style that lines are drawn in.<br>
<a href="GRAPHIC.htm#SETPENWIDTH">setPenWidth</a>  [<i><code>proc</code></i>]  Set the the pen width used in <em>window</em>.<br>
<a href="GRAPHIC.htm#SETPIXEL">setPixel</a>  [<i><code>proc</code></i>]  Set a pixel value in <em>window</em>'s client area.<br>
<a href="VALUE.htm#SETPIXMAP">setPixmap</a>  [<i><code>proc</code></i>]  Assign a new value to a <a href="CONTROL.htm#PIXMAP">Pixmap</a>.<br>
<a href="MOUSE.htm#SETPOINTERPO">setPointerPos</a>  [<i><code>proc</code></i>] Moves the mouse pointer to a specified spot on the screen.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#SETPOINTERPOSN">SetPointerPosn</a>  [<i><code>proc</code></i>]  See <a href="MOUSE.htm#SETPOINTERPO">setPointerPos</a><br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#SETPOSITION">setPosition</a>  [<i><code>proc</code></i>]  See <a href="FONT.htm#SETPENPO">setPenPos</a><br>
<a href="MEMORY_MANAGEMENT.htm#SETPREPROCESSDATAIN">setPreProcessDataIn</a>  [<i><code>proc</code></i>]  Sets up a routine to preprocess data fed to <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>() for a given type of structure.<br>
<a href="PRINTING.htm#SETPRINTJOBPROPERTY">setPrintJobProperty</a>  [<i><code>func</code></i>] Gets, and possibly sets, a print job property.<br>
<a href="EVENT.htm#SETPROTECTEDHANDLER">setProtectedHandler</a>  [<i><code>proc</code></i>] Same as setHandler(), but overrides any protection without changing it.<br>
<a href="ATTRIBUTE.htm#SETREADONLY">setReadOnly</a>  [<i><code>proc</code></i>] Sets the read-only state of an edit control.<br>
<a href="ATTRIBUTE.htm#SETREBARAUTOSIZING">setReBarAutoSizing</a>  [<i><code>func</code></i>]  Sets/Gets the automatic resizing facility for ReBar controls. <br>
<a href="RICHEDIT_CONTROL.htm#SETRECHANGENOTIFICATION">setREChangeNotification</a>  [<i><code>func</code></i>] Gets, and possibly sets, the status of change notification for a RichEdit control.<br>
<a href="ATTRIBUTE.htm#SETRECT">setRect</a>  [<i><code>proc</code></i>]  Move and resize <em>control</em>.<br>
<a href="SCROLL_CONTROL.htm#SETSCROLLCHANGE">setScrollChange</a>  [<i><code>proc</code></i>] Adjust the amount that a scroll control will change.<br>
<a href="SCROLL_CONTROL.htm#SETSCROLLPO">setScrollPos</a>  [<i><code>proc</code></i>]  Sets the value of <em>id</em>.<br>
<a href="SCROLL_CONTROL.htm#SETSCROLLRANGE">setScrollRange</a>  [<i><code>proc</code></i>] Sets the range of values of a control.<br>
<a href="FILE_OPERATION.htm#SETSEARCHPATH">setSearchPaths</a>  [<i><code>func</code></i>] Possibly sets the file system paths to use when searching for files<br>
<a href="MONTHCALENDAR_CONTROL.htm#SETSELECTEDDATE">setSelectedDate</a>  [<i><code>proc</code></i>]  Set the selection in a <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> Control<br>
<a href="MONTHCALENDAR_CONTROL.htm#SETSELECTEDDATERANGE">setSelectedDateRange</a>  [<i><code>proc</code></i>]  Set the selected range in a <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> Control.<br>
<a href="VALUE.htm#SETSELECTEDTEXT">setSelectedText</a>  [<i><code>proc</code></i>]  Replaces the selected text in <em>object</em> with <em>text</em>.<br>
<a href="RICHEDIT_CONTROL.htm#SETSELECTION">setSelection</a>  [<i><code>proc</code></i>]  An alias for <a href="LIST_CONTROL.htm#SETINDEX">setIndex</a><br>
<a href="LIST_CONTROL.htm#SETSELECTION">setSelection</a>  [<i><code>proc</code></i>]  An alias for <a href="LIST_CONTROL.htm#SETINDEX">setIndex</a><br>
<a href="FONT.htm#SETSTARTUPFONT">setStartupFont</a>  [<i><code>proc</code></i>] Establishes the default font to use when creating a window or control.<br>
<a href="MEMORY_MANAGEMENT.htm#SETSTARTWITHSIZE">setStartWithSize</a>  [<i><code>proc</code></i>] Indicates to w32to_memory() that, when filling a structure of this type, its size should be plugged in as the first field.<br>
<a href="ATTRIBUTE.htm#SETSUBFIELD">setSubFields</a>  [<i><code>proc</code></i>] Defines the sub-fields, or panels, in a status bar.<br>
<a href="CONTROL.htm#SETTABCODE">setTabCodes</a>  [<i><code>func</code></i>]  Sets the list of tabbing keys to <em>newcodes</em> <br> if it is valid.<br>
<a href="RICHEDIT_CONTROL.htm#SETTABENABLED">setTabEnabled</a>  [<i><code>func</code></i>] Possibly sets the flag which says whether a (Rich)Edit control uses Ctrl-Tab for tabbing<br>
<a href="ATTRIBUTE.htm#SETTABIMAGE">setTabImage</a>  [<i><code>func</code></i>] Possibly sets the image associated to a tab item and returns index of previous one.<br>
<a href="RICHEDIT_CONTROL.htm#SETTAB">setTabs</a>  [<i><code>proc</code></i>]  Change tab stops in a <a href="CONTROL.htm#RICHEDIT">RichEdit</a> Control.<br>
<a href="LIST_CONTROL.htm#SETTAB">setTabs</a>  [<i><code>proc</code></i>]  Set/change tab stops in a <a href="CONTROL.htm#LIST">List</a> or <a href="CONTROL.htm#SORTEDLIST">SortedList</a> Control.<br>
<a href="ATTRIBUTE.htm#SETTABSTOP">setTabStops</a>  [<i><code>func</code></i>] This possibly establishes the controls in a containing control that get tabbing focus.<br>
<a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>  [<i><code>proc</code></i>] This alters the 'user data' of the specified mousetrap area in the window.<br>
<a href="VALUE.htm#SETTEXT">setText</a>  [<i><code>proc</code></i>]  Set the text in <em>pID</em> control.<br>
<a href="FONT.htm#SETTEXTALIGN">setTextAlign</a>  [<i><code>proc</code></i>] Set the font alignment to use when printing text.<br>
<a href="FONT.htm#SETTEXTCOLOR">setTextColor</a>  [<i><code>proc</code></i>]  Set the text color to use when drawing text in <em>window</em>.<br>
<a href="LOW_LEVEL_ROUTINE.htm#SETTIMER">setTimer</a>  [<i><code>proc</code></i>]  Start a timer ticking in <em>window</em>.<br>
<a href="MONTHCALENDAR_CONTROL.htm#SETTODAY">setToday</a>  [<i><code>proc</code></i>]  Set the 'today' date in the MonthCalendar control <em>id</em><br>
<a href="CONTROL.htm#SETTOOLBARSIZE">setToolBarSize</a>  [<i><code>proc</code></i>] Set one or more size properties of a ToolBar or FlatToolBar.<br>
<a href="SYSTEM_ATTRIBUTE.htm#SETTOOLTIPTIMING">setTooltipTiming</a>  [<i><code>func</code></i>]  Possibly sets the timings for all the tooltips the tooltip conrol <em>id</em> manages.<br>
<a href="XPM.htm#SETTRANSPARENTCOLOR">setTransparentColor</a>  [<i><code>proc</code></i>] Defines what the transparent color is to be.<br>
<a href="TREEVIEW_CONTROL.htm#SETTVIMAGE">setTVImages</a>  [<i><code>proc</code></i>] Sets the images associated with a TreeView item.<br>
<a href="TREEVIEW_CONTROL.htm#SETTVTEXT">setTVText</a>  [<i><code>proc</code></i>] Sets the text associated with a TreeView item.<br>
<a href="MISCELLANEOU.htm#SETUSERLANGUAGE">setUserLanguage</a>  [<i><code>func</code></i>]  Defines or returns the language category that is used by <a href="MISCELLANEOU.htm#USETEXT">UseText</a><br>
<a href="ATTRIBUTE.htm#SETUSERPROPERTY">setUserProperty</a>  [<i><code>proc</code></i>]  Stores data into a user defined property for this control <em>id</em>.<br>
<a href="ATTRIBUTE.htm#SETVISIBLE">setVisible</a>  [<i><code>proc</code></i>]  Make <em>id</em> visible or invisible.<br>
<a href="SCROLL_CONTROL.htm#SETVSCROLLPO">setVScrollPos</a>  [<i><code>proc</code></i>]  Sets the value of a window's vertical <em>scroll</em>.<br>
<a href="ERROR.htm#SETWARNING">setWarning</a>  [<i><code>proc</code></i>] Shows or Hides warning messages from user.<br>
<a href="ATTRIBUTE.htm#SETWINDOWBACKCOLOR">setWindowBackColor</a>  [<i><code>proc</code></i>]  Sets the background of <em>id</em> to <em>color</em>.<br>
<a href="ATTRIBUTE.htm#SETWINDOWRECT">setWindowRect</a>  [<i><code>proc</code></i>]  Sets the dimensions of window <em>id</em>.<br>
<a href="SCROLL_CONTROL.htm#SETWINDOWSCROLLRANGE">setWindowScrollRange</a>  [<i><code>proc</code></i>] Set range of window scrollbar or normal scrollbar .<br>
<a href="EVENT.htm#SETWINMSGHANDLER">setWinMsgHandler</a>  [<i><code>proc</code></i>] Sets a user defined (raw) windows message handler.<br>
<a href="CONSTANT.htm#SHELL32">shell32</a>  [<i><code>const</code></i>] Windows Library: Shell Extensions<br>
<a href="UTILITIE.htm#SHELLEXECUTE">shellExecute</a>  [<i><code>proc</code></i>] Launch a Windows application<br>
<a href="UTILITIE.htm#SHELLEXECUTEEX">shellExecuteEx</a>  [<i><code>func</code></i>] Launch a Windows application<br>
<a href="FONT.htm#SHOWCHAR">showChars</a>  [<i><code>proc</code></i>]  Determines if <a href="FONT.htm#WPRINT">wPrint</a> displays characters or numbers<br>
<a href="CONTROL.htm#SHOWCONTROLSET">showControlSet</a>  [<i><code>proc</code></i>] Makes visible all the controls in the identified set, and hides the previously shown set.<br>
<a href="VALUE.htm#SHOWMESSAGE">showMessage</a>  [<i><code>proc</code></i>]  Displays <em>Message</em> in a Statusbar<br>
<a href="ATTRIBUTE.htm#SHOWWINDOW">showWindow</a>  [<i><code>proc</code></i>]  Shows a window according to the <em>style</em><br>
<a href="CONTROL.htm#SIMPLECOMBO">SimpleCombo</a>  [<i><code>const</code></i>] Simple combo box control.<br>
<a href="ATTRIBUTE.htm#SIZECONTROL">sizeControls</a>  [<i><code>proc</code></i>] Set the size for a set of controls.<br>
<a href="MENU.htm#SKIPF10">skipF10</a>  [<i><code>func</code></i>] Possibly sets whether or not F10 sets focus on the menubar<br>
<a href="CONTROL.htm#SORTEDCOMBO">SortedCombo</a>  [<i><code>const</code></i>] Sorted combo box control.<br>
<a href="CONTROL.htm#SORTEDLIST">SortedList</a>  [<i><code>const</code></i>] Sorted list control.<br>
<a href="GRAPHIC.htm#SPLIT_RGB">split_rgb</a>  [<i><code>func</code></i>] Convert a color into a {red, green, blue}.<br>
<a href="EVENT.htm#STARTAPP">startApp</a>  [<i><code>proc</code></i>] Start the application running.<br>
<a href="PRINTING.htm#STARTDOC">startDoc</a>  [<i><code>func</code></i>]  Starts a new document on <a href="CONTROL.htm#PRINTER">Printer</a>.<br>
<a href="PRINTING.htm#STARTPAGE">startPage</a>  [<i><code>func</code></i>] Prepares the printer to begin a new page.<br>
<a href="CONTROL.htm#STATUSBAR">StatusBar</a>  [<i><code>const</code></i>] Window status bar control.<br>
<a href="GRAPHIC.htm#STRETCHBLT">stretchBlt</a>  [<i><code>proc</code></i>] Copy image (or partial image) from source to destination, changing its size as you go.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_CHARFORMAT">struct_CHARFORMAT</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_CHARRANGE">struct_CHARRANGE</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_EDITSTREAM">struct_EDITSTREAM</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_FINDREPLACE">struct_FINDREPLACE</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_FINDTEXTEX">struct_FINDTEXTEX</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_GETTEXTEX">struct_GETTEXTEX</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_LVBKIMAGE">struct_LVBKIMAGE</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="LISTVIEW_CONTROL.htm#STRUCT_LVCOLUMN">struct_LVCOLUMN</a>  [<i><code>func</code></i>] Allocates RAM for a LVCOLUMN structure and initialises it.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_LVFINDINFO">struct_LVFINDINFO</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_LVITEM">struct_LVITEM</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_MENUITEMINFO">struct_MENUITEMINFO</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_PARAFORMAT">struct_PARAFORMAT</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_REBARBANDINFO">struct_REBARBANDINFO</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_SYSTEMTIME">struct_SYSTEMTIME</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_TEXTRANGE">struct_TEXTRANGE</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_TOOLINFO">struct_TOOLINFO</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_TVHITTESTINFO">struct_TVHITTESTINFO</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_TVINSERTSTRUCT">struct_TVINSERTSTRUCT</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#STRUCT_TVITEM">struct_TVITEM</a>  [<i><code>func</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>()<br>
<a href="EVENT.htm#SUBCLASSCONTROL">subClassControl</a>  [<i><code>func</code></i>] Used to access Windows created controls as if they were win32lib controls.<br>
<a href="SUPPORT_ROUTINE.htm#SUPPORT_ROUTINE">Support Routines</a> <br>
<a href="SYSTEM_ATTRIBUTE.htm#SYSTEM_ATTRIBUTE">System Attributes</a> <br>
<a href="CONTROL.htm#TABCONTROL">TabControl</a>  [<i><code>const</code></i>] Tab Control.<br>
<a href="CONTROL.htm#TABITEM">TabItem</a>  [<i><code>const</code></i>] Tab on a TabControl.<br>
<a href="CONTROL.htm#TAB_DIRECTION">tab_direction</a>  [<i><code>proc</code></i>] Moves focus ahead or back to next available focus item<br>
<a href="TEXT.htm#TEXT">Text</a> <br>
<a href="TEXT.htm#TEXTOUT">textOut</a>  [<i><code>proc</code></i>] Writes text to a control.<br>
<a href="TEXT.htm#TEXTRECT">textRect</a>  [<i><code>func</code></i>] Calculates the RECT structure need to draw all the text.<br>
<a href="GRAPHIC.htm#TEXTTOBITMAP">textToBitmap</a>  [<i><code>func</code></i>] Converts a sequence of text into a monochrome bitmap.<br>
<a href="CONTROL.htm#TOGGLEBUTTON">ToggleButton</a>  [<i><code>const</code></i>] Toggle button control.<br>
<a href="TREEVIEW_CONTROL.htm#TOGGLEITEM">toggleItem</a>  [<i><code>proc</code></i>]  Shows or Hides the children of a single <a href="CONTROL.htm#TREEVIEW">TreeView</a> Item<br>
<a href="CONTROL.htm#TOGGLEPICTURE">TogglePicture</a>  [<i><code>const</code></i>] Toggle button with graphic control.<br>
<a href="CONTROL.htm#TOOLBAR">ToolBar</a>  [<i><code>const</code></i>] Window toolbar control.<br>
<a href="CONTROL.htm#TOOLTIP">ToolTip</a>  [<i><code>const</code></i>] Creates a ToolTip control.<br>
<a href="RESOURCE.htm#TRACKOBJECT">trackObject</a>  [<i><code>proc</code></i>] Tracks an object as a held resource.<br>
<a href="GRAPHIC.htm#TRANSBLT">transBlt</a>  [<i><code>proc</code></i>] Copy full image from source to destination, with transparency.<br>
<a href="CONTROL.htm#TREEVIEW">TreeView</a>  [<i><code>const</code></i>] TreeView<br>
<a href="TREEVIEW_CONTROL.htm#TREEVIEW_CONTROL">TreeView Control</a> <br>
<a href="CONTROL.htm#TRICHECKBOX">TriCheckBox</a>  [<i><code>const</code></i>] Three state checkbox control.<br>
<a href="TYPE.htm#TYPE">Types</a> <br>
<a href="EDIT_CONTROL.htm#UNDO">undo</a>  [<i><code>proc</code></i>]  Undo last edit in <em>object</em>.<br>
<a href="MOUSETRAP.htm#UPDATEMOUSETRAP">updateMouseTrap</a>  [<i><code>proc</code></i>] This changes the bounding rectangle for a mousetrap.<br>
<a href="CONTROL.htm#UPDOWN">UpDown</a>  [<i><code>const</code></i>] UpDown<br>
<a href="UPDOWN_CONTROL.htm#UPDOWN_CONTROL">Updown Control</a> <br>
<a href="FONT.htm#USELOGICALRESOLUTION">useLogicalResolution</a>  [<i><code>func</code></i>] Possibly sets the flag that determines if logical font resolution is used or not.<br>
<a href="CONSTANT.htm#USER32">user32</a>  [<i><code>const</code></i>] Windows Library: User Interface<br>
<a href="MISCELLANEOU.htm#USETEXT">UseText</a>  [<i><code>func</code></i>]  Fetches the text associated with <em>pTextCode</em><br>
<a href="UTILITIE.htm#UTILITIE">Utilities</a> <br>
<a href="SYSTEM_ATTRIBUTE.htm#VALIDID">validId</a>  [<i><code>func</code></i>] Tests to see if the specified id is a valid one.<br>
<a href="VALUE.htm#VALUE">Values</a> <br>
<a href="CONTROL.htm#VSCROLL">VScroll</a>  [<i><code>const</code></i>] Vertical scrollbar control.<br>
<a href="CONTROL.htm#VTRACKBAR">VTrackBar</a>  [<i><code>const</code></i>] Vertical track bar control.<br>
<a href="SUPPORT_ROUTINE.htm#W32AB">w32abs</a>  [<i><code>func</code></i>] Absolute value.<br>
<a href="MEMORY_MANAGEMENT.htm#W32ACQUIRE_HANDLE">w32acquire_handle</a>  [<i><code>func</code></i>] Gets a Windows memory handle to memory of the requested size.<br>
<a href="MEMORY_MANAGEMENT.htm#W32ACQUIRE_MEM">w32acquire_mem</a>  [<i><code>func</code></i>] Allocate memory for structure, and initialize to zero.<br>
<a href="MEMORY_MANAGEMENT.htm#W32ADDRES">w32address</a>  [<i><code>func</code></i>]  Get address of <em>field</em> in structure.<br>
<a href="LIST_CONTROL.htm#W32ALLITEM">w32AllItems</a>  [<i><code>const</code></i>] This signifies that all items are to be deleted.<br>
<a href="MEMORY_MANAGEMENT.htm#W32ALLOT">w32allot</a>  [<i><code>func</code></i>] Allocate space in structure for a new field.<br>
<a href="MEMORY_MANAGEMENT.htm#W32ALLOTTED_BUFFER">w32allotted_buffer</a>  [<i><code>func</code></i>]  Returns a modified field so as to <a href="MEMORY_MANAGEMENT.htm#W32FETCH">w32fetch</a>() the address of the supplied buffer<br>
<a href="MEMORY_MANAGEMENT.htm#W32ALLOTTED_HANDLE">w32allotted_handle</a>  [<i><code>func</code></i>] Returns the address of the supplied handle, but with fetch instructions<br>
<a href="MEMORY_MANAGEMENT.htm#W32ALLOTTED_LENGTH">w32allotted_length</a>  [<i><code>func</code></i>]  Returns a modified field so as to <a href="MEMORY_MANAGEMENT.htm#W32FETCH">w32fetch</a>() the length of the supplied buffer<br>
<a href="MEMORY_MANAGEMENT.htm#W32ALLOTTED_SIZE">w32allotted_size</a>  [<i><code>func</code></i>] Return allocate size of structure, and reset for new structure.<br>
<a href="MEMORY_MANAGEMENT.htm#W32ALLOTTED_SOFAR">w32allotted_sofar</a>  [<i><code>func</code></i>] Return size allotted sofar to the structure<br>
<a href="CONSTANT.htm#W32ALTEDGE">w32AltEdge</a>  [<i><code>const</code></i>] Specifies the alternate edge required when creating or moving a control.<br>
<a href="SUPPORT_ROUTINE.htm#W32AVERAGE">w32average</a>  [<i><code>func</code></i>]  Computes the weighted average of <em>data</em> using the weight(s) <em>weight</em>.<br>
<a href="UTILITIE.htm#W32BOUND">w32bounds</a>  [<i><code>func</code></i>]  Returns index(es) or value(s) of the minimal/maximal element in a sequence <br>
<a href="MEMORY_MANAGEMENT.htm#W32BUFFER_ADDRES">w32buffer_address</a>  [<i><code>func</code></i>]  Returns the address of the buffer, while <a href="MEMORY_MANAGEMENT.htm#W32FETCH">w32fetch</a> would return the string stored there.<br>
<a href="MEMORY_MANAGEMENT.htm#W32BUFFER_LENGTH">w32buffer_length</a>  [<i><code>func</code></i>] Returns the stored length of the buffer.<br>
<a href="ATTRIBUTE.htm#W32COLORNAME">w32ColorNames</a>  [<i><code>const</code></i>] List of all recognised color names.<br>
<a href="ATTRIBUTE.htm#W32COLORVALUE">w32ColorValues</a>  [<i><code>const</code></i>]  List of all known color values, in the same order as <a href="ATTRIBUTE.htm#W32COLORNAME">w32ColorNames</a>.<br>
<a href="DEFINING_CONTROL.htm#W32CONTROLNAME">w32ControlNames</a>  [<i><code>const</code></i>] Holds the names of recognised controls.<br>
<a href="DEFINING_CONTROL.htm#W32CONTROLTYPE">w32ControlTypes</a>  [<i><code>const</code></i>]  Holds the values of recognised controls, in the same order as <a href="DEFINING_CONTROL.htm#W32CONTROLNAME">w32ControlNames</a>.<br>
<a href="MEMORY_MANAGEMENT.htm#W32COPY_FIELD">w32copy_field</a>  [<i><code>proc</code></i>]  Copies contents of the field of the structure at <em>origin</em> described by <em>s</em> to <em>struct</em>.<br>
<a href="MEMORY_MANAGEMENT.htm#W32COPY_STRUCT">w32copy_struct</a>  [<i><code>proc</code></i>]  Copies the structure whose base address is <em>origin</em> to <em>struct</em>, its type being <em>id</em>.<br>
<a href="SUPPORT_ROUTINE.htm#W32CTYPE">w32CType</a>  [<i><code>func</code></i>] Tests a character to see if it 'belongs' to a specified CharType set.<br>
<a href="MEMORY_MANAGEMENT.htm#W32DEFINE_THIS_STRUCT">w32define_this_struct</a>  [<i><code>func</code></i>] Returns an identifier for the currently defined structure at the current point.<br>
<a href="MEMORY_MANAGEMENT.htm#W32DEFINE_UNION">w32define_union</a>  [<i><code>func</code></i>]  Defines a union structure: the structure is any of the ones given in <em>fields</em>.<br>
<a href="CONSTANT.htm#W32EDGE">w32Edge</a>  [<i><code>const</code></i>] Specifies the extreme edge required when creating or moving a control.<br>
<a href="DEGRADED_ROUTINES_AND_CONSTANT.htm#W32ELEMADDR">w32ElemAddr</a>  [<i><code>proc</code></i>]  See <a href="MEMORY_MANAGEMENT.htm#W32ADDRES">w32address</a>()<br>
<a href="SUPPORT_ROUTINE.htm#W32ENCODE">w32Encode</a>  [<i><code>func</code></i>] This routine transforms a string into an encoded form<br>
<a href="EVENT.htm#W32EVENTCODE">w32EventCodes</a>  [<i><code>const</code></i>]  List of all recognised event codes, in the same order as <a href="EVENT.htm#W32EVENTNAME">w32EventNames</a>.<br>
<a href="EVENT.htm#W32EVENTNAME">w32EventNames</a>  [<i><code>const</code></i>] List of all recognised event names, without the "w32H" prefix.<br>
<a href="SUPPORT_ROUTINE.htm#W32EXTRACT_FORMAT">w32extract_formats</a>  [<i><code>func</code></i>] Determines all substrings of i s which are format specifiers<br>
<a href="CONSTANT.htm#W32FALSE">w32False</a>  [<i><code>const</code></i>] The value for a boolean FALSE.<br>
<a href="MEMORY_MANAGEMENT.htm#W32FETCH">w32fetch</a>  [<i><code>func</code></i>] Fetch field from structure.<br>
<a href="FILE_OPERATION.htm#W32FILEOPEN">w32FileOpen</a>  [<i><code>func</code></i>] Search the set 'searchpaths' for the file then opens it.<br>
<a href="FILE_OPERATION.htm#W32FINDFILE">w32FindFile</a>  [<i><code>func</code></i>] Search the set 'searchpaths' for the file and returns its path specification.<br>
<a href="SUPPORT_ROUTINE.htm#W32FINDKEY">w32findKey</a>  [<i><code>func</code></i>]  Find the element in <em>list</em> that has <em>key</em> as its first element.<br>
<a href="SUPPORT_ROUTINE.htm#W32FINDKEYEX">w32findKeyEx</a>  [<i><code>func</code></i>] Find key in list using the depth indicated in element.<br>
<a href="MEMORY_MANAGEMENT.htm#W32FROM_MEMORY">w32from_memory</a>  [<i><code>func</code></i>] Returns the fields of a structure.<br>
<a href="MEMORY_MANAGEMENT.htm#W32FROM_MEMORYEX">w32from_memoryEx</a>  [<i><code>func</code></i>] Returns the fields of a structure.<br>
<a href="LOW_LEVEL_ROUTINE.htm#W32FUNC">w32Func</a>  [<i><code>func</code></i>] Invoke a Windows function.<br>
<a href="SUPPORT_ROUTINE.htm#W32GETCTYPE">w32GetCType</a>  [<i><code>func</code></i>] Gets the CharType for the specified character(s)<br>
<a href="SUPPORT_ROUTINE.htm#W32GET_BIT">w32get_bits</a>  [<i><code>func</code></i>]  Does the reverse of <a href="SUPPORT_ROUTINE.htm#W32OR_ALL">w32or_all</a>() in that it gets all the bit values from an atom.<br>
<a href="EVENT.htm#W32HACTIVATE">w32HActivate</a>  [<i><code>const</code></i>] Occurs for Windows only and after the window is opened.<br>
<a href="EVENT.htm#W32HAFTEREVENT">w32HAfterEvent</a>  [<i><code>const</code></i>] Occurs after normal Windows processing of an event (any type).<br>
<a href="MEMORY_MANAGEMENT.htm#W32HANDLE_TO_MEMORY">w32handle_to_memory</a>  [<i><code>func</code></i>] Gives current task exclusive access to the referenced memory block.<br>
<a href="EVENT.htm#W32HBREAK">w32HBreak</a>  [<i><code>const</code></i>] Invoked whenever the Ctrl-Break key is pressed.<br>
<a href="EVENT.htm#W32HCHANGE">w32HChange</a>  [<i><code>const</code></i>] Selection or Value in a control is changed.<br>
<a href="EVENT.htm#W32HCLICK">w32HClick</a>  [<i><code>const</code></i>] Invoked when the left mouse button is 'clicked' or a Button control is used.<br>
<a href="EVENT.htm#W32HCLOSE">w32HClose</a>  [<i><code>const</code></i>]  A <a href="CONTROL.htm#WINDOW">Window</a> is closed.<br>
<a href="EVENT.htm#W32HCLOSEUP">w32HCloseUp</a>  [<i><code>const</code></i>] The dropdown portion of a combobox has just been closed, or the menu was just closed.<br>
<a href="EVENT.htm#W32HDATACHANGE">w32HDataChange</a>  [<i><code>const</code></i>] Value in a List or a Combo's list has changed.<br>
<a href="EVENT.htm#W32HDESTROY">w32HDestroy</a>  [<i><code>const</code></i>] The control is about to be destroyed.<br>
<a href="EVENT.htm#W32HDRAGANDDROP">w32HDragAndDrop</a>  [<i><code>const</code></i>] Something has been dragged onto the control or window.<br>
<a href="EVENT.htm#W32HDROPDOWN">w32HDropDown</a>  [<i><code>const</code></i>] The dropdown portion of a combobox is about to be displayed, or the menu is about to be displayed..<br>
<a href="EVENT.htm#W32HEVENT">w32HEvent</a>  [<i><code>const</code></i>] An event (any type) has occured.<br>
<a href="EVENT.htm#W32HGOTFOCU">w32HGotFocus</a>  [<i><code>const</code></i>]  A <a href="CONTROL.htm#CONTROL">control</a> (or <a href="CONTROL.htm#WINDOW">Window</a>) receives focus.<br>
<a href="EVENT.htm#W32HIDLE">w32HIdle</a>  [<i><code>const</code></i>] Invoked whenever the application is not processing Windows messages.<br>
<a href="SUPPORT_ROUTINE.htm#W32HI_WORD">w32hi_word</a>  [<i><code>func</code></i>]  returns the high 16 bits of <em>pData</em><br>
<a href="EVENT.htm#W32HKEYBOARD">w32HKeyboard</a>  [<i><code>const</code></i>] Occurs when keys are held down and about to be released.<br>
<a href="EVENT.htm#W32HKEYDOWN">w32HKeyDown</a>  [<i><code>const</code></i>] Key is pressed.<br>
<a href="EVENT.htm#W32HKEYPRES">w32HKeyPress</a>  [<i><code>const</code></i>] "Printable" key is pressed.<br>
<a href="EVENT.htm#W32HKEYUP">w32HKeyUp</a>  [<i><code>const</code></i>] Key is released.<br>
<a href="EVENT.htm#W32HLOSTFOCU">w32HLostFocus</a>  [<i><code>const</code></i>]  A <a href="CONTROL.htm#WINDOW">Window</a> or <a href="CONTROL.htm#CONTROL">control</a> loses focus.<br>
<a href="EVENT.htm#W32HMOUSE">w32HMouse</a>  [<i><code>const</code></i>] Event triggered when a mouse action takes place.<br>
<a href="EVENT.htm#W32HMOUSETRAP">w32HMouseTrap</a>  [<i><code>const</code></i>]  Event triggered when a mouse action takes place inside a defined <a href="MOUSETRAP.htm#MOUSETRAP">MouseTrap</a> for a control.<br>
<a href="EVENT.htm#W32HNOTIFY">w32HNotify</a>  [<i><code>const</code></i>] A control is forwarding a notification event.<br>
<a href="EVENT.htm#W32HOPEN">w32HOpen</a>  [<i><code>const</code></i>]  A <a href="CONTROL.htm#WINDOW">Window</a> is opened.<br>
<a href="EVENT.htm#W32HPAINT">w32HPaint</a>  [<i><code>const</code></i>]  A portion or all of a <a href="CONTROL.htm#WINDOW">Window</a> needs to be redrawn.<br>
<a href="EVENT.htm#W32HPAUSE">w32HPause</a>  [<i><code>const</code></i>] Invoked whenever the Pause key is pressed.<br>
<a href="EVENT.htm#W32HRESIZE">w32HResize</a>  [<i><code>const</code></i>]  A <a href="CONTROL.htm#WINDOW">Window</a> has been resized.<br>
<a href="EVENT.htm#W32HSCROLL">w32HScroll</a>  [<i><code>const</code></i>] Triggered when scrollbar value has changed, and when user has stopped scrolling.<br>
<a href="EVENT.htm#W32HTIMER">w32HTimer</a>  [<i><code>const</code></i>] A timer is triggered.<br>
<a href="SUPPORT_ROUTINE.htm#W32IFF">w32iff </a>  [<i><code>func</code></i>] Used to embed an 'if' test inside an expression.<br>
<a href="SUPPORT_ROUTINE.htm#W32INDEX">w32index</a>  [<i><code>func</code></i>]  Returns the list of positions of items in <em>s</em>.<br>
<a href="SUPPORT_ROUTINE.htm#W32INDEX_BY">w32index_by</a>  [<i><code>func</code></i>]  Indexes <em>s</em> using the field number <em>field</em>.<br>
<a href="SUPPORT_ROUTINE.htm#W32INSERTELEMENT">w32insertElement</a>  [<i><code>func</code></i>]  Inserts the <em>object</em> into the <em>list</em> at position <em>pos</em><br>
<a href="SUPPORT_ROUTINE.htm#W32JOIN">w32join</a>  [<i><code>func</code></i>] Builds a string by concatenating itmes in substrings, separated by delimiters.<br>
<a href="CONSTANT.htm#W32KH_SETFOCU">w32KH_SetFocus</a>  [<i><code>const</code></i>] Used as a return value by w32HKeyDown handlers to indicate that the focus needs to be changed.<br>
<a href="MEMORY_MANAGEMENT.htm#W32LLSETABORT">w32llSetAbort</a>  [<i><code>func</code></i>] Possibly sets the routine id of an Abort routine.<br>
<a href="SUPPORT_ROUTINE.htm#W32LOOKUP">w32lookup</a>  [<i><code>func</code></i>] Returns the corresponding element.<br>
<a href="SUPPORT_ROUTINE.htm#W32LO_WORD">w32lo_word</a>  [<i><code>func</code></i>]  returns the low-16 bits of <em>pData</em><br>
<a href="CONSTANT.htm#W32LV_ENDSORTING">w32LV_EndSorting</a>  [<i><code>const</code></i>]  Used by <a href="CONTROL.htm#LISTVIEW">ListView</a> controls that have a custom sorting routine.<br>
<a href="CONSTANT.htm#W32LV_STARTSORTING">w32LV_StartSorting</a>  [<i><code>const</code></i>]  Used by <a href="CONTROL.htm#LISTVIEW">ListView</a> controls that have a custom sorting routine.<br>
<a href="MEMORY_MANAGEMENT.htm#W32MANAGE_MEM">w32manage_mem</a>  [<i><code>func</code></i>] Records an acquired memory for garbage collection.<br>
<a href="MISCELLANEOU.htm#W32MAXWIDTH">w32MaxWidth</a>  [<i><code>func</code></i>]  Computes the maximum width of elements of <em>pData</em>.<br>
<a href="MISCELLANEOU.htm#W32MINSEQUENCESIZE">w32MinSequenceSize</a>  [<i><code>func</code></i>]  Pads <em>pList</em> to the right until its length reaches <em>pMinSize</em> using <em>pNewData</em> as filler.<br>
<a href="CONSTANT.htm#W32MSGNUM">w32MsgNum</a>  [<i><code>const</code></i>] This is the recommended starting point for user defined error codes.<br>
<a href="MEMORY_MANAGEMENT.htm#W32NEW_MEMSET">w32new_memset</a>  [<i><code>func</code></i>] Allocates a unique id for a memory set.<br>
<a href="SUPPORT_ROUTINE.htm#W32ORDERED_FIND">w32ordered_find</a>  [<i><code>func</code></i>]  Uses a binary tree search to find <em>x</em> in <em>s</em>, possibly<br>
<a href="SUPPORT_ROUTINE.htm#W32OR_ALL">w32or_all</a>  [<i><code>func</code></i>]  Calculates a binary OR against each element in <a href="#PDATA">pData</a><br>
<a href="SUPPORT_ROUTINE.htm#W32PACK_WORD">w32pack_word</a>  [<i><code>func</code></i>] Packs values into word.<br>
<a href="CONSTANT.htm#W32PB_BITMAP">w32PB_BITMAP</a>  [<i><code>const</code></i>]  Used when creating a <a href="CONTROL.htm#PICTUREBUTTON">PictureButton</a> and <a href="CONTROL.htm#TOGGLEBUTTON">ToggleButton</a>.<br>
<a href="CONSTANT.htm#W32PB_ICON">w32PB_ICON</a>  [<i><code>const</code></i>]  Used when creating a <a href="CONTROL.htm#PICTUREBUTTON">PictureButton</a> and <a href="CONTROL.htm#TOGGLEBUTTON">ToggleButton</a>.<br>
<a href="MEMORY_MANAGEMENT.htm#W32PEEK2">w32peek2</a>  [<i><code>func</code></i>] Retrieves a sequence of double byte encoded characters as a regular sequence<br>
<a href="MEMORY_MANAGEMENT.htm#W32PEEK_STRING">w32peek_string</a>  [<i><code>func</code></i>] Get sequence from address holding C-style string.<br>
<a href="MEMORY_MANAGEMENT.htm#W32PEEK_STRING16">w32peek_string16</a>  [<i><code>func</code></i>]  Returns a 0000 terminated DBCS encoded string starting at <em>addr</em>.<br>
<a href="MEMORY_MANAGEMENT.htm#W32POKE_WORD">w32poke_words</a>  [<i><code>proc</code></i>]  Poke one or more words at <em>at</em>.<br>
<a href="LOW_LEVEL_ROUTINE.htm#W32PROC">w32Proc</a>  [<i><code>proc</code></i>] Invoke a Windows procedure.<br>
<a href="MISCELLANEOU.htm#W32RAND32">w32rand32</a>  [<i><code>func</code></i>] <br>
<a href="MEMORY_MANAGEMENT.htm#W32REALISE">w32realise</a>  [<i><code>func</code></i>] Rebuilds a contiguous memory structure, possibly discarding virtual info<br>
<a href="SUPPORT_ROUTINE.htm#W32RECTANGLE_DELTA">w32rectangle_delta</a>  [<i><code>func</code></i>] Determines the difference and intersection between two rectangles<br>
<a href="MEMORY_MANAGEMENT.htm#W32RELEASE_HANDLE">w32release_handle</a>  [<i><code>proc</code></i>] Releases the referenced memory block, and optionally frees it.<br>
<a href="MEMORY_MANAGEMENT.htm#W32RELEASE_MEM">w32release_mem</a>  [<i><code>proc</code></i>]  Returns the memory allocated by <a href="MEMORY_MANAGEMENT.htm#W32ACQUIRE_MEM">w32acquire_mem</a>() back to the system.<br>
<a href="SUPPORT_ROUTINE.htm#W32REMAINDER">w32remainder</a>  [<i><code>func</code></i>]  Ensures that the result has the sign of <em>b</em>, contrary to remainder().<br>
<a href="SUPPORT_ROUTINE.htm#W32REMOVEINDEX">w32removeIndex</a>  [<i><code>func</code></i>]  Remove the element at position <em>index</em> from the sequence <em>list</em><br>
<a href="SUPPORT_ROUTINE.htm#W32REMOVEITEM">w32removeItem</a>  [<i><code>func</code></i>]  Removes <em>item</em> from the <em>list</em>, if it is in the list.<br>
<a href="SUPPORT_ROUTINE.htm#W32REPLACEITEM">w32replaceItem</a>  [<i><code>func</code></i>]  Replaces all occurances of <em>pOld</em> with <em>pNew</em><br>
<a href="SUPPORT_ROUTINE.htm#W32ROUND">w32round</a>  [<i><code>func</code></i>]  Rounds <em>a</em>, or all the atoms in the sequence <em>a</em>, to some multiple of <em>b</em>.<br>
<a href="SUPPORT_ROUTINE.htm#W32ROUTINE_ID">w32routine_id</a>  [<i><code>func</code></i>]  Returns the routine id for the registered routine <em>pRoutineName</em><br>
<a href="SUPPORT_ROUTINE.htm#W32SETCTYPE">w32SetCType</a>  [<i><code>proc</code></i>]  Sets one or more character types used by <a href="SUPPORT_ROUTINE.htm#W32CTYPE">w32CType</a> and <a href="SUPPORT_ROUTINE.htm#W32GETCTYPE">w32GetCType</a><br>
<a href="MEMORY_MANAGEMENT.htm#W32SET_MEMORY">w32set_memory</a>  [<i><code>proc</code></i>]  Performs the same function as <a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>(), but stores data at address <em>struct</em>.<br>
<a href="SUPPORT_ROUTINE.htm#W32SHORTINT">w32shortInt</a>  [<i><code>func</code></i>] Converts a number into a 16-bit signed integer<br>
<a href="SUPPORT_ROUTINE.htm#W32SIGNED_WORD">w32signed_word</a>  [<i><code>func</code></i>]  Converts <em>a</em> into a signed 16-bit integer.<br>
<a href="UTILITIE.htm#W32SLEEP">w32Sleep</a>  [<i><code>proc</code></i>]  Puts current thread to sleep for <em>milliseconds</em> milliseconds, if another OS thread is ready to run.<br>
<a href="MEMORY_MANAGEMENT.htm#W32SPECIALISE">w32specialise</a>  [<i><code>func</code></i>] Returns a structure field descriptor that can be translated into an actual variant of a union.<br>
<a href="SUPPORT_ROUTINE.htm#W32SPLIT">w32split</a>  [<i><code>func</code></i>] Returns the undelimited substrings<br>
<a href="EVENT.htm#W32START">w32Start </a>  [<i><code>incl</code></i>]  This is an optional <em>include</em> file. It defines a default application callback routine<br>
<a href="MEMORY_MANAGEMENT.htm#W32STORE">w32store</a>  [<i><code>proc</code></i>] Store a value into a structure.<br>
<a href="TYPE.htm#W32STRING">w32string</a>  [<i><code>type</code></i>] Implements an ASCII string.<br>
<a href="SUPPORT_ROUTINE.htm#W32TEXTTONUMBER">w32TextToNumber</a>  [<i><code>func</code></i>] This converts the text into a number.<br>
<a href="MISCELLANEOU.htm#W32TOSTRING">w32ToString</a>  [<i><code>func</code></i>]  Assembles a sequence from the substrings in <em>pData</em>, separated by commas.<br>
<a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORY">w32to_memory</a>  [<i><code>func</code></i>] Initialises memory structiure of given type with supplied data.<br>
<a href="MEMORY_MANAGEMENT.htm#W32TO_MEMORYEX">w32to_memoryEx</a>  [<i><code>func</code></i>] Initialises memory structiure of given type with supplied data.<br>
<a href="SUPPORT_ROUTINE.htm#W32TO_STRING">w32to_string</a>  [<i><code>func</code></i>] Converts the parameter to a string repesentation of its value.<br>
<a href="SUPPORT_ROUTINE.htm#W32TRIM">w32trim</a>  [<i><code>func</code></i>]  Removes any whitespace chars from both ends of <em>pSource</em><br>
<a href="SUPPORT_ROUTINE.htm#W32TRIM_LEFT">w32trim_left</a>  [<i><code>func</code></i>]  Removes any whitespace chars from the beginning of <em>pSource</em><br>
<a href="SUPPORT_ROUTINE.htm#W32TRIM_RIGHT">w32trim_right</a>  [<i><code>func</code></i>]  Removes any whitespace chars from the end of <em>pSource</em><br>
<a href="CONSTANT.htm#W32TRUE">w32True</a>  [<i><code>const</code></i>] Pass this value as a parameter to obtain its current value without setting it.<br>
<a href="CONSTANT.htm#W32TRUE">w32True</a>  [<i><code>const</code></i>] The value for a boolean True<br>
<a href="SUPPORT_ROUTINE.htm#W32UNPACK_DWORD">w32unpack_dword</a>  [<i><code>func</code></i>] Converts a number into two 16-bit integers<br>
<a href="MEMORY_MANAGEMENT.htm#W32USINGSAFECODE">w32UsingSafeCode</a>  [<i><code>Var</code></i>] Determines whether or not the 'safe' versions of peek and poke are used.<br>
<a href="CONSTANT.htm#W32VOID">w32VOID</a>  [<i><code>const</code></i>] This junkyard is provided so as to receive return values you don't need.<br>
<a href="ERROR.htm#WARNERR">warnErr</a>  [<i><code>proc</code></i>] Display an error message, with option to abort.<br>
<a href="CONSTANT.htm#WIN32LIBVERSION">Win32LibVersion</a>  [<i><code>const</code></i>] Contains the current version of win32lib library.<br>
<a href="CONTROL.htm#WINDOW">Window</a>  [<i><code>const</code></i>] A Window is a normal Win32 window.<br>
<a href="SYSTEM_ATTRIBUTE.htm#WINMAIN">WinMain</a>  [<i><code>proc</code></i>] Run event loop.<br>
<a href="CONSTANT.htm#WINMM32">winmm32</a>  [<i><code>const</code></i>] Windows Library: Multi-Media<br>
<a href="FONT.htm#WPRINT">wPrint</a>  [<i><code>proc</code></i>]  Equivalent to Euphoria's <em>print</em>() routine.<br>
<a href="FONT.htm#WPRINTF">wPrintf</a>  [<i><code>proc</code></i>]  Equivalent to Euphoria's <em>printf</em>() routine.<br>
<a href="FONT.htm#WPUT">wPuts</a>  [<i><code>proc</code></i>]  Equivalent to Euphoria's <em>puts</em>() function.<br>
<a href="XPM.htm#XPM">XPM</a> <br>
<a href="XPM.htm#XPMTOEUBMP">xpmToEuBmp</a>  [<i><code>func</code></i>] Convert XPM data into a standard Euphoria bitmap.<br>
<a href="XPM.htm#XPMTOPIXMAP">xpmToPixmap</a>  [<i><code>func</code></i>]  Create a <a href="CONTROL.htm#PIXMAP">Pixmap</a> from XPM data.<br>
<a href="MOUSETRAP.htm#ZORDERMOUSETRAP">zorderMouseTrap</a>  [<i><code>proc</code></i>] This alters the 'depth' of the specified mousetrap area in the window.<br>
<hr>
</body>
</html>
