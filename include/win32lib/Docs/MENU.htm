<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="MENU">Menus</a></h1>
<p><h3>Routines that deal with menu and menuitem handling.
</h3><br>

</p>
<li><a href="#ATTACHMENUHANDLE"><i>func</i> attachMenuHandle</a>(atom hMenu, integer newparent,object index,sequence caption) &nbsp;&nbsp; Changes (or sets) the parent of the control <em>id</em> to <em>newparent</em>, using the <em>index</em> attachment data if it is relevant.
<li><a href="#ATTACHPOPUP"><i>func</i> attachPopup</a>(integer pId, object pMenus) &nbsp;&nbsp;Associates one or more menus to a control as popup or context menus.
<li><a href="#DEFINEMENURADIOGROUP"><i>proc</i> defineMenuRadioGroup</a>( sequence ids) &nbsp;&nbsp;Defines a set of menu items that form a radio-group
<li><a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU"><i>desc</i> Get the count of items in /i menu </a>( /Menu or /Popup ) &nbsp;&nbsp;
<li><a href="#GETCOUNT"><i>func</i> getCount</a>( menu ) &nbsp;&nbsp;
<li><a href="#GETMENUBAR"><i>func</i> getMenuBar</a>(integer window,integer returnHandle) &nbsp;&nbsp;
<li><a href="#GETMENUPOSN"><i>func</i> getMenuPosn</a>(integer id) &nbsp;&nbsp;Get the zero-based relative position of a menu item.
<li><a href="#INMENUBAR"><i>func</i> inMenuBar</a>(integer id) &nbsp;&nbsp;Determines whether a menu belongs to a window menu bar.
<li><a href="#REMOVEMENU"><i>func</i> removeMenu</a>(integer id,integer item,integer flag,integer reuse) &nbsp;&nbsp;Removes a menu item from a menu.
<li><a href="#SETMENUITEMBITMAP"><i>func</i> setMenuItemBitmaps</a>(integer id,object bitmap) &nbsp;&nbsp; Sets the bitmap on a menu item, or the checked/unchecked marks 
<li><a href="#SKIPF10"><i>func</i> skipF10</a>(integer NewValue) &nbsp;&nbsp;Possibly sets whether or not F10 sets focus on the menubar
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="ATTACHMENUHANDLE">[<i>func</i>]<br>attachMenuHandle</a> (atom hMenu, integer newparent,object index,sequence caption)</h2>
<h3> Changes (or sets) the parent of the control <em>id</em> to <em>newparent</em>, using the <em>index</em> attachment data if it is relevant.</h3>
<h3>Returns: INTEGER: True if successful otherwise False.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> This function works like <a href="ATTRIBUTE.htm#SETPARENT">setParent</a>(), but targets menus whose only the handle is known.
They may have been created from a memory template. Since such a menu has no caption,
you must supply one.
<p>See Also: 
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="ATTACHPOPUP">[<i>func</i>]<br>attachPopup</a> (integer pId, object pMenus)</h2>
<h3>Associates one or more menus to a control as popup or context menus.</h3>
<h3>Returns: SEQUENCE: Previously attached menus.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> This will cause the menu(s) supplied in <em>pMenu</em> to be linked to
 the control <em>pId</em> such that when the righthand mouse button is pressed,
 the menu will pop up next to the mouse pointer. <br>
You can have different menus popup depending on the combination of
Ctrl and Shift keys you have pressed. You do this by supplying up to four
 menu ids in <em>pMenu</em>, one for no keys pressed, one for shift key, one for
control key, and another for both shift and control keys pressed.
<p>
 Each value in <em>pMenu</em> is either a Menu id, 0, -1, or a sequence
 of the form {MenuId, XOffset, YOffset}. <br>
If a simple menu id, then this is the popup menu that will display when
 the user right-clicks in the control. <br>
If -1, then the corresponding current value is retained. Use this to
 skip over setting previous values of menu ids. <br>
 If 0, then the corresponding menu id is cleared and the popup will <strong></strong>
 not display. <br>
 If a sequence, then the <em>XOffset</em> and <em>YOffset</em> are used to position
the menu relative to the mouse pointer. The default values are -6 and -6
respectively. Use this when you need the menu to be shown is different
position.
<p>
First you need to define the menus and any handlers for them, then you
can attach them to one or more controls.
<p>
Example
<pre>
      -- Define two menus.
      MenuOne = create(Menu, "One", MainWindow, 0, 0, 0,0, 0)
        M1_Item1 = create(MenuItem, "Item 1.1", MenuOne, 0, 0, 0,0, 0)
        M1_Item2 = create(MenuItem, "Item 1.2", MenuOne, 0, 0, 0,0, 0)
        M1_Item3 = create(MenuItem, "Item 1.3", MenuOne, 0, 0, 0,0, 0)
      MenuTwo = create(Menu, "Two", MainWindow, 0, 0, 0,0, 0)
        M2_Item1 = create(MenuItem, "Item 2.1", MenuTwo, 0, 0, 0,0, 0)
        M2_Item2 = create(MenuItem, "Item 2.2", MenuTwo, 0, 0, 0,0, 0)
        M2_Item3 = create(MenuItem, "Item 2.3", MenuTwo, 0, 0, 0,0, 0)
      setHandler(M1_Item1, w32HClick, routine_id("Click_Item11"))
      setHandler(M1_Item2, w32HClick, routine_id("Click_Item12"))
      setHandler(M1_Item3, w32HClick, routine_id("Click_Item13"))
      setHandler(M2_Item1, w32HClick, routine_id("Click_Item21"))
      setHandler(M2_Item2, w32HClick, routine_id("Click_Item22"))
      setHandler(M2_Item3, w32HClick, routine_id("Click_Item23"))
<p>
  -- Now attach popups for normal and ctrl keys
  prevMenus = attachPopup(SomeFld,
                {MenuOne, -- Normal (no keys)
                  -1,      -- ignore Shift
                  -- Note the changed X-Y offsets.
                  {MenuTwo,-20,-10}  -- Ctrl key
                 })
<p>
</pre>
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="DEFINEMENURADIOGROUP">[<i>proc</i>]<br>defineMenuRadioGroup</a> ( sequence ids)</h2>
<h3>Defines a set of menu items that form a radio-group</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> <em>ids</em> is a list of menuitems that form a logical group of items,
 in which only one can be marked witha 'radio-button' icon. <br>
This routine ensures that only one item from the group will be
marked. Any that were previously marked will be 'turned off'
<p>
 Note 1. The items do not have to be in the same menu. <br>
Note 2. A given menu item can only be in one radio group.
<p>
Example:
<pre>
      -- set the current loudness level.
       <a href="MENU.htm#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>({miPianissimo, miPiano, piModerato,
                             miForte, miFortissimo})
      . . .
       <a href="VALUE.htm#SETCHECK">setCheck</a>( miForte, w32True)
      -- now, all items of the same group are unchecked, except for miForte
</pre>
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GET_THE_COUNT_OF_ITEMS_IN_I_MENU">[<i>desc</i>]<br>Get the count of items in /i menu </a> ( /Menu or /Popup )</h2>
<h3>Returns: Count of items, or zero if control's list is empty.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p><p>
 This returns zero if <em>menu</em> is not an appropriate control type.
<p>
Example:
<pre>
          -- count size of TheList
          integer count
<p>
           count = <a href="LIST_CONTROL.htm#GETCOUNT">getCount</a>( TheMenu )
</pre>
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETCOUNT">[<i>func</i>]<br>getCount</a> ( menu )</h2>
Category: <a href="#MENU">Menus</a><br>
<p><p><p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETMENUBAR">[<i>func</i>]<br>getMenuBar</a> (integer window,integer returnHandle)</h2>
<h3>Returns:  (ATOM) id of window menu bar if <em>returnHandle</em> is 0, else its Windows handle.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p><p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETMENUPOSN">[<i>func</i>]<br>getMenuPosn</a> (integer id)</h2>
<h3>Get the zero-based relative position of a menu item.</h3>
<h3>Returns: INTEGER: Zero-Based Position of the menu item, or -1 if not a menu item.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> <em>id</em> is the id of a menu (item).
<p>
Example
<pre>
  integer pos
  pos = getMenuPosn(miSave)
</pre>
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="INMENUBAR">[<i>func</i>]<br>inMenuBar</a> (integer id)</h2>
<h3>Determines whether a menu belongs to a window menu bar.</h3>
<h3>Returns: (INTEGER) -1 if not a menu, 1 if the menu appears in a menu bar, else 0.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p><p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="REMOVEMENU">[<i>func</i>]<br>removeMenu</a> (integer id,integer item,integer flag,integer reuse)</h2>
<h3>Removes a menu item from a menu.</h3>
<h3>Returns: (INTEGER) w32False on failure, else nonzero.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> <em>item</em> is a 0-based index if <em>flag</em> is w32False, else an item id which must belong
 to the menu <em>id</em> (or the menu bar of the window <em>id</em>).
 If <em>reuse</em> is w33False, Windows is asked to free the memory of the menu, effectively destroying <em>item</em>. By passing another value, and if <em>item</em> is a menu, the function will
leave the internal data alone and return the handle.
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETMENUITEMBITMAP">[<i>func</i>]<br>setMenuItemBitmaps</a> (integer id,object bitmap)</h2>
<h3> Sets the bitmap on a menu item, or the checked/unchecked marks </h3>
<h3>Returns: SEQUENCE: the handles for unchecked,checked and main bitmaps</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> <em>id</em> is the identifier of the menu item to be considered.
 If <em>bitmap</em> is an atom, it is the handle to the bitmap displayed by the item.
If it is a sequence starting with a pair, the pair is {unchecked mark handle,checked mark handle}, and these marks will be set.
If it is an empty sequence, no attempt to change anything will be made.
Otherwise, bitmap is some text to be displayed instead of the current bitmap, if any.
The returned value always has 3 elements, unless the function fails in any way, in which case it returns {}.
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SKIPF10">skipF10</a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SKIPF10">[<i>func</i>]<br>skipF10</a> (integer NewValue)</h2>
<h3>Possibly sets whether or not F10 sets focus on the menubar</h3>
<h3>Returns: Returns INTEGER: The current value of the flag.</h3>
Category: <a href="#MENU">Menus</a><br>
<p><p> By default, the F10 key sets focus on the menubar. If <em>NewValue</em>
is w32True, then the behaviour is changed so that the F10 key does not
 set focus on the menubar. Passing <a href="#W32GETVALUE">w32GetValue</a> will just return the current value of the flag.
<p>
Example:
<pre>
      integer PrevF10Flag
      PrevF10Flag = skipF10( w32True )
</pre>
<p>See Also: 
<a href="#ATTACHMENUHANDLE">attachMenuHandle</a>,
<a href="#ATTACHPOPUP">attachPopup</a>,
<a href="#DEFINEMENURADIOGROUP">defineMenuRadioGroup</a>,
<a href="#GET_THE_COUNT_OF_ITEMS_IN_I_MENU">Get the count of items in /i menu </a>,
<a href="#GETCOUNT">getCount</a>,
<a href="#GETMENUBAR">getMenuBar</a>,
<a href="#GETMENUPOSN">getMenuPosn</a>,
<a href="#INMENUBAR">inMenuBar</a>,
<a href="#REMOVEMENU">removeMenu</a>,
<a href="#SETMENUITEMBITMAP">setMenuItemBitmaps</a>
<hr>
