<html>
<head>
<!-- Generated by MAKEDOC v1.1, (c) 2000,2003 by David Cuny, Derek Parnell, Matt Lewis -->
<!-- on 2009/07/23 at 00h20m32 -->
<style>h4 {text-align: right}</style>
<title>Documentation for Win32lib v0.70.18</title>
</head>
<body>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h1><a name="EVENT">Events</a></h1>
<p><h3>Events are routines that are triggered in response to actions taken by the user.
</h3><br>
Application events, like mouse clicks, key presses, resizing windows, and so on,
 are the basis for invoking user-developed routines. Once an application calls <a href="SYSTEM_ATTRIBUTE.htm#WINMAIN">WinMain</a>,
Windows takes over and only runs the user code when an event, that has been nominated
by the user, occurs. To nominate which events the application wishes to respond to, the
 application must register event handlers for each control/event combination that is relevent. 
<p>
 To establish an event handler, you use the <a href="EVENT.htm#SETHANDLER">setHandler</a>() routine. This links together
 three things: A control, an Event Type, and a Routine that you write. <br>
Example:
<pre>
      setHandler(okButton, w32HClick, routine_id("myClickHandler"))
</pre>
<p>
 The event handler routine that you write is always passed three parameters: <br>
 <em>integer self</em> This is the id of the control that triggered the event. <br>
 <em>integer event</em> This is the Win32lib code for the event type that was
 triggered. <br>
 <em>sequence parms</em> This is zero of more parameters that are specific to
the type of event being triggered.
<p>
A given event handler can be shared by many controls and event types. In this case, you can use
 the <em>self</em> and <em>event</em> parameters to determine your actions.
<pre>
   procedure myClickHandler(integer self, integer event, sequence parms)
       if self = okBtn then
          . . .
       else
          . . .
       end if
   end procedure
   setHandler({okBtn,cancelBtn}, w32HClick, routine_id("myClickHandler"))
</pre>

</p>
<li><a href="#APPCALLBACK"><i>proc</i> AppCallback</a>(integer self, integer event, sequence parms) &nbsp;&nbsp;An application specific callback routine used by win32lib.
<li><a href="#CLOSEAPP"><i>proc</i> closeApp</a>() &nbsp;&nbsp;Closes the application down.
<li><a href="#DOEVENT"><i>proc</i> doEvents</a>(integer id) &nbsp;&nbsp;Gives control back to windows until there are no pending events to process.
<li><a href="#ENABLEHANDLER"><i>func</i> enableHandler</a>( object id, object htype, object pRoutine,integer flag) &nbsp;&nbsp;Retrieves and possibly sets the state of a user written event handler.
<li><a href="#GETHANDLER"><i>func</i> getHandler</a>( integer id, integer htype) &nbsp;&nbsp;Gets the event handler(s) defined for a control.
<li><a href="#GETLASTMSG"><i>func</i> getLastMsg</a>( object option ) &nbsp;&nbsp;Gets information about the Windows message(s) being processed.
<li><a href="#GETNOTIFICATIONDATA"><i>func</i> getNotificationData</a>(integer pSender,integer pReceiver,integer pEvent) &nbsp;&nbsp;Returns the user data associated with the notification.
<li><a href="#GETRETURNVALUE"><i>func</i> getReturnValue</a>( ) &nbsp;&nbsp;Gets the current value of the value that will be returned to Windows.
<li><a href="#INVOKEHANDLER"><i>func</i> invokeHandler</a>( integer id, integer event, sequence params) &nbsp;&nbsp;Triggers a Win32Lib event.
<li><a href="#MAIN"><i>func</i> main</a>(sequence pArgs) &nbsp;&nbsp; An optional application routine, called within <a href="EVENT.htm#W32START">w32start</a>.ew just prior to Windows gaining control.
<li><a href="#NEWEVENT"><i>func</i> newEvent</a>(sequence name,object message,object rid) &nbsp;&nbsp; Defines a new event, and cause it to be triggered by <em>message</em>, with processing routine with routine_id <em>rid</em>.
<li><a href="#REGISTERNOTIFICATION"><i>proc</i> registerNotification</a>(integer pSender, integer pAction, integer pEvent, integer pReceiver, object pUserData) &nbsp;&nbsp;Defines, modifies or removes an event forwarding.
<li><a href="#REMOVEHANDLER"><i>proc</i> removeHandler</a>( object id, object htype, object pRoutine) &nbsp;&nbsp; Removes user written event handlers previously set with <a href="EVENT.htm#SETHANDLER">setHandler</a>()
<li><a href="#RESETRETURNVALUE"><i>proc</i> resetReturnValue</a>( ) &nbsp;&nbsp;Removes any value returned by handler.
<li><a href="#RETURNVALUE"><i>proc</i> returnValue</a>( value ) &nbsp;&nbsp;Override default value returned by handler.
<li><a href="#SETCALLBACK"><i>func</i> setCallback</a>( integer routineID) &nbsp;&nbsp;gets and sets the application's generic callback routine id
<li><a href="#SETDEFAULTPROCESSING"><i>func</i> setDefaultProcessing</a>(integer NewId) &nbsp;&nbsp;This establishes a replacement routine to handle the Windows default processing,
<li><a href="#SETEVENTLOOP"><i>func</i> setEventLoop</a>(integer NewId, object UserData) &nbsp;&nbsp;This establishes an replacement event loop.
<li><a href="#SETHANDLER"><i>proc</i> setHandler</a>( object id, object htype, object routine) &nbsp;&nbsp;Sets up an user written event handler
<li><a href="#SETHANDLERPROTECTION"><i>func</i> setHandlerProtection</a>(integer id,integer event,integer flag) &nbsp;&nbsp;Possibly sets the protection status for a pair {id,event}.
<li><a href="#SETIDLE"><i>func</i> setIdle</a>(integer newvalue) &nbsp;&nbsp;Possibly sets whether or not the library implements w32HIdle
<li><a href="#SETMOUSECLICK"><i>func</i> setMouseClick</a>(object pTimeDelta, object pXDelta, object pYDelta) &nbsp;&nbsp; Sets/gets the mouse click detection parameters. 
<li><a href="#SETNOTIFICATIONSTATE"><i>func</i> setNotificationState</a>(integer pSender,integer pReceiver,integer pEvent,integer pFlag) &nbsp;&nbsp;Possibly sets the state for the designated notification, and returns the former value of the state.
<li><a href="#SETNOTIFYHANDLER"><i>func</i> setNotifyHandler</a>(integer pMsg, integer pRtnId) &nbsp;&nbsp;Sets a handler for WM_NOTIFY type of messages.
<li><a href="#SETPROTECTEDHANDLER"><i>proc</i> setProtectedHandler</a>(integer id,integer event,object pRoutine) &nbsp;&nbsp;Same as setHandler(), but overrides any protection without changing it.
<li><a href="#SETWINMSGHANDLER"><i>proc</i> setWinMsgHandler</a>(object id, object pMsg, integer pRtnId) &nbsp;&nbsp;Sets a user defined (raw) windows message handler.
<li><a href="#STARTAPP"><i>proc</i> startApp</a>(object CallbackRtns) &nbsp;&nbsp;Start the application running.
<li><a href="#SUBCLASSCONTROL"><i>func</i> subClassControl</a>(sequence Id,  atom hWnd) &nbsp;&nbsp;Used to access Windows created controls as if they were win32lib controls.
<li><a href="#W32EVENTCODE"><i>const</i> w32EventCodes</a> &nbsp;&nbsp; List of all recognised event codes, in the same order as <a href="EVENT.htm#W32EVENTNAME">w32EventNames</a>.
<li><a href="#W32EVENTNAME"><i>const</i> w32EventNames</a> &nbsp;&nbsp;List of all recognised event names, without the "w32H" prefix.
<li><a href="#W32HACTIVATE"><i>const</i> w32HActivate</a> &nbsp;&nbsp;Occurs for Windows only and after the window is opened.
<li><a href="#W32HAFTEREVENT"><i>const</i> w32HAfterEvent</a> &nbsp;&nbsp;Occurs after normal Windows processing of an event (any type).
<li><a href="#W32HBREAK"><i>const</i> w32HBreak</a> &nbsp;&nbsp;Invoked whenever the Ctrl-Break key is pressed.
<li><a href="#W32HCHANGE"><i>const</i> w32HChange</a> &nbsp;&nbsp;Selection or Value in a control is changed.
<li><a href="#W32HCLICK"><i>const</i> w32HClick</a> &nbsp;&nbsp;Invoked when the left mouse button is 'clicked' or a Button control is used.
<li><a href="#W32HCLOSE"><i>const</i> w32HClose</a> &nbsp;&nbsp; A <a href="CONTROL.htm#WINDOW">Window</a> is closed.
<li><a href="#W32HCLOSEUP"><i>const</i> w32HCloseUp</a> &nbsp;&nbsp;The dropdown portion of a combobox has just been closed, or the menu was just closed.
<li><a href="#W32HDATACHANGE"><i>const</i> w32HDataChange</a> &nbsp;&nbsp;Value in a List or a Combo's list has changed.
<li><a href="#W32HDESTROY"><i>const</i> w32HDestroy</a> &nbsp;&nbsp;The control is about to be destroyed.
<li><a href="#W32HDRAGANDDROP"><i>const</i> w32HDragAndDrop</a> &nbsp;&nbsp;Something has been dragged onto the control or window.
<li><a href="#W32HDROPDOWN"><i>const</i> w32HDropDown</a> &nbsp;&nbsp;The dropdown portion of a combobox is about to be displayed, or the menu is about to be displayed..
<li><a href="#W32HEVENT"><i>const</i> w32HEvent</a> &nbsp;&nbsp;An event (any type) has occured.
<li><a href="#W32HGOTFOCU"><i>const</i> w32HGotFocus</a> &nbsp;&nbsp; A <a href="CONTROL.htm#CONTROL">control</a> (or <a href="CONTROL.htm#WINDOW">Window</a>) receives focus.
<li><a href="#W32HIDLE"><i>const</i> w32HIdle</a> &nbsp;&nbsp;Invoked whenever the application is not processing Windows messages.
<li><a href="#W32HKEYBOARD"><i>const</i> w32HKeyboard</a> &nbsp;&nbsp;Occurs when keys are held down and about to be released.
<li><a href="#W32HKEYDOWN"><i>const</i> w32HKeyDown</a> &nbsp;&nbsp;Key is pressed.
<li><a href="#W32HKEYPRES"><i>const</i> w32HKeyPress</a> &nbsp;&nbsp;"Printable" key is pressed.
<li><a href="#W32HKEYUP"><i>const</i> w32HKeyUp</a> &nbsp;&nbsp;Key is released.
<li><a href="#W32HLOSTFOCU"><i>const</i> w32HLostFocus</a> &nbsp;&nbsp; A <a href="CONTROL.htm#WINDOW">Window</a> or <a href="CONTROL.htm#CONTROL">control</a> loses focus.
<li><a href="#W32HMOUSE"><i>const</i> w32HMouse</a> &nbsp;&nbsp;Event triggered when a mouse action takes place.
<li><a href="#W32HMOUSETRAP"><i>const</i> w32HMouseTrap</a> &nbsp;&nbsp; Event triggered when a mouse action takes place inside a defined <a href="MOUSETRAP.htm#MOUSETRAP">MouseTrap</a> for a control.
<li><a href="#W32HNOTIFY"><i>const</i> w32HNotify</a> &nbsp;&nbsp;A control is forwarding a notification event.
<li><a href="#W32HOPEN"><i>const</i> w32HOpen</a> &nbsp;&nbsp; A <a href="CONTROL.htm#WINDOW">Window</a> is opened.
<li><a href="#W32HPAINT"><i>const</i> w32HPaint</a> &nbsp;&nbsp; A portion or all of a <a href="CONTROL.htm#WINDOW">Window</a> needs to be redrawn.
<li><a href="#W32HPAUSE"><i>const</i> w32HPause</a> &nbsp;&nbsp;Invoked whenever the Pause key is pressed.
<li><a href="#W32HRESIZE"><i>const</i> w32HResize</a> &nbsp;&nbsp; A <a href="CONTROL.htm#WINDOW">Window</a> has been resized.
<li><a href="#W32HSCROLL"><i>const</i> w32HScroll</a> &nbsp;&nbsp;Triggered when scrollbar value has changed, and when user has stopped scrolling.
<li><a href="#W32HTIMER"><i>const</i> w32HTimer</a> &nbsp;&nbsp;A timer is triggered.
<li><a href="#W32START"><i>incl</i> w32Start </a>(w32start.ew) &nbsp;&nbsp; This is an optional <em>include</em> file. It defines a default application callback routine
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="APPCALLBACK">[<i>proc</i>]<br>AppCallback</a> (integer self, integer event, sequence parms)</h2>
<h3>An application specific callback routine used by win32lib.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> This is an optional routine that if defined, must be a <strong>global</strong> routine
 in your Win32Lib application. It is used by the <em>include</em> file <strong>w32start.ew</strong> <br>
<p>
It is called by Win32Lib when the library needs some details from the application.
<p>
 see <a href="EVENT.htm#SETCALLBACK">setCallback</a> for more details.
<p>
Example:
<pre>
  procedure AppCallback(integer self, integer event, sequence parms)
      if event = w32HGetHandler then
          -- parms[1] is the standard routine handler name
          -- in the form <eventname>_<controlname>
          -- eg. Click_PushBtn
          -- parms[2] is the event code to be handled
          -- eg. w32HClick
          -- parms[3] is the control's name
          if match("About", parms[3]) then
              returnValue(routine_id(parms[1]))
          else
              -- Non standard naming
              returnValue(routine_id("menu_item_selected" ))
          end if
      end if
  end procedure
</pre>
<p>See Also: 
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="CLOSEAPP">[<i>proc</i>]<br>closeApp</a> ()</h2>
<h3>Closes the application down.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>You can set a handler to trap the close of the main window if you
have any last minute activites to do, such as closing databases, etc...
<p>
Example:
<pre>
      procedure Click_CloseBtn(integer self, integer event, sequence parms)
          if message_box("Is it okay to stop now?", "Close", MB_YESNO) = IDYES
              closeApp()
          end if
      end procedure
      setHandler(CloseBtn, w32HClick, routine_id("Click_CloseBtn"))
<p>
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="DOEVENT">[<i>proc</i>]<br>doEvents</a> (integer id)</h2>
<h3>Gives control back to windows until there are no pending events to process.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>id</em> is usually zero, meaning that events for all controls are processed,
however you can limit this to a particular control by supplying it id.
<p>
Typically this is used inside user written event handlers when they know
that they might take a long time to complete. For example, if by clicking
a button the application must scan through all the files on a disk, it
would be appropriate to include a doEvents() call inside the inner loop
so that other windows events can be processed during the file search. If
this isn't done, no control or window belonging to the application will
respond until the disk scan is conpleted. For example, there might be
another button that the user can click to abort the disk scan. Without
doEvents() this would only respond after the disk scan is completed!
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="ENABLEHANDLER">[<i>func</i>]<br>enableHandler</a> ( object id, object htype, object pRoutine,integer flag)</h2>
<h3>Retrieves and possibly sets the state of a user written event handler.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>id</em> is the ID of the control that the event applies to. <br>
 <em>htype</em> is the type of event to trap. <br>
 <em>pRoutine</em> is the routine_id of the user written code that handles
the event.
 <em>flag</em> tells the routine what to do.
<p>
 <strong>Note</strong> that <em>id</em> can be a sequence of ids. You would do this if they all
 shared the same handler code. <br>
 <strong>Note</strong> that <em>htype</em> can be a sequence of event codes. You would do this
 if the same handler code is to be invoked for different events. <br>
 <strong>Note</strong> that <em>pRoutine</em> can be a sequence of routine_id() values. You
would do this to set the state of a chain of routines that are triggered for each
 event listed in <em>htype</em>. <br>
<p>
If flag is greater than zero, the handler will be enabled if found; if it is zero,
it will be disabled if found. In any case, its previous state will be returned:
1 = enabled, 0 = disabled, -1 = not found.
If id or htype or routines is a sequence, a sequence will be returned;
otherwise, only an integer is returned.
<p>
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETHANDLER">[<i>func</i>]<br>getHandler</a> ( integer id, integer htype)</h2>
<h3>Gets the event handler(s) defined for a control.</h3>
<h3>Returns: SEQUENCE: A list of handlers defined so for this control event.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p><p>
 <em>id</em> is the ID of the control that the event applies to. <br>
 <em>htype</em> is the type of event being handled. <br>
The first executed handler is the last one on the returned list;
second executed is second last and so on.
<p>
Example
<pre>
       object hl
       -- Make sure my handler is installed before any others.
       hl = getHandler(myWindow, w32HPaint)
       -- Chain mine to the front.
       setHandler(myWindow, w32HPaint, -1 & routine_id("mypainter") & hl)
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETLASTMSG">[<i>func</i>]<br>getLastMsg</a> ( object option )</h2>
<h3>Gets information about the Windows message(s) being processed.</h3>
<h3>Returns: SEQUENCE: The message data sent by Windows. INTEGER: Depth</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>This is used by advanced users. It can be used to determine the triggering event for
the current event handler. For example, you can use this to find out if a w32HClick
event was triggered by a keypress or a mousepress. Or if a paint event was triggered
by a scroll action or not.
<p>
 What this returns depends on the <em>option</em> value.
 <li> "" Returns the most recent message as {/i Msg }, where <em>Msg</em> is a sequence laid out as { pSource, hWnd, iMsg, wParam, lParam, time_stamp }
 <li> "all" Returns all the messages being processed. { <em>Msg_1</em>,/i Msg_2, ... } where each <em>Msg_n</em> has the form above.
 <li> "depth" Returns the current number of messages being processed.
 <li> "maxdepth" Returns the maximum number of simultaneous messages processed so far.
<p>
 This returns an empty list if there are no windows messages being processed. <br>
time_stamp specifies the elapsed time, in milliseconds, from the time the system was started to the time the message was created (that is, placed in the thread's message queue)
<p>
Example:
<pre>
      -- gets last received message
      sequence msg
      msg = getLastMsg( "" )
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETNOTIFICATIONDATA">[<i>func</i>]<br>getNotificationData</a> (integer pSender,integer pReceiver,integer pEvent)</h2>
<h3>Returns the user data associated with the notification.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> If the notification doesn't exist, returns {}. Otherwise, returns a sequence of length 1, whose only element is the associated user data, like <a href="ATTRIBUTE.htm#GETUSERPROPERTY">getUserProperty</a>() does.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="GETRETURNVALUE">[<i>func</i>]<br>getReturnValue</a> ( )</h2>
<h3>Gets the current value of the value that will be returned to Windows.</h3>
<h3>Returns: OBJECT: A sequence if set by an event handler, otherwise an atom.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p><p>
Example:
<pre>
      object rv
      -- Set a return value if not already set.
      rv = getReturnValue()
      if not sequence(rv) then
          returnValue(-1)
      end if
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="INVOKEHANDLER">[<i>func</i>]<br>invokeHandler</a> ( integer id, integer event, sequence params)</h2>
<h3>Triggers a Win32Lib event.</h3>
<h3>Returns: OBJECT: The value set by returnValue() if called inside</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>the handler, zero otherwise.
<p>
Example:
<pre>
      object rv
      -- Simulate a button press on the Close Button.
      rv = invokeHandler(btnClose, w32HClick, {})
      if not sequence(rv) then
          closeWindow(mainWin)
      end if
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="MAIN">[<i>func</i>]<br>main</a> (sequence pArgs)</h2>
<h3> An optional application routine, called within <a href="EVENT.htm#W32START">w32start</a>.ew just prior to Windows gaining control.</h3>
<h3>Returns: INTEGER: 0 if you want the app to start, otherwise anything else will abort.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>This is an optional routine that you can define in your application. If you
 do, it is called by the <em>include</em> file <strong>w32start.ew</strong> just prior to passing
 control to Windows. <br>
 It is passed the output of the command_line() routine. <br>
If it returns a zero, then the application will start up. Anything else
will cause the application to abort.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="NEWEVENT">[<i>func</i>]<br>newEvent</a> (sequence name,object message,object rid)</h2>
<h3> Defines a new event, and cause it to be triggered by <em>message</em>, with processing routine with routine_id <em>rid</em>.</h3>
<h3>Returns: (INTEGER) w32False on failure, new event code on success.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> If the name has a "w32H" prefix, it will be stripped./n 
 If <em>message</em> is a sequence of several Windows messages, then <em>rid</em> should be a sequence of the same length
(an atom is treated as a 1-element sequence). Otherwise, the function fails. Likewise,
 attempting to redefine an existing event will fail, as well as assigning the new event to a message that already triggers one. <br>
Event names are case sensitive, and must ONLY contain ASCII letters.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="REGISTERNOTIFICATION">[<i>proc</i>]<br>registerNotification</a> (integer pSender, integer pAction, integer pEvent, integer pReceiver, object pUserData)</h2>
<h3>Defines, modifies or removes an event forwarding.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> This procedure instructs the library to forward <em>pEvent</em> to <em>pReceiver</em> when <em>pSender</em> receives it, or to perform some actions on an existing forwarding./n
 When a control must notify another, it does so by firing a <a href="EVENT.htm#W32HNOTIFY">w32HNotify</a> event on the receiver. The parameter sequence for this event is {/i sender,/i event, <em>user</em> data,parameter sequence of the triggering event}.
 <em>pAction</em> is any of:
 <li> <strong>w32notifyCreate</strong>: creates a new event notification, or change user data associated to an existing one. The new notification is enabled;
 <li> <strong>w32notifyDefer</strong>: creates a new event notification, or change user data associated to an existing one. The new notification is disabled;
 <li> <strong>w32notifyRemove</strong>: the existing notification will no longer exist. Supplied user data is ignored, current user data is discarded;
 <li> <strong>w32notifyEnable</strong>: enables an existing notification.
 <li> <strong>w32notifyDisable</strong>: disables an existing notification./n
 To change the state of a notification, use the <a href="EVENT.htm#SETNOTIFICATIONSTATE">setNotificationState</a>() function./n
<p>
 Some user data is associated to every notification. Use the <em>pUserData</em> parameter to set or change this value, which the library doesn't use in any way: it only passes it along. You can retrieve the data using the <a href="EVENT.htm#GETNOTIFICATIONDATA">getNotificationData</a>() function.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="REMOVEHANDLER">[<i>proc</i>]<br>removeHandler</a> ( object id, object htype, object pRoutine)</h2>
<h3> Removes user written event handlers previously set with <a href="EVENT.htm#SETHANDLER">setHandler</a>()</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>id</em> is one or more control IDs. <br>
 <em>htype</em> is one or more event types. <br>
 <em>pRoutine</em> is one or more routine_ids previously set for the control-event combinations
in the previous parameters.
<p>
You use this routine to get rid of a handler that had been established earlier.
 To temporarily disable or enable a handler, use <a href="EVENT.htm#ENABLEHANDLER">enableHandler</a>().
<p>
Example:
<pre>
      -- This causes the CommonHandler routine to no longer process the w32HClick event for the controls Btn1 and Btn2.
      removeHandler( {Btn1, Btn2}, w32HClick, routine_id("CommonHandler"))
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="RESETRETURNVALUE">[<i>proc</i>]<br>resetReturnValue</a> ( )</h2>
<h3>Removes any value returned by handler.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p><p>
Example
<pre>
      resetReturnValue()
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="RETURNVALUE">[<i>proc</i>]<br>returnValue</a> ( value )</h2>
<h3>Override default value returned by handler.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>This allows you to override the value an event handler returns to Win32.
By default, when an event is processed, it goes through these steps:
<p>
 <li> Registered Control Process: if the control class was created using <a href="CONTROL.htm#REGISTERCONTROL">registerControl</a>() and
has a Process routine, this routine is called first.
 <li> All-Event Pre Trap: if a w32HEvent handler was set for the control, this is called next.
 <li> Message Trap: If there is an raw message handler for this control and this message, it
 is passed the event. You set such handlers by calling <a href="EVENT.htm#SETWINMSGHANDLER">setWinMsgHandler</a>().
 <li> Event Trap: If there is a specific handler for this event, that
 handler is triggered. For example, <strong>WM_SETFOCUS</strong> triggers
 <a href="EVENT.htm#W32HGOTFOCU">w32HGotFocus</a>, <strong>WM_SIZE</strong> triggers <a href="EVENT.htm#W32HRESIZE">w32HResize</a>, etc.
 <li> All-Event Post Trap: if a w32HAfterEvent handler was set for the control, this is called next.
 <li> Default Windows Handler: Finally, the default Window handler for
 the control is called. In the case of subclassed <a href="CONTROL.htm#CONTROL">controls</a>,
 <em>CallWindowProc</em> calls the normal handler; for <a href="CONTROL.htm#WINDOW">windows</a>,
 <em>DefWindowProc</em> is called.
<p>
 Setting <a href="EVENT.htm#RETURNVALUE">returnValue</a> at any stage causes processing to stop at the step that the
value was set in, and return that value to Windows.
<p>
Example:
<p>
<pre>
          -- prevent Button1 from seeing any space bar keys
          procedure Button1_KeyDown( integer self, integer event, sequence parms)
              integer keycode
              integer shift
              keycode = parms[1]
              shift = parms[2]
              if keycode = VK_SPACE then
                  -- set return value
                   <a href="EVENT.htm#RETURNVALUE">returnValue</a>( w32True )
              end if
          end procedure
           <a href="EVENT.htm#SETHANDLER">setHandler</a>( Button1, w32HKeyDown, routine_id("Button1_KeyDown"))
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETCALLBACK">[<i>func</i>]<br>setCallback</a> ( integer routineID)</h2>
<h3>gets and sets the application's generic callback routine id</h3>
<h3>Returns: INTEGER: The current value of the application's callback routine id.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>routineID</em> is either -1 or a valid routine id. <br>
This sets the application's callback routine id and returns the old
 value. If <em>routineID</em> is less than -1, the current value is returned and remains unchanged./n
The application may call the callback routine for a number of reasons
during the running of a program. It is mainly used to get information
needed by Win32Lib that it has not received so far.
<p>
 The callback routine must be a <strong>procedure</strong> that takes three parameters:- <br>
 <strong>integer</strong> <em>self</em> <br>
 <strong>integer</strong> <em>event</em> <br>
 <strong>sequence</strong> <em>data</em> <br>
<p>
The contents of the parameters passed to the callback routine depend on
 the value of the <em>event</em> parameter. <br>
 When <em>event</em> <strong>= w32HGetHandler</strong> is called when Win32lib needs an event handler
to be associated for a specific control's event. This comes about when using
 the "events=..." parameter in the <a href="DEFINING_CONTROL.htm#NEWUIOBJ">newUIObj</a> routine./n
 The <em>data</em> contains three values... <br>
 [1] A string in the form &lt;eventname>_&lt;controlname>, eg. "Click_OkayBtn" <br>
 [2] An integer with the symbolic event code, eg. w32HClick <br>
 [3] A string containing the control's name. <br>
 And the <em>self</em> parameter contains the control-id for the control needing
the handler routine.
<p>
Example
<pre>
      integer oldrtn
      oldrtn = setCallback(routine_id("AppCallback"))
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETDEFAULTPROCESSING">[<i>func</i>]<br>setDefaultProcessing</a> (integer NewId)</h2>
<h3>This establishes a replacement routine to handle the Windows default processing,</h3>
<h3>Returns: INTEGER: The previous routine_id for this.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>or just returns its current value.
The Windows Default Processing routine is called whenever a message is received for a control
that Win32lib does not explicitly handle. Win32lib will pass a number of parameters to
 this routine. <br>
 <li> <em>integer id</em>: The win32lib ID for the control. It will be zero if it is not a control
that was created with win32lib.
 <li> <em>integer pSource</em>: A code that indicates the source of the message. It is either kMainMsg or
kSubclassedMsg depending on whether it comes from a top-level window or a control within a window
respectively.
 <li> <em>atom hWnd</em>: The handle to the control.
 <li> <em>atom iMsg</em>: The Windows message code.
 <li> <em>atom wParam</em>: The first data item for the message code.
 <li> <em>atom lParam</em>: The second data item for the message code.
<p>
 Pass <a href="#W32GETVALUE">w32GetValue</a> to just get the routine_id without setting it.
<p>
Example:
<pre>
  function MyDefaultProc(integer id, integer pSource, atom hWnd,
                         atom iMsg, atom wParam, atom lParam)
      atom lResult
<p>
      if (id = 0) or (pSource = kMainMsg) then
          lResult = w32Func( xDefWindowProc, { hWnd, iMsg, wParam, lParam } )
      else
          lResult = w32Func( xCallWindowProc, { mySubProc, hWnd, iMsg, wParam, lParam } )
      end if
<p>
      return lResult
  end function
  VOID = setDefaultProcessing(routine_id("MyDefaultProc"))
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETEVENTLOOP">[<i>func</i>]<br>setEventLoop</a> (integer NewId, object UserData)</h2>
<h3>This establishes an replacement event loop.</h3>
<h3>Returns: SEQUENCE: The previously set values = {message handler routine id, user data}</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>There may be situations in which the Windows Message handler loop, built into Win32lib,
is not adequate for your needs. If so, you can call this function to supply an alternative
message handler.
<p>
 <em>NewId</em> is the routine_id of your routine that will be called by Win32lib to process
Windows Messages.
<p>
 <em>UserData</em> can be anything. It is passed back to your routine by Win32lib on each call.
Win32lib does not alter it at anytime.
<p>
 Win32lib calls the message handler from within the <a href="#MAINWIN">MainWin</a>() routine to begin processing
 messages received from Windows. It also calls it when you use <a href="ATTRIBUTE.htm#OPENDIALOG">openDialog</a>(). The replacement
 message handler will receive the <em>UserData</em> value every time it is called by Win32lib. <br>
<p>
Example:
<pre>
  integer OldHandler
  procedure myMsgHandler(sequence Parms)
     . . . your code goes here . . .
  end procedure
  OldHandler = setEventLoop( routine_id("myMsgHandler"), {})
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETHANDLER">[<i>proc</i>]<br>setHandler</a> ( object id, object htype, object routine)</h2>
<h3>Sets up an user written event handler</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>id</em> is the ID of the control that the event applies to. <br>
 <em>htype</em> is the type of event to trap. <br>
 <em>routine</em> is the routine_id of the user written code that will handle
the event.
<p>
 <strong>Note</strong> that <em>id</em> can be a sequence of ids. You would do this if they all
 shared the same handler code. <br>
 <strong>Note</strong> that <em>htype</em> can be a sequence of event codes. You would do this
 if the same handler code is to be invoked for different events. <br>
 <strong>Note</strong> that <em>routine</em> can be a sequence of routine_id() values. You
would do this to set a chain of routines that are triggered for each
 event listed in <em>htype</em>. <br>
This routine actually adds the handler's routine_id to the end of a list
of such routines for this ID and Event combination. This way, you can
chain together independantly written routines to fire for the same
id and same events.
<p>
 A special note. To remove the current chain, set <em>routine</em> to -1. To clear
 the existing chain before setting a new one, you can also pass <em>routine</em>
as {-1, routine_id("myhandler")}. This mimics the onXXX syntax which early
versions of win32lib supported.
<p>
 To add routine(s) as the <strong>last</strong> executed in the chain, insert the special value -2
 before the routines. Thus, specifying {25,-2,13,18} as the <em>routine</em> argument
will cause 25 to be added at the front, then 13 and 18 to be added at the bottom,
18 being bottom-most.
<p>
 You can temporarily enable or disable handlers using the <a href="EVENT.htm#ENABLEHANDLER">enableHandler</a>() function.
The event subsystem only calls enabled handlers.
<p>
 <strong>How the Event Handler subsystem works</strong> <br>
The Win32lib library receives various events notifications from Windows.
If an event handler has been set up for the specific control-event
combination, the library invokes the user written routine before
continuing. Each event handler is a procedure that is passed three
 parameters by the library. <br>
 1) integer <em>ID</em>. The control id that the event applies to. <br>
 2) integer <em>Event</em>. The event code that invoked this routine. This
 enables a single routine to handler multiple event types. <br>
 3) sequence <em>Params</em>. This is a list of zero or more parameters
associated with the specific event. For example, a w32HKeyDown event will
have the keycode and shift mask in these parameters.
<p>
If you insert a handler at the top of a handler chain, and if the top of that chain
 is protected (using <a href="EVENT.htm#SETHANDLERPROTECTION">setHandlerProtection</a>(), the handler will be inserted right below
the top handler. Likewise, if you insert at bottom and the bottom handler is protected,
the new handler will be inserted right above the bottom-most one.
<p>
Example
<pre>
  -- Set a single routine to be triggered by one type of event.
  setHandler(myWindow, w32HPaint, routine_id("repaintWindow"))
<p>
  -- Set the same handler for two different buttons.
  setHandler( {btn1, btn2}, w32HClick, routine_id("click_buttons"))
<p>
  -- Set the same handler for two different events.
  setHandler( btn1, {w32HClick, w32HKeyPress}, routine_id("click_buttons"))
<p>
  -- Set a chain of handlers.
  setHandler( btn1, w32HClick, routine_id("click_buttons"))
  if DebugSwitch = w32True then
      -- add a second routine to be called.
      setHandler( btn1, w32HClick, routine_id("Debugger"))
  end if
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETHANDLERPROTECTION">[<i>func</i>]<br>setHandlerProtection</a> (integer id,integer event,integer flag)</h2>
<h3>Possibly sets the protection status for a pair {id,event}.</h3>
<h3>Returns: (INTEGER) The former protection flag for the pair.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>The protection flag is the sum of zero or more of:
 <li> <strong>w32protectLeading</strong>: the first handler to be executed is protected
 <li> <strong>w32protectTrailing</strong>: the last handler to be executed is protected
<p>
Additionally, using w32GetValue as flag causes the current flag to be returned.
<p>
 When a handler chain is protected, and you call <a href="EVENT.htm#SETHANDLER">setHandler</a>(), the current top or bottom
handler will remain where it is, and the handler is inserted below or above the former.
This is handy when superclassing conrols, or creating derived controls a user might install
event handlers on, even though yours does stuff that should be done before any user
routine starts.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETIDLE">[<i>func</i>]<br>setIdle</a> (integer newvalue)</h2>
<h3>Possibly sets whether or not the library implements w32HIdle</h3>
<h3>Returns: INTEGER: CurrentValue</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>newvalue</em> is either w32True or w32False <br>
The initial setting is w32False, meaning that w32HIdle is not invoked
when the application is idling. To start having this handler invoked,
 you need to setIdle(w32True). Pass <a href="#W32GETVALUE">w32GetValue</a> to return the current status.
<p>
example
<pre>
  integer x
  x = setIdle(w32True)
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETMOUSECLICK">[<i>func</i>]<br>setMouseClick</a> (object pTimeDelta, object pXDelta, object pYDelta)</h2>
<h3> Sets/gets the mouse click detection parameters. </h3>
<h3>Returns: The current settings for these parameters.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> There are three parameters used to detect a mouse click event. These are <br>
 <li> Time: Number of seconds difference between left mouse down and up events.
 <li> XDelta: Number of pixels allowance in the X (horizontal) direction.
 <li> YDelta: Number of pixels allowance in the Y (vertical) direction.
<p>
 By using this function, you can set any, all, or none of these parameters. To <strong>not</strong>
set a parameter, you must use an empty sequence in its place.
<p>
example:
<pre>
     -- Set the time to 1.5 seconds, and the Y tolerance to 5 pixels.
     -- Leave the X tolerance as it is.
     curval1 = setMouseClick( 1.5, {}, 5)
     -- Double the X tolerance, leaving the others alone.
     curval2 = setMouseClick( {}, curval1[2] * 2, {})
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETNOTIFICATIONSTATE">[<i>func</i>]<br>setNotificationState</a> (integer pSender,integer pReceiver,integer pEvent,integer pFlag)</h2>
<h3>Possibly sets the state for the designated notification, and returns the former value of the state.</h3>
<h3>Returns: 1 if enabled, 0 if disabled, -1 if unknown.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> Set <em>pFlag</em> to a positive value to enable a notification, to 0 to disable it and to a negative value to just return the current state.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETNOTIFYHANDLER">[<i>func</i>]<br>setNotifyHandler</a> (integer pMsg, integer pRtnId)</h2>
<h3>Sets a handler for WM_NOTIFY type of messages.</h3>
<h3>Returns: INTEGER: The current Routine ID for this notification message.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>pMsg</em> is the Notification Message code for which you are setting the
 handler. <br>
 <em>pRtnId</em> is the routine_id() of your function that handles the message. Passing a negative
value will remove the handler.
<p>
 Your routine is passed four parameters: <br>
 </ul> 
 <li> <strong>integer</strong> <em>id</em> = The ID of the control that is sending the notification.
 <li> <strong>atom</strong> <em>hWnd</em> = a copy of the hWnd parameter sent by Windows.
 <li> <strong>atom</strong> <em>wParam</em> = a copy of the wParam parameter sent by Windows.
 <li> <strong>atom</strong> <em>lParam</em>+ = a copy of the lParam parameter sent by Windows.
 </ul> 
 and must return either <a href="CONSTANT.htm#KSUBCLASSEDMSG">kSubclassedMsg</a> or <a href="CONSTANT.htm#KMAINMSG">kMainMsg</a> <br>
 <em>kSubclassedMsg</em> means that you want the windows processing specific to this class of control to occur for
this notification, after your code has finished. A variation is to return {kSubclassedMsg,
{hWnd,iMsg,wParam,lParam}} that contain replacement values for the ones originally
 send through by Windows. kProcessMsg is an alias for kSubclassedMsg./n 
 <em>kMainMsg</em> means that you want the Windows default processing to occur, skipping any
class specific behaviour. This will
send a zero return code back to the Windows from the WM_NOTIFY message. Sometimes
however, you may need to specifies a specific return value. In this case you need
 to return {kMainMsg, retval} in which <em>retval</em> must be an integer. kReturnNow is an
alias for kMainMsg.
<p>
The routine will be called whenever a control send the notiication with the supplied code.
 Use <a href="ATTRIBUTE.htm#GETSELF">getSelf</a>(), or peek into the notification structure pointed by lParam, to know which
control originated the notification.
<pre>
  sequence alldata
  integer oldval
  integer SORT_BY
  SORT_BY=0
  alldata = getDataItems()
<p>
  function CS_byElement(sequence s1,sequence s2)
    return compare(s1[SORT_BY],s2[SORT_BY])
  end function
<p>
  constant ByElement=routine_id("CS_byElement")
<p>
  function mylvclick(integer id, atom hWnd, atom wParam, atom lParam)
  integer
    lColumn,
    lOwner
<p>
    id = getId( w32fetch( lParam, NMHDR_hwndFrom ))
    if id != 0 then
        lColumn = w32fetch( lParam, NMLISTVIEW_iSubItem ) + 1
        SORT_BY=lColumn
        alldata=custom_sort(ByElement,alldata)
        VOID = sendMessage(id,WM_SETREDRAW,0,0)
        loadLVInfo(id, alldata)
        VOID = sendMessage(id,WM_SETREDRAW,1,0)
    end if
<p>
    return kMainMsg
  end function
  oldval = setNotifyHandler( LVN_COLUMNCLICK, routine_id("mylvclick"))
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETPROTECTEDHANDLER">[<i>proc</i>]<br>setProtectedHandler</a> (integer id,integer event,object pRoutine)</h2>
<h3>Same as setHandler(), but overrides any protection without changing it.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> If a handler chain is protected using <a href="EVENT.htm#SETHANDLERPROTECTION">setHandlerProtection</a>(), you may need to bypass
this protection sometimes when changing the top or bottom handler. In this case only, use
 setProtectedHandler(). Othrwise, <a href="EVENT.htm#SETHANDLER">setHandler</a>() will do just fine, and will be more flexible,
since you cannot use sequences of ids or events here.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SETWINMSGHANDLER">[<i>proc</i>]<br>setWinMsgHandler</a> (object id, object pMsg, integer pRtnId)</h2>
<h3>Sets a user defined (raw) windows message handler.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>Use this to set up a handler to directly deal with a
Windows message prior to win32lib processing it.
This is really only used by experienced Windows coders as it
 must deal with all the low-level detail itself. <br>
<p>
 <em>id</em> can be either a single control Id or a list of them. <br>
 <em>pMsg</em> can be either a single Windows message code or a list of them.
 The <em>pRtnId</em> is a routine_id of some code of yours which must
 be a function that receives these parameters ... <br>
<ol>
 <li> integer pSource
 <li> atom hWnd
 <li> atom iMsg
 <li> atom wParam
 <li> atom lParam
 </ol> 
 The <em>pSource</em> parameter is either kSubclassedMsg if this is a subclassed
 control, or kMainMsg if this is a window or non-subclassed control. <br>
If your handler routine returns a sequence then win32lib does not process
the message and the first element in the sequence is returned to Windows.
<p>
 Note that if <em>pRtnId</em> is <strong>-1</strong> then this removes a previously set
message handler.
<p>
<p>
Example:
<pre>
  function myhandler(integer pSource, atom hWnd, atom iMsg, atom wParam,  atom lParam)
     if wParam = VK_ENTER then
       if iMsg = WM_KEYDOWN then
         ...
       else -- WM_KEYUP
         ...
       end if
     end if
     return {0}
  end function
  setWinMsgHandler( myFld, {WM_KEYDOWN, WM_KEYUP}, routine_id(myhandler))
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="STARTAPP">[<i>proc</i>]<br>startApp</a> (object CallbackRtns)</h2>
<h3>Start the application running.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p>This opens the main window, setting focus on the first 'focusable' control
and then handles over control to Windows.
<p>
 The <em>CallbackRtn</em> parameter is either a single routine_id or a list of three routine_ids. <br>
 If it is a single routine_id is can be either <a href="#W32NOCALLBACK">w32NoCallBack</a> or the routine id
 of a callback routine inside your application. See <a href="EVENT.htm#SETCALLBACK">setCallback</a> for more
details.
<p>
 If <em>CallbackRtns</em> is a list of three routine_ids, it takes the format of ... <br>
 <li> integer AppCallback: Same as the single routine_id version above.
 <li> integer AlternateCAllback: If <em>AppCallback</em> is -1 then this is used instead.
 <li> integer AppMain: Either -1, or a routine_id of a routine that is called prior
 to the library start up. The <em>AppMain</em> routine is passed a single sequence, which
 is the command_line() parameters. If <em>AppMain</em> returns a zero then the library
continues executing otherwise the library stops immediately.
<p>
Example:
<pre>
  startApp({routine_id("AppCallback"), routine_id("LocalCallback"), routine_id("AppMain")})
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="SUBCLASSCONTROL">[<i>func</i>]<br>subClassControl</a> (sequence Id,  atom hWnd)</h2>
<h3>Used to access Windows created controls as if they were win32lib controls.</h3>
<h3>Returns: INTEGER: A win32lib control id. ZERO if it fails.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>Id</em> is a sequence {ControlType, ParentID} <br>
 <em>hWnd</em> is the Windows handle to the control.
 Attempting to subclass a control several times results in the same id being returned. <br>
Note that some Windows controls, notably ListViews and TabControls, have less many properties
than their counterparts in the library. Thus:
 <li> There is no attempt to guess on which tab item the children of a TabControl are, and they are not subclassed as a result;
 <li> ListViews don't have a buitin column sort order, so a default one is  set up on subclassing.
<p>
More generally, children of subclassed controls are not automatically subclassed by the library,
unless their class is determined by the parent. Thus, items in item containers are created,
 but otherwise no attempt is made. See how <a href="#FINDVHILDREN">findVhildren</a>() or <a href="ATTRIBUTE.htm#GETCHILDREN">getChildren</a>() cope with this.
<p>
Example
<pre>
      -- Use an edit fld that was created outside of win32lib as if it was
      -- a normal win32lib control.
    newid = subClassControl( {EditText, myWindow}, winhandle)
<p>
      -- Use an external bitmap as if it was a pixmap.
    bmh = loadBitmapFromFile("..\\demoresources\\java.bmp")
    myPixMap = subClassControl({Pixmap, 0}, bmh)
    setPenColor(myPixMap, Cyan)
    drawRectangle(myPixMap, 1, 0, 0, 40, 40)
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32EVENTCODE">[<i>const</i>]<br>w32EventCodes</a> </h2>
<h3> List of all recognised event codes, in the same order as <a href="EVENT.htm#W32EVENTNAME">w32EventNames</a>.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p><p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32EVENTNAME">[<i>const</i>]<br>w32EventNames</a> </h2>
<h3>List of all recognised event names, without the "w32H" prefix.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p><p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HACTIVATE">[<i>const</i>]<br>w32HActivate</a> </h2>
<h3>Occurs for Windows only and after the window is opened.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}
<p>
 This is typically triggered by <a href="SYSTEM_ATTRIBUTE.htm#WINMAIN">WinMain</a>, or <a href="ATTRIBUTE.htm#OPENWINDOW">openWindow</a>. It differs from
 w32HOpen in that it is triggered <strong>after</strong> a window is opened but before
control is returned to your application.
<p>
Typically, code that is run at this point does a setFocus or other
initialization..
<p>
 This event is only triggered for a <a href="CONTROL.htm#WINDOW">Window</a>.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HAFTEREVENT">[<i>const</i>]<br>w32HAfterEvent</a> </h2>
<h3>Occurs after normal Windows processing of an event (any type).</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { atom winmsg, atom wParam, atom lParam, atom lWinReturn }
<p>
After the message is processed by the Windows, Win32lib, and any event
handlers, this is triggered.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HBREAK">[<i>const</i>]<br>w32HBreak</a> </h2>
<h3>Invoked whenever the Ctrl-Break key is pressed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {integer keyCode, integer shift}
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HCHANGE">[<i>const</i>]<br>w32HChange</a> </h2>
<h3>Selection or Value in a control is changed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> The contents of <em>parms</em> varies with the type of control. <strong>Note</strong> that they are
 only available when using the <a href="EVENT.htm#SETHANDLER">setHandler</a>() interface.
<p>
 For the List and Combo family of controls the parms are ... <br>
 { Event qualifier (integer), Index of affected item (integer) } <br>
<p>
For EditText or RichEdit controls, the parameter sequence is simply {w32CHG_Chg}. In order
to get RichEdit controls to fire this event, you must have enabled them by calling --
 <a href="#SETRECHANGENOTTIFICATION">setREChangeNottification</a>(1).
<p>
 For <a href="CONTROL.htm#LISTVIEW">ListView</a> the parms are ...
<ul>
 <li>   Row Index,
 <li>   Column Index,
 <li>   New State Flags,
 <li>   Changed Flags,
 <li>   Mouse's X location,
 <li>   Mouse's Y location,
 <li>   lParam (user data) field
 </ul> 
<p>
 For <a href="CONTROL.htm#MONTHCALENDAR">MonthCalendar</a> the parms are ...
if the event is invoked by a date change cuased by pressing one of the
 prev/next buttons or by paging up/down etc, then the parms are an empty 
 sequence. <br>
If the event is invoked by an explicit date or date range being clicked then
 the parms returns two dates. <br>
<ul>
 <li>   Earliest Date,
 <li>   Latest Date
 </ul> 
<p>
 <strong>Note</strong>, for <a href="CONTROL.htm#COMBO">Combo</a> box controls, this is triggered when either the edit box area
has been changed by the user, or when the list item selection is about to change.
 If the user is editing the edit box area then <a href="VALUE.htm#GETTEXT">getText</a> will return the current
value of the edit box, but if this event was triggered due to the user selecting
 a new item, <a href="VALUE.htm#GETTEXT">getText</a> will return the previously selected item and you must
 use <a href="LIST_CONTROL.htm#GETITEM">getItem</a>(id, 0) to retrieve the new selection value.
<p>
To determine the new value of the control, use the appropriate
 function - <a href="VALUE.htm#GETTEXT">getText</a>, <a href="VALUE.htm#ISCHECKED">isChecked</a>, <a href="LIST_CONTROL.htm#GETINDEX">getIndex</a> etc.
<p>
For Menu and Popup controls, w32HChange is triggered whenever an item is selected.
The data sequence is {id of item, state of item} then.
<p>
For UpDown controls, w32HChange is triggered whenever an arrow is clicked.
The data sequence is {current position, amount of change} then. If the change is accepted, the new
positions depends on the control's range, and on whether it has the UDS_WRAP syle.
<p>
For TabControls, the w32HChange event is fired when an attempt to change the currently selected item is made. The associated data is {new item index,old item index}.
If the handler sets the return value, that returned value must be an integer
specifying which is the index of the tab to change to. A value of -1 just aborts the change.
<p>
 For ComboBoxEx controls, the parameters are: {CHG_SEL,reason}, where <em>reason</em> explains why the edit operation ended.
This enables ou to monitor semection changes as wel. The reason codes are:
 <li> CBENF_KILLFOCUS: control lost focus
 <li> CBENF_RETURN: the Enter key was hit to complete the edit operation
 <li> CBENF_ESCAPE: the Escape key as hit to cancel the edit operation
 <li> CBENF_DROPDOWN: the dropdown button was pressed.
If the handler sets the return value, the change will be rejected, and accepted otherwise.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HCLICK">[<i>const</i>]<br>w32HClick</a> </h2>
<h3>Invoked when the left mouse button is 'clicked' or a Button control is used.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {  }
<p>
 This event is triggered when a <a href="CONTROL.htm#PUSHBUTTON">PushButton</a>, <a href="CONTROL.htm#CHECKBOX">CheckBox</a> or <a href="CONTROL.htm#TABITEM">TabItem</a> is clicked,
or by a MenuItem selection.
<p>
 It is <strong>not</strong> the same as a Mousedown event. For a <em>click</em> to happen, the left
mouse down and up events must be in the same control, be no more than 2 pixels
from each other, and the up event must be within a double-click period
of the down event.
<p>
The use of accelerator keys, generates a mouse click event.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HCLOSE">[<i>const</i>]<br>w32HClose</a> </h2>
<h3> A <a href="CONTROL.htm#WINDOW">Window</a> is closed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}
<p>
 This typically occurs via <a href="CONTROL.htm#CLOSEWINDOW">closeWindow</a>, although the user can select
 the <em>close</em> control on the window as well.
<p>
Closing a window does not actually destroy it (unless it is the
 main window; the window is merely hidden. Refer to <a href="CONTROL.htm#CLOSEWINDOW">closeWindow</a> for
more details.
<p>
 If the handler chain sets the return value using <a href="EVENT.htm#RETURNVALUE">returnValue</a>() with a non-zero parameter,
win32lib aborts the Close operation, as if it hadn't been invoked. In this
way it is possible to do a conditional close.
<p>
 This event is only triggered for a <a href="CONTROL.htm#WINDOW">Window</a>.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HCLOSEUP">[<i>const</i>]<br>w32HCloseUp</a> </h2>
<h3>The dropdown portion of a combobox has just been closed, or the menu was just closed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}  <br>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HDATACHANGE">[<i>const</i>]<br>w32HDataChange</a> </h2>
<h3>Value in a List or a Combo's list has changed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> is { eventqual, index }
<ul>
 <li>   Event qualifier (integer)
<ul>
 <li> w32CHG_Add = Item added
 <li> w32CHG_Chg = Item changed
 <li> w32CHG_Del = Item deleted
 </ul> 
 <li>   Index of affected item (integer)
 </ul> 
 <strong>Note</strong> this event is only available when using the <a href="EVENT.htm#SETHANDLER">setHandler</a>() interface.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HDESTROY">[<i>const</i>]<br>w32HDestroy</a> </h2>
<h3>The control is about to be destroyed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}
<p>
 This is triggered when <a href="ATTRIBUTE.htm#DESTROY">destroy</a>() has been called and before the control
is actually destroyed. It is designed for the application to perform any
cleaning up that might be required.
<p>
If the event handler return -1, then the control is not destroyed. This
enables the application to prevent a control from being destroyed.
<p>
 <strong>Note</strong>, when the main window is closed, the <a href="ATTRIBUTE.htm#DESTROY">destroy</a> routine is called
automatically as well.
<p>
<pre>
  procedure onDestroy_MsgWnd(integer self, integer event, sequence parms)
     -- Don't allow it to go until the messages have been
     -- acknowledged by the operator.
     if vMsgAcknowledged = w32False then
        returnValue(-1)
     end if
  end procedure
  setHandler(MsgWnd, w32HDestroy, routine_id("onDestroy_MsgWnd"))
<p>
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HDRAGANDDROP">[<i>const</i>]<br>w32HDragAndDrop</a> </h2>
<h3>Something has been dragged onto the control or window.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer id, sequence data }
<p>
 This is triggered by the user dragging and dropping a file or a <a href="CONTROL.htm#LISTVIEW">ListView</a>
 or <a href="CONTROL.htm#TREEVIEW">TreeView</a> item onto a control or window. <br>
<p>
 If <em>id</em> is zero, then windows is dropping one or more files onto the
 control or window.  In this case, the handler is called multiple times: <br>
 In the first call, <em>data</em> contains one integer. This is the number of
 files about to be passed to your handler routine. <br>
 Then your handler routine is called once per file being passed, <em>data</em> being
the named of the passed file. If it returns a
 nonzero value, the dropping stops with this file./n 
 The final call to the handler is when <em>data</em> is an empty sequence. This
signifies that no more files will be passed.
<p>
For example, the following code adds the name of the files to TheList.
<p>
<pre>
      integer vFileCount
      procedure dropped( integer self, integer event, sequence parms )
          if parms[1] = 0 then
              if length(parms[2]) = 1 then
                  -- Opening call, the file count.
                   <a href="ATTRIBUTE.htm#SETENABLE">setEnable</a>(actionButton, w32False)
                  eraseItems(TheList)
                  vFileCount = parms[2]
<p>
              elsif length(parms[2]) = 0 then
                  -- Final call.
                   <a href="ATTRIBUTE.htm#SETENABLE">setEnable</a>(actionButton, w32True)
<p>
              else
                  -- add the file name to the list
                   <a href="LIST_CONTROL.htm#ADDITEM">addItem</a>( TheList, parms[2] )
              end if
          end if
      end procedure
      setHandler(TheList, w32HDragAndDrop, routine_id("dropped"))
</pre>
<p>
 If <em>id</em> is not zero, then it is the Win32Lib id of the control from
which items have been dragged.  The second parameter is a sequence of the
item id's. Since both the source and the destination are notified,
there is a third parameter, 1 for the destination and 0 for the source.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HDROPDOWN">[<i>const</i>]<br>w32HDropDown</a> </h2>
<h3>The dropdown portion of a combobox is about to be displayed, or the menu is about to be displayed..</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}  <br>
 This can be used to dynamically load the values into a combobox/menu. 
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HEVENT">[<i>const</i>]<br>w32HEvent</a> </h2>
<h3>An event (any type) has occured.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { atom winmsg, atom wParam, atom lParam }
<p>
Before the events are processed by any of the trap routines or
default Windows routines, the w32HEvent is triggered.
<p>
 If you want to skip the default Windows processing of the <em>winmsg</em>,
 pass a value to the <a href="EVENT.htm#RETURNVALUE">returnValue</a>() routine.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HGOTFOCU">[<i>const</i>]<br>w32HGotFocus</a> </h2>
<h3> A <a href="CONTROL.htm#CONTROL">control</a> (or <a href="CONTROL.htm#WINDOW">Window</a>) receives focus.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}
<p>
 <em>Focus</em> means that keyboard events are directed to that control.
 Static controls (such as <a href="CONTROL.htm#LTEXT">LText</a>) cannot get focus.
<p>
When a Win32Lib window gets focus, it will give focus back to the
last control in the window that had focus. If there are no controls in
the window that can receive focus, the focus will remain with the
window.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HIDLE">[<i>const</i>]<br>w32HIdle</a> </h2>
<h3>Invoked whenever the application is not processing Windows messages.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {integer Counter, atom MsgAddr}
<p>
Your application will only start getting these events once you have
 called <a href="EVENT.htm#SETIDLE">setIdle</a>(w32True).
<p>
 The <em>Counter</em> starts at 1 for each time the handler is invoked after
the Windows Message Queue becomes empty again. That is, this handler
will be invoked repeatedly, while there are no messages to be processed.
 You can tell when you application becomes idle when the <em>Counter</em> value
 is 1. Values higher than 1 indicate that the application is <strong>still</strong> idle.
When the application becomes active again, the handler is called with a
 <em>Counter</em> value of -1 and the <em>MsgAddr</em> contains the message that
'woke up' the application.
<p>
 When the value of <em>Counter</em> is greater than -1, the <em>MsgAddr</em> is the
address of the Msg structure that contains the last Windows
 message before becoming idle. When the <em>Counter</em> is -1, this contains
the message that is about to be processed.
<p>
 If your handler routine calls <a href="EVENT.htm#RETURNVALUE">returnValue</a>, passing any value, this
will immediately wake up your application and cause it to process the
 information contained in the structure pointer to by <em>MsgAddr</em>. This
means that you are expected to place into this structure, valid data
to simulate a Windows event.
<p>
 <strong>Note</strong>: This event is not supported by the onXXX[] interface.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HKEYBOARD">[<i>const</i>]<br>w32HKeyboard</a> </h2>
<h3>Occurs when keys are held down and about to be released.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>params</em> = {virtual_codes,extended_flags,scan_codes,repeat_count,shifts} where:
 <li> virtual_codes is the list of virtual key codes for keys held
 <li> extended_flags is a sequence of 1's and 0's. A key has 1 if it is extended (right shift, grey key,...)
 <li> scan_codes is the corresponding list of keyboard scan codes;
 <li> repeat_counts is the sequence of repeat counts for the keys
<p>
 <strong>Note</strong>: this event is not supported by the onXXX[] routines.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HKEYDOWN">[<i>const</i>]<br>w32HKeyDown</a> </h2>
<h3>Key is pressed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {integer keyCode, integer shift}
<p>
 The <em>keyCode</em> is "raw" value of the key. The primary purpose
 of onKeyDown is to trap "special" keys not reported by <a href="#ONKEYPRES">onKeyPress</a>.
<p>
 The <em>shift</em> parameter has bits set indicating if the shift,
control, alt or Windows keys are pressed. The masks for each key are:
<p>
 <li> <strong>ShiftMask</strong>
 <li> <strong>ControlMask</strong>
 <li> <strong>AltMask</strong>
 <li> <strong>WinMask</strong>
<p>
For example, to see if the Shift+Backspace key was pressed, you could
write:
<p>
<pre>
-- shift+backspace?
if  and_bits( shift, ControlMask )
and keyCode = VK_BACK then
-- shift+backspace held
end if
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HKEYPRES">[<i>const</i>]<br>w32HKeyPress</a> </h2>
<h3>"Printable" key is pressed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer keyCode, integer shift,integer released}
<p>
 The <em>keyCode</em> is ANSII value of the key. Only "visible" keys are
reported with this function. To trap "special" keys (such as the
 cursor keys), use <a href="#W32KEYDOWN">w32KeyDown</a> or w32HKeyboard.
The third parameter is 1 when the key is released and 0 else.
<p>
For example:
<p>
<pre>
      -- is it the letter 'a'?
      if keyCode = 'a' then
          -- it's the letter a
      end if
</pre>
<p>
 The <em>shift</em> parameter has bits set indicating the if the shift,
control, and alt keys are pressed. The masks for each key are:
<p>
 <li> <strong>ShiftMask</strong>
 <li> <strong>ControlMask</strong>
 <li> <strong>AltMask</strong>
<p>
For example, to see if the control key is held down, you could write:
<p>
<pre>
-- control key held down?
if and_bits( shift, ControlMask ) then
-- control key is held down
end if
</pre>
<p>
If you want to to Windows to ignore the key, set the return value to -1.
<p>
<pre>
if find(keyCode,"0123456789") then
returnValue(-1) -- ignore digits.
end if
</pre>
<p>
If you want to to Windows to use a different key, set the return value to the new key.
<p>
<pre>
-- collect characters into the password, but don't show them.
PassWord &= keyCode
returnValue('-') -- return a dash for each character entered.
</pre>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HKEYUP">[<i>const</i>]<br>w32HKeyUp</a> </h2>
<h3>Key is released.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {integer keyCode, integer shift}
<p>
 The parameter sequence is the same as for <a href="EVENT.htm#W32HKEYDOWN">w32HKeyDown</a>.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HLOSTFOCU">[<i>const</i>]<br>w32HLostFocus</a> </h2>
<h3> A <a href="CONTROL.htm#WINDOW">Window</a> or <a href="CONTROL.htm#CONTROL">control</a> loses focus.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {focusControl} <br>
 <em>focusControl</em> is the id of the control that had the focus. This is normally the
 same as the <em>self</em> parameter but in the case where <em>self</em> is a parent Window
 <em>focusControl</em> is the control within that window that had focus.
<p>
 <strong>Note</strong>: That <em>focusControl</em> parameter is not supported with the onXXX interface.
<p>
 <em>Focus</em> means that keyboard events are directed to that control. See
 <a href="EVENT.htm#W32HGOTFOCU">w32HGotFocus</a>.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HMOUSE">[<i>const</i>]<br>w32HMouse</a> </h2>
<h3>Event triggered when a mouse action takes place.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer event, integer x, integer y, integer shift, integer wheelmove } <br>
<p>
 The <em>event</em> parameter will be one of the following values:
<p>
 <li> <strong>MouseMove</strong>: the mouse was moved
 <li> <strong>LeftDown</strong>: the left mouse button was pressed
 <li> <strong>RightDown</strong>: the right mouse button was pressed
 <li> <strong>LeftUp</strong>: the left mouse button was released
 <li> <strong>RightUp</strong>: the right mouse button was released
 <li> <strong>LeftDoubleClick</strong>: the left mouse button was double clicked
 <li> <strong>RightDoubleClick</strong>: the right mouse button was double clicked
 <li> <strong>WheelMove</strong>: The mouse wheel has moved.
<p>
 The <em>x</em> and <em>y</em> parameters specify where the mouse is located.
 If the mouse has been <em>grabbed</em> (see <a href="MOUSE.htm#CAPTUREMOUSE">captureMouse</a>), the values
 of <em>x</em> and <em>y</em> can be negative if the mouse is outside the
client area.
<p>
 The <em>shift</em> parameter has bits set indicating the if the keyboard
shift, control, and alt keys are pressed, and which mouse button was
 pressed. <br>
The masks are:
<p>
 <li> <strong>ShiftMask</strong> --> Left and/or Right Shift key down
 <li> <strong>ControlMask</strong> --> Left and/or Right Control key down
 <li> <strong>AltMask</strong> --> Left and/or Right Alt key down
 <li> <strong>WinMask</strong> --> Left and/or Right Windows key down
 <li> <strong>KeyMask</strong> --> Any of the Shift/Control/Alt keys down.
 <li> <strong>LeftBtnMask</strong> --> Left mouse button down.
 <li> <strong>RightBtnMask</strong> --> Right mouse button down.
 <li> <strong>MiddleBtnMask</strong> --> Middle mouse down.
 <li> <strong>BtnMask</strong> --> Any mouse button down.
<p>
<p>
<p>
<pre>
-- Is one of the shift keys is held down?
if and_bits( shift, ShiftMask ) then
. . .
end if
-- Check for the combination Ctrl and Right Mouse.
if and_bits( shift, ControlMask+RightBtnMask ) then
. . .
end if
</pre>
<p>
 <strong>NOTE</strong> <em> <strong>wheelmove</strong> is not supported for the onXXX interface, only the</em>
 <em>setHandler interface is supported.</em> <br>
 The <em>WheelMove</em> parameter describes the direction and size of the mouse wheel
 movement. A value <strong>greater</strong> than 0 means that the wheel moved 'up' or away
 from the user, and a value <strong>less</strong> than zero means the wheel moved 'down'
 or towards the user. And of course, a value of <strong>0</strong> means that
 it didn't move at all. <br>
The speed, or size, of the movement is the absolute value of this parameter. You
 can use this in conjunction with <a href="MOUSE.htm#GETWHEELSCROLLLINE">getWheelScrollLines</a>() to work out how the
mouse wheel movement should effect your application.
<p>
 Example: <br>
<pre>
   TopLine += parms[5] * getWheelScrollLines()
   RefreshDisplay()
</pre>
<p>
 <strong>Special Note:</strong> If you call returnValue(0) inside your mouse handler
routine, this has the effect of causing the control that received
the mouse event to ignore it. This is only needed in rare circumstances
where your processing of the mouse event interferes with the control's
normal processing. For example, if you trap a Right Down event to
cause a popup menu to show, sometimes you also need to tell the
underlying control to ignore the button down event 'cos you used it.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HMOUSETRAP">[<i>const</i>]<br>w32HMouseTrap</a> </h2>
<h3> Event triggered when a mouse action takes place inside a defined <a href="MOUSETRAP.htm#MOUSETRAP">MouseTrap</a> for a control.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer event, integer x, integer y, integer z, sequence traps, integer id, integer shift } <br>
<p>
 The <em>event</em> parameter will be one of the following values:
<p>
 <li> <strong>MouseMove</strong>: the mouse was moved
 <li> <strong>LeftDown</strong>: the left mouse button was pressed
 <li> <strong>RightDown</strong>: the right mouse button was pressed
 <li> <strong>LeftUp</strong>: the left mouse button was released
 <li> <strong>RightUp</strong>: the right mouse button was released
 <li> <strong>LeftDoubleClick</strong>: the left mouse button was double clicked
 <li> <strong>RightDoubleClick</strong>: the right mouse button was double clicked
 <li> <strong>WheelMove</strong>: The mouse wheel has moved.
<p>
 The <em>x</em> and <em>y</em> parameters specify where the mouse is located.
 If the mouse has been <em>grabbed</em> (see <a href="MOUSE.htm#CAPTUREMOUSE">captureMouse</a>), the values
 of <em>x</em> and <em>y</em> can be negative if the mouse is outside the
client area.
<p>
 The <em>z</em> parameter only applies to WheelMouse events and is the amount and direction
that the wheel moved. Positive values mean it move away from the user (up), and negative
values mean that it moved towards the user (down).
<p>
 The <em>traps</em> parameter is a list of one or more mousetrap areas that are
 under the mouse pointer. Each mousetrap is a sequence of 8 elements: <br>
 <li> integer: <strong>zorder</strong>, the higher numbers are further in the background. The
initial value is zero when a mousetrap is created.
 <li> integer: <strong>left</strong>, the leftmost position of the mousetrap area
 <li> integer: <strong>top</strong>, the topmost position of the mousetrap area
 <li> integer: <strong>right</strong>, the rightmost position of the mousetrap area
 <li> integer: <strong>bottom</strong>, the bottommost position of the mousetrap area
 <li> integer: <strong>id</strong>, the id of this mousetrap area.
 <li> object: <strong>userdata</strong>, the data set by calling <a href="MOUSETRAP.htm#SETTAGMOUSETRAP">setTagMouseTrap</a>(). This is
never used by win32lib and is intended for use by the user for anything.
 <li> sequence: <strong>filters</strong>, a list of zero or more mouse event codes that are used
to filter in this mousetrap. Initially this set to {WM_LBUTTONDOWN} when
 then mousetrap is created. It can be changed by calling <a href="MOUSETRAP.htm#FILTERMOUSETRAP">filterMouseTrap</a>().
<p>
 The <em>id</em> parameter is the control id that received the mouse event.
<p>
 The <em>shift</em> parameter is the same as for the <a href="EVENT.htm#W32HKEYDOWN">w32HKeydown</a> event.
<p>
 <strong>Note</strong>: This event is only invoked for MouseTraps that are enabled. When
a mousetrap is created it is automatically enabled, but this can be changed
 by calling <a href="MOUSETRAP.htm#ENABLEMOUSETRAP">enableMouseTrap</a>().
<p>
<pre>
sequence mt
mt = {}
 mt &= <a href="MOUSETRAP.htm#CREATEMOUSETRAP">createMouseTrap</a>(vWin, {10,10,30,30})
 mt &= <a href="MOUSETRAP.htm#CREATEMOUSETRAP">createMouseTrap</a>(vWin, {30,10,50,30})
 mt &= <a href="MOUSETRAP.htm#CREATEMOUSETRAP">createMouseTrap</a>(vWin, {10,30,30,50})
 mt &= <a href="MOUSETRAP.htm#CREATEMOUSETRAP">createMouseTrap</a>(vWin, {30,30,50,50})
 <a href="MOUSETRAP.htm#FILTERMOUSETRAP">filterMouseTrap</a>(vWin, mt[2], {WheelMove})
 <a href="MOUSETRAP.htm#FILTERMOUSETRAP">filterMouseTrap</a>(vWin, mt[4], {WheelMove})
<p>
procedure MouseTrap_MyWindow(integer self, integer event, sequence parms)
sequence lMsg
<p>
lMsg = sprintf("event=%d x=%d y=%d", parms[1..3])
for i = 1 to length(parms[4]) do
lMsg &= sprintf("(depth=%d left=%d top=%d right=%d bottom=%d id=%d) ", parms[4][i])
end for
showMessage(lMsg)
-- Only interested in the top mousetrap area...
if parms[4][1][6] = mt[2] then
-- Wheel moved inside mousetrap #2
elsif parms[4][1][6] = mt[1] then
-- Left Button down inside mousetrap #1
end if
end procedure
setHandler(vWin, w32HMouseTrap, routine_id("MouseTrap_BasicWindow"))
<p>
</pre>
<p>
 If the hander for the w32HMouseTrap event returns any value, by calling <a href="EVENT.htm#RETURNVALUE">returnValue</a>(),
the mouse event is not passed through to the underlying control.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HNOTIFY">[<i>const</i>]<br>w32HNotify</a> </h2>
<h3>A control is forwarding a notification event.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer sender, integer event, object userdata, sequence parms }
<p>
 A control gets this event when the <em>sender</em> control has just processed an
 event of type <em>event</em> with parameters <em>parms</em>. This only happens
 to controls that have told the <em>sender</em> that they want to be notified via the
 <a href="EVENT.htm#REGISTERNOTIFICATION">registerNotification</a>() routine. The <em>userdata</em> is the same as that passed
 in the <a href="EVENT.htm#REGISTERNOTIFICATION">registerNotification</a>() routine.
<p>
An example of using this facility could be if you wish a control to be notified whenever
its parent is resized. Or when a specific control gets focus.
<p>
 <strong>Note</strong>: This event is not supported by the onXXX interface.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HOPEN">[<i>const</i>]<br>w32HOpen</a> </h2>
<h3> A <a href="CONTROL.htm#WINDOW">Window</a> is opened.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {}
<p>
 This is typically triggered by <a href="SYSTEM_ATTRIBUTE.htm#WINMAIN">WinMain</a>, or <a href="ATTRIBUTE.htm#OPENWINDOW">openWindow</a>,
before the window is visible by the user.
<p>
Typically, code that is run at this point does some sort of
initialization.
<p>
 This event is only triggered for a <a href="CONTROL.htm#WINDOW">Window</a>.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HPAINT">[<i>const</i>]<br>w32HPaint</a> </h2>
<h3> A portion or all of a <a href="CONTROL.htm#WINDOW">Window</a> needs to be redrawn.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {atom x1, atom y1, atom  x2, atom  y2}
<p>
The parameters indicate the portion of the window that needs
to be updated.
<p>
Not only does {x1,y1,x2,y2} define the area that needs to be redrawn,
Windows restricts your application to only being able to draw in those
areas! If your application tries to write outside this rectangle on an
paint event, nothing will be drawn there.
<p>
Since Windows expects you application to be able to redraw any part
of the application's window when responding to an paint event, this
means that the paint routine must know how to render any part of the
window.
<p>
For programs without any graphics and text drawn on the window, there
is no problem - since there are no graphics, there is nothing to update.
<p>
If the application is fairly lightweight (such as a tic-tac-toe game),
you simply choose to ignore the parameters passed to your paint handler,
and redraw the entire window with each paint event.
<p>
If there is sufficient graphics to make the task of repainting the
window complex, the best approach is probably to do double-buffering
 with a <a href="CONTROL.htm#PIXMAP">Pixmap</a>.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HPAUSE">[<i>const</i>]<br>w32HPause</a> </h2>
<h3>Invoked whenever the Pause key is pressed.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {integer keyCode, integer shift}
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HRESIZE">[<i>const</i>]<br>w32HResize</a> </h2>
<h3> A <a href="CONTROL.htm#WINDOW">Window</a> has been resized.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer style, integer x, integer y, integer delta_x,integer delta_y}
<p>
 The <em>style</em> is one of the following:
<p>
 <li> <strong>SIZE_RESTORED</strong>: Window was restored
 <li> <strong>SIZE_MINIMIZED</strong>: Window was minimized
 <li> <strong>SIZE_MAXIMIZED</strong>: Window was maximized
<p>
 The <em>x</em> and <em>y</em> parameters are the new size of the id, not counting title bars and borders. <br>
<p>
 If your handler returns a value via <a href="EVENT.htm#RETURNVALUE">returnValue</a>() then the
control is forced to be repainted. If it returns a zero (0) then the control's
background is not erased before repainting otherwise it is erased first.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HSCROLL">[<i>const</i>]<br>w32HScroll</a> </h2>
<h3>Triggered when scrollbar value has changed, and when user has stopped scrolling.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = { integer position, integer ScrollType, integer WhichBar }
<p>
 <em>position</em> indicates the new value of a scrollbar or trackbar.
<p>
 <em>ScrollType</em> is one of <a href="..\win32_constants.htm#scroll Bar Commands">these values</a>. <br>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HTIMER">w32HTimer</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32HTIMER">[<i>const</i>]<br>w32HTimer</a> </h2>
<h3>A timer is triggered.</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> <em>parms</em> = {atom TimerID}
<p>
Timers are clocks that are maintained by Windows, and they trigger these
events at a user-specified interval, measured in milliseconds.
<p>
They are created and removed with the calls:
<p>
 <li> <a href="LOW_LEVEL_ROUTINE.htm#SETTIMER">setTimer</a>( window, TimerID, milliseconds )
 <li> <a href="LOW_LEVEL_ROUTINE.htm#KILLTIMER">killTimer</a>( window, TimerID )
<p>
A timer is not treated as an actual control. Rather, the event is sent
to the window that the timer is associated with.
<p>
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32START">w32Start </a>
<hr>
<h4>Documentation for Win32lib v0.70.18<br>
<a href="index.htm#makedocTOC">Table of Contents</a></h4>
<h2><a name="W32START">[<i>incl</i>]<br>w32Start </a> (w32start.ew)</h2>
<h3> This is an optional <em>include</em> file. It defines a default application callback routine</h3>
Category: <a href="#EVENT">Events</a><br>
<p><p> and uses <a href="EVENT.htm#STARTAPP">startApp</a>() with the application-defined "AppCallback" as the application's
callback routine,  and the application-defined "main" routine as the
application's start up routine.
<p>See Also: 
<a href="#APPCALLBACK">AppCallback</a>,
<a href="#CLOSEAPP">closeApp</a>,
<a href="#DOEVENT">doEvents</a>,
<a href="#ENABLEHANDLER">enableHandler</a>,
<a href="#GETHANDLER">getHandler</a>,
<a href="#GETLASTMSG">getLastMsg</a>,
<a href="#GETNOTIFICATIONDATA">getNotificationData</a>,
<a href="#GETRETURNVALUE">getReturnValue</a>,
<a href="#INVOKEHANDLER">invokeHandler</a>,
<a href="#MAIN">main</a>,
<a href="#NEWEVENT">newEvent</a>,
<a href="#REGISTERNOTIFICATION">registerNotification</a>,
<a href="#REMOVEHANDLER">removeHandler</a>,
<a href="#RESETRETURNVALUE">resetReturnValue</a>,
<a href="#RETURNVALUE">returnValue</a>,
<a href="#SETCALLBACK">setCallback</a>,
<a href="#SETDEFAULTPROCESSING">setDefaultProcessing</a>,
<a href="#SETEVENTLOOP">setEventLoop</a>,
<a href="#SETHANDLER">setHandler</a>,
<a href="#SETHANDLERPROTECTION">setHandlerProtection</a>,
<a href="#SETIDLE">setIdle</a>,
<a href="#SETMOUSECLICK">setMouseClick</a>,
<a href="#SETNOTIFICATIONSTATE">setNotificationState</a>,
<a href="#SETNOTIFYHANDLER">setNotifyHandler</a>,
<a href="#SETPROTECTEDHANDLER">setProtectedHandler</a>,
<a href="#SETWINMSGHANDLER">setWinMsgHandler</a>,
<a href="#STARTAPP">startApp</a>,
<a href="#SUBCLASSCONTROL">subClassControl</a>,
<a href="#W32EVENTCODE">w32EventCodes</a>,
<a href="#W32EVENTNAME">w32EventNames</a>,
<a href="#W32HACTIVATE">w32HActivate</a>,
<a href="#W32HAFTEREVENT">w32HAfterEvent</a>,
<a href="#W32HBREAK">w32HBreak</a>,
<a href="#W32HCHANGE">w32HChange</a>,
<a href="#W32HCLICK">w32HClick</a>,
<a href="#W32HCLOSE">w32HClose</a>,
<a href="#W32HCLOSEUP">w32HCloseUp</a>,
<a href="#W32HDATACHANGE">w32HDataChange</a>,
<a href="#W32HDESTROY">w32HDestroy</a>,
<a href="#W32HDRAGANDDROP">w32HDragAndDrop</a>,
<a href="#W32HDROPDOWN">w32HDropDown</a>,
<a href="#W32HEVENT">w32HEvent</a>,
<a href="#W32HGOTFOCU">w32HGotFocus</a>,
<a href="#W32HIDLE">w32HIdle</a>,
<a href="#W32HKEYBOARD">w32HKeyboard</a>,
<a href="#W32HKEYDOWN">w32HKeyDown</a>,
<a href="#W32HKEYPRES">w32HKeyPress</a>,
<a href="#W32HKEYUP">w32HKeyUp</a>,
<a href="#W32HLOSTFOCU">w32HLostFocus</a>,
<a href="#W32HMOUSE">w32HMouse</a>,
<a href="#W32HMOUSETRAP">w32HMouseTrap</a>,
<a href="#W32HNOTIFY">w32HNotify</a>,
<a href="#W32HOPEN">w32HOpen</a>,
<a href="#W32HPAINT">w32HPaint</a>,
<a href="#W32HPAUSE">w32HPause</a>,
<a href="#W32HRESIZE">w32HResize</a>,
<a href="#W32HSCROLL">w32HScroll</a>,
<a href="#W32HTIMER">w32HTimer</a>
<hr>
