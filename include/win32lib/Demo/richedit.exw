--  code generated by Win32Lib IDE v1.0.4 Build Jan-30-2008

constant TheProgramType="exw" 

include std/text.e
include std/win32/msgbox.e
include Win32lib.ew
without warning

--------------------------------------------------------------------------------
--  Window Win
constant Win = createEx( Window, "RichEdit Demo", 0, Default, Default, 400, 460, 0, 0 )
constant RE = createEx( RichEdit, "", Win, 20, 20, 360, 200, w32or_all({ES_NOHIDESEL,ES_AUTOHSCROLL,WS_HSCROLL}), 0 )
constant CF = createEx( PushButton, "Change Font", Win, 20, 248, 110, 28, 0, 0 )
constant GF = createEx( PushButton, "Get Font", Win, 140, 248, 110, 28, 0, 0 )
constant GT = createEx( PushButton, "Get Text", Win, 260, 248, 110, 28, 0, 0 )
constant SB = createEx( PushButton, "Bullet", Win, 20, 288, 110, 28, 0, 0 )
constant UN = createEx( PushButton, "Undo", Win, 260, 288, 110, 28, 0, 0 )
constant FRT = createEx( PushButton, "Find/Replace", Win, 140, 290, 110, 28, 0, 0 )
constant OF = createEx( PushButton, "&Open File", Win, 20, 328, 110, 28, 0, 0 )
constant FT = createEx( PushButton, "Find", Win, 140, 328, 110, 28, 0, 0 )
constant WW = createEx( PushButton, "Wrap Off", Win, 260, 328, 110, 28, 0, 0 )
constant SF = createEx( PushButton, "&Save As File", Win, 20, 370, 110, 28, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------
-- General

integer WordWrap
    WordWrap = False

-- name of the currently open file
sequence openFileName
    openFileName = ""

sequence FileToRead
    FileToRead = openFileName

sequence FileToSave
    FileToSave = ""

-- default file types the app recognizes
constant FileTypes = {
    "RTF File", "*.RTF",
    "Text File", "*.TXT",
    "Euphoria Program", "*.EX;*.EXW;*.E;*.EW",
    "All Files", "*.*" }

---------------------------------------------------------

procedure LoadText()
    sequence rich
    atom fn, c

    -- get the file name
    FileToRead = getOpenFileName( Win, "", FileTypes )

    fn = open( FileToRead, "r" )
    if fn != -1 then
        rich = {}
        c = 0
        while c != -1 do
            c = getc( fn )
            rich &= c
        end while
        close( fn )

        rich = rich[1..length(rich)-1]

        -- Select all the existing text
        limitText(RE, length(rich)+50000)

        -- Replace the selection with the file data.
        if equal(upper(FileToRead[length(FileToRead)-2..length(FileToRead)]),"RTF") then
           putStream( RE, StreamRTF , rich )
        else
           putStream( RE, StreamText , rich )
        end if
        openFileName=FileToRead
        setText(Win, openFileName)

    end if
end procedure

procedure SaveText()
atom fn

    FileToSave = getSaveFileName( Win, "", FileTypes )
    if length(FileToSave) = 0 then
       return
    end if

    -- open the file
    fn = open( FileToSave, "w" )
    if fn = -1 then
        -- give message and exit
        VOID = message_box(   "Save File Error",
                               "Unable to create the file " & FileToSave,
                                MB_ICONSTOP + MB_OK )
        return
    end if

    -- save the file
    if equal(upper(FileToSave[length(FileToSave)-2..length(FileToSave)]),"RTF") then
       printf( fn, "%s", { getStream( RE, StreamRTF ) } )
    else
       printf( fn, "%s", { getStream( RE, StreamText ) } )
    end if
    openFileName=FileToSave
    setText(Win, openFileName)

end procedure


-- End General
--------------------------------------------------------------------------------
procedure Win_onResize (integer self, integer event, sequence params)--params is ( int style, int cx, int cy )
sequence size
    size=getClientRect(Win)
    -- size the controls to the client area
    setRect( RE, 0, 0, size[5], size[6]-200, True )

    setRect( CF,  20, size[6]-180, 110, 30, True )
    setRect( GF, 140, size[6]-180, 110, 30, True )
    setRect( GT, 260, size[6]-180, 110, 30, True )
    setRect( SB,  20, size[6]-140, 110, 30, True )
    setRect( FRT,140, size[6]-140, 110, 30, True )
    setRect( UN, 260, size[6]-140, 110, 30, True )
    setRect( OF,  20, size[6]-100, 110, 30, True )
    setRect( FT, 140, size[6]-100, 110, 30, True )
    setRect( WW, 260, size[6]-100, 110, 30, True )
    setRect( SF,  20, size[6]- 60, 110, 30, True )
end procedure
setHandler( Win, w32HResize, routine_id("Win_onResize"))
--------------------------------------------------------------------------------
procedure CF_onClick (integer self, integer event, sequence params)--params is ()
    object font
    font = getFontDialog( Win )
    if atom( font ) then
        return
    end if
    --font = { {color,font}, points, attrib }
    setFont( RE, {font[4],font[1]} , font[2], font[3] )
    setFocus( RE )
end procedure
setHandler( CF, w32HClick, routine_id("CF_onClick"))
--------------------------------------------------------------------------------
procedure GF_onClick (integer self, integer event, sequence params)--params is ()
-- Win32lib.ew
    sequence font
    atom char, ok
    char = struct_CHARFORMAT( 0,0,0,0,0,0,0,"")
    ok = sendMessage( RE, EM_GETCHARFORMAT, 1, char )
    font = fetch( char, CHARFORMAT_szFaceName )
    ok = message_box( font, "Font Name", MB_OK )

    setFocus( RE )

end procedure
setHandler( GF, w32HClick, routine_id("GF_onClick"))
--------------------------------------------------------------------------------
procedure GT_onClick (integer self, integer event, sequence params)--params is ()
    sequence text
    object ok

    text = getText( RE )
    ok = message_box( text, "Selection", MB_OK)
    setFocus( RE )
end procedure
setHandler( GT, w32HClick, routine_id("GT_onClick"))
--------------------------------------------------------------------------------
procedure SB_onClick (integer self, integer event, sequence params)--params is ()
    setBullet( RE )
    setFocus( RE )
end procedure
setHandler( SB, w32HClick, routine_id("SB_onClick"))
--------------------------------------------------------------------------------
procedure UN_onClick (integer self, integer event, sequence params)--params is ()
    undo( RE )
    setFocus( RE )
end procedure
setHandler( UN, w32HClick, routine_id("UN_onClick"))
--------------------------------------------------------------------------------
procedure FRT_onClick (integer self, integer event, sequence params)--params is ()
    getReplaceText( RE )
end procedure
setHandler( FRT, w32HClick, routine_id("FRT_onClick"))
--------------------------------------------------------------------------------
procedure OF_onClick (integer self, integer event, sequence params)--params is ()
    LoadText()
    setFocus( RE )
end procedure
setHandler( OF, w32HClick, routine_id("OF_onClick"))
--------------------------------------------------------------------------------
procedure FT_onClick (integer self, integer event, sequence params)--params is ()
    getFindText( RE )
end procedure
setHandler( FT, w32HClick, routine_id("FT_onClick"))

--------------------------------------------------------------------------------
-- missing constant in Win32lib.ew
constant EM_SETTARGETDEVICE = 1096
constant widthInTwips=(360*1440)/queryDevice(0,ASPECTX)

procedure WW_onClick (integer self, integer event, sequence params)--params is ()
integer pos,wordlen, textpos
atom hdc
sequence frstrings

    textpos = getIndex(RE)

    WordWrap = not WordWrap
    hdc=getDC(RE)
    if WordWrap then
       VOID = sendMessage(RE, EM_SETTARGETDEVICE, 0,0)
       setText(WW, "Wrap On")
    else
       VOID = sendMessage(RE, EM_SETTARGETDEVICE, 0,widthInTwips)
       setText(WW, "Wrap Off")
    end if
    releaseDC(hdc)

    frstrings=setFRData(RE,w32GetValue,w32GetValue,{},0)
    if not length(frstrings) then
        setIndex(RE,textpos)
    else
        wordlen=length(frstrings[1])
        setIndex(RE,{textpos,textpos+wordlen})
    end if
    setFocus( RE )
    VOID = invokeHandler(Win, w32HResize, {0,0,0} )

end procedure
setHandler( WW, w32HClick, routine_id("WW_onClick"))
--------------------------------------------------------------------------------
procedure SF_onClick (integer self, integer event, sequence params)--params is ()
    SaveText()
    setFocus( RE )
end procedure
setHandler( SF, w32HClick, routine_id("SF_onClick"))
---------------------------------------------------------

WinMain( Win,Normal )
­220.34
