These are "event types" which can be used in the "setHandler" procedure,
which is the way to designate a routine intended to handle an event.
The older on<event_name> syntax is no longer supported.

EVENT TYPE:             EVENT DESCRIPTION:

w32HActivate    -- Occurs for Windows only and after the window is opened
w32HBreak       -- Ctrl-Break was hit
w32HChange      -- Value in a control is changed; ie, select item in a list
w32HClick       -- single click left mouse button on a button type control
w32HClose       -- a window closes
w32HCloseUp     -- a dropdown list or menu rolls up
w32HDestroy     -- the application is being closed
w32HDragAndDrop -- user has dropped a dragged item onto acceptable control ** int id, seq data_or_file_name, (if controls are dragged) int 1 if destination, 0 if source 
w32HDropDown    -- a dropdown list or menu drops down
w32HEvent       -- an event of any type has occured ** atom event, atom wParam, atom lParam
w32HGotFocus    -- a control will receive keyboard actions
w32HKeyboard    -- some key combination was entered on keyboard ** seq keyCodes,seq extFlags,seq scanCodes,seq repeatCounts
w32HKeyDown     -- a key is pressed down ** int keyCode, int shift
w32HKeyPress    -- "Printable" key is pressed ** int keyCode, int shift, int released
w32HKeyUp       -- a key is released ** int keyCode, int shift
w32HLostFocus   -- a control will not receive keyboard actions
w32HMouse       -- mouse actions: moved, up/down or dbl-click a button, etc ** int event, int x, int y, int shift, int wheelMove
w32HMouseTrap   -- A mouse trap was hit ** int event, int x, int y, int z, seq traps, int id, int shift
w32HNotify      -- Another control is forwarding an event it received ** int sender, int event, obj userdata, seq parms
w32HOpen        -- a window opens
w32HPaint       -- A portion or all of a Window needs to be redrawn ** int x1, int y1, int x2, int y2
w32HPause       -- The Pause key was hit
w32HResize      -- user or program changes size of window ** int style, int x, int y 
w32HScroll      -- a scroll control is moved ** int position
w32HTimer       -- a timer fires

proc doEvents(integer id)   Gives control back to windows until there are no pending events to process.

proc returnValue( value )   Override default value returned by handler.
proc resetReturnValue()     Reset the return value, as if none had been ever set along the handler chain
func getReturnValue()       Get the return value for the current handler chain

proc setHandler( object id, object htype, object routine)   Sets up an user written event handler
func invokeHandler(integer id,integer event,sequence params) Calls handler chain and returns its return value.
proc setProtectedHandler(integer id,integer event,object routine) Sets a handler, overriding any protection
func setHandlerProtection(integer id,integer event,integer flag) Sets the protection flag for handler chain, returns previous
func enableHandler( object id, object htype, object routine,integer flag) enable/disable (group of) handler(s)
func getHandler(integer id,integer event) Returns the handler chain, first executed last.