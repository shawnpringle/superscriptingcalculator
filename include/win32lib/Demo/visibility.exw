--  code generated by Win32Lib IDE v0.15.0

-- An example of using SetVisibility( ) by Euman 2002

include win32Lib.ew
without warning

--------------------------------------------------------------------------------
--  Window MainWin
constant MainWin = createEx( Window, 
  "Win32lib Control Visibility Demo by Euman 2002", 
  0, Default, Default, 640, 470, {WS_THICKFRAME, WS_SYSMENU, WS_MINIMIZEBOX, WS_MAXIMIZEBOX}, {WS_EX_CLIENTEDGE, WS_EX_STATICEDGE} )
  setWindowBackColor( MainWin,8421440)

  -- Our control buttons
constant DisplayScreen1 = createEx( PushButton, "Display Screen #1", MainWin, 12, 408, 96, 24, 0, 0 )
  setEnable( DisplayScreen1, w32False )
  setHint( DisplayScreen1,"Display our first set of controls for this MainWindow")
constant DisplayScreen2 = createEx( PushButton, "Display Screen #2", MainWin, 116, 408, 96, 24, 0, 0 )
  setHint( DisplayScreen2,"Display our second set of controls for this MainWindow")
constant DisplayScreen3 = createEx( PushButton, "Display Screen #3", MainWin, 220, 408, 96, 24, 0, 0 )
  setHint( DisplayScreen3,"Display our third set of controls for this MainWindow")
constant ExitButton = createEx( PushButton, "Exit Demo", MainWin, 532, 408, 88, 24, 0, 0 )
  setHint( ExitButton,"Exit this little demo, Have a nice day!")


  -- first set (iTreeView is our initial control)
constant iTreeView = createEx( TreeView, "Treeview", MainWin, 8, 8, 156, 392, or_all({TVS_HASLINES,TVS_LINESATROOT,TVS_HASBUTTONS,TVS_SHOWSELALWAYS}), 0 )
constant closefolder = addIcon( extractIcon("clsdfold.ico") )
constant openfolder  = addIcon( extractIcon("openfold.ico") )
  setHint( iTreeView,"Our Treeview Control")
constant iListView = createEx( ListView, {"ListView"}, MainWin, 168, 8, 452, 392,or_all({LVS_REPORT,LVS_SHOWSELALWAYS}),0)
  setHint( iListView,"Our Listview Control")

  -- second set (iTabControl is our initial control)
constant iTabControl = createEx( TabControl, "TabControl", MainWin, 12, 8, 604, 388, 0, 0 )
  setHint( iTabControl,"Our Tab Control")
constant TabItem1 = createEx( TabItem, "TabItem 1", iTabControl, 0, 0, 0, 0, 0, 0 )
constant TabItem2 = createEx( TabItem, "TabItem 2", iTabControl, 0, 0, 0, 0, 0, 0 )
constant TabItem3 = createEx( TabItem, "TabItem 3", iTabControl, 0, 0, 0, 0, 0, 0 )
  setVisible(iTabControl, w32False)

  -- third set (iMonthCalendar is our initial control)
constant iMonthCalendar = createEx( MonthCalendar, "MonthCalendar", MainWin, 12, 8, 250, 200, 0, 0 )
  setHint( iMonthCalendar,"Our MonthControl")
constant iListBox = createEx( List, "ListBox", MainWin, 264, 32, 352, 196, 0, 0 )
  setHint( iListBox,"Our ListBox")
constant iComboBox = createEx( Combo, "ComboBox", MainWin, 264, 8, 352, 24*6, 0, 0 )
  setHint( iComboBox,"Our ComboBox")
constant iGroup = createEx( Group, "", MainWin, 12, 212, 604, 188, 0, 0 )
constant iMleText = createEx( MleText, "MleText", iGroup, 12, 16, 440, 164, 0, 0 )
  setHint( iMleText,"Our MLE Control")
constant iCheckBox1 = createEx( CheckBox, "CheckBox 1", iGroup, 456, 16, 140, 20, 0, 0 )
  setWindowBackColor( iCheckBox1,8421440)
  setHint( iCheckBox1,"Our CheckBox one")
constant iCheckBox2 = createEx( CheckBox, "CheckBox2", iGroup, 456, 40, 140, 20, 0, 0 )
  setWindowBackColor( iCheckBox2,8421440)
  setHint( iCheckBox2,"Our CheckBox two")
constant GroupedExampleButton = createEx( PushButton, "Example", iGroup, 480, 152, 88, 28, 0, 0 )
  setHint( GroupedExampleButton,"Our Example Button")

  ---------------------------------------------------------

  -- Set control/s visibility  ----------------------------

sequence Controls
  Controls = {{iTreeView,iListView},
              {iTabControl},
              {iMonthCalendar, iListBox, iComboBox, iGroup}
             }
sequence buttons
  buttons = {DisplayScreen1, DisplayScreen2, DisplayScreen3}


global procedure SetVisibility(atom nowVisible)
  for x = 1 to length(Controls) do
     setVisible(Controls[x],find(nowVisible, Controls[x]))
  end for 
end procedure

procedure ShowScreen(integer self, integer event, sequence parms)
  SetVisibility(Controls[find(self, buttons)][1])
  setEnable(buttons, w32True)
  setEnable(self, w32False )
end procedure
setHandler({DisplayScreen1, 
            DisplayScreen2,
            DisplayScreen3},
                w32HClick,  routine_id("ShowScreen"))


procedure OnOpen_MainWin(integer self, integer event, sequence parms)
  ShowScreen(DisplayScreen1, event, parms)
end procedure
setHandler(MainWin, w32HOpen,  routine_id("OnOpen_MainWin"))

procedure ExitDemo(integer self, integer event, sequence parms)
  closeWindow(MainWin)
end procedure
setHandler(ExitButton, w32HClick,  routine_id("ExitDemo"))

WinMain( MainWin,Normal )
