--  code generated by Win32Lib IDE v0.9b

include std/machine.e
include std/dll.e
include std/win32/msgbox.e
include Win32Lib.ew
without warning

--------------------------------------------------------------------------------
--  Window Window1
global constant Window1 = create( Window, "The Window1", 0, 53, 159, 553, 387, 0 )
global constant PushButton2 = create( PushButton, "allocate and free", Window1, 36, 64, 140, 36, 0 )
--------------------------------------------------------------------------------

constant
    dwLength = w32allot(Long),
    dwMemoryLoad = w32allot(Long),
    dwTotalPhys = w32allot(Long),
    dwAvailPhys = w32allot(Long),
    dwTotalPageFile = w32allot(Long),
    dwAvailPageFile = w32allot(Long),
    dwTotalVirtual = w32allot(Long),
    dwAvailVirtual = w32allot(Long),
    MEMORYSTATUS = w32allotted_size(),
    memsize = define_c_proc(open_dll("kernel32.dll"), "GlobalMemoryStatus", {C_POINTER})

--------------------------------------------------------------------------------
function getmem()
object a,b,c,d, tp, mset

    mset=w32new_memset()
    b = w32acquire_mem(mset, MEMORYSTATUS)

    c_proc(memsize, {b})

    c = fetch(b, dwAvailPhys)
    d = fetch(b, dwAvailPageFile)

    a = (c+d)/1048576

    w32release_mem(mset)
    return a
end function



--------------------------------------------------------------------------------
procedure PushButton2_onClick (integer id,integer event,sequence params)
object a,b,tp, sm, em, oa
sm = getmem()
oa = w32llSetAbort(-1)
a={}
for i = 1 to 100 do
    b = w32acquire_mem(0, 1048576)
    if b = 0 then exit end if
    a &= b
end for
for i=1 to length(a) do
    w32release_mem(a[i])
end for
em = getmem()
oa = w32llSetAbort(oa)

tp=message_box(sprintf(" Start=%d Alloc=%d End=%d", {sm, length(a), em}),"",0)
end procedure
setHandler(PushButton2,w32HClick,routine_id("PushButton2_onClick"))


WinMain( Window1, Normal )
