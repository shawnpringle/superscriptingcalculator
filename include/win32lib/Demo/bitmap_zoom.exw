--  code generated by Win32Lib IDE v0.18.12


-- FutureView
-- by cklester
-- version 0.1 (ALPHA) - 2004.07.04

--------------------------------------------
-- TO DO ----------------------------START--
--------------------------------------------
-- brush size control
-- mask color control
-- save mask!
-- zoom in/out when painting
-- fullscreen display of picture on double-click
-- 3D adjustment of tile floor/wall
-- window to show available tiles
-- lighten/dim tiled floor according to original floor pic's brightness
-- choose new tile by clicking on it
-- adjust floor plane to correspond with original graphic floor or wall plane
-- titlebar notification of:
--   1. original size of bitmap
--   2. current scaled size (or zoom) of bitmap
-- button to restore to original size
-- load ANY graphic image format, not just BMP
-- tiled floor needs to show perspective (smaller in distance)
-- * get "top most" and "bottom most" pixels,
--   left-most and right-most pixels, then make sure
--   floor bitmap covers that area.
-- manage folder locations (tiles, projects, etc.)
-- download files from digital camera
-- print
-- color correction (adjust any of RGB)
-- need tiled graphic of each pattern -OR- have program "paint" the area

--------------------------------------------
-- TO DO -------------------------------END-
--------------------------------------------

include std/filesys.e
include std/win32/msgbox.e
include Win32Lib.ew
without warning

--------------------------------------------------------------------------------
--  Window Window1
constant Window1 = createEx( Window, "Window1", 0, Default, Default, 509, 407, 0, 0 )
constant statbar = createEx( StatusBar, "Bitmap Fun with Win32Lib", Window1, 0, 0, 0, 0, 0, 0 )
constant bttn_LoadPicture = createEx( PushButton, "Load Picture", Window1, 4, 4, 88, 28, 0, 0 )
sequence IDEFlags
IDEFlags = classDefaults( Window, { {1, {WS_SYSMENU}},{2, {WS_EX_STATICEDGE}} } )
constant win_PixMix = createEx( Window, "PixMix Window", Window1, 176, 8, 320, 348, or_all({WS_CHILD, WS_CLIPSIBLINGS}), or_all({WS_EX_STATICEDGE}) )
openWindow(win_PixMix, Normal)
moveZOrder( win_PixMix, HWND_TOP)
constant Group37 = createEx( Group, "Images", Window1, 4, 68, 112, 100, 0, 0 )
IDEFlags = classDefaults( Window, { {1, {WS_SYSMENU}},{2, {WS_EX_STATICEDGE}} } )
constant CWindow42 = createEx( Window, "CWindow42", Window1, 4, 224, 168, 132, or_all({WS_CHILD, WS_CLIPSIBLINGS}), or_all({WS_EX_STATICEDGE}) )
openWindow(CWindow42, Normal)
moveZOrder( CWindow42, HWND_TOP)
constant txt_PenWidth = createEx( EditText, "3", Window1, 68, 172, 48, 20, 0, 0 )
constant chkbx_Photo = createEx( CheckBox, "Photograph", Group37, 12, 24, 84, 20, 0, 0 )
setCheck( chkbx_Photo, True )
constant LText18 = createEx( LText, "Pen Width", Window1, 4, 176, 64, 20, 0, 0 )
constant bttn_ViewTiles = createEx( ToggleButton, "View Tiles", Window1, 4, 36, 88, 28, 0, 0 )
constant chkbx_Mask = createEx( CheckBox, "Mask", Group37, 12, 48, 84, 20, 0, 0 )
setCheck( chkbx_Mask, True )
constant pixMix = createEx( Pixmap, "pixMix", Window1, 184, 88, 48, 32, 0, 0 )
constant chkbx_Background = createEx( CheckBox, "Background", Group37, 12, 72, 84, 20, 0, 0 )
setCheck( chkbx_Background, True )
constant pixMask = createEx( Pixmap, "pixMask", Window1, 184, 128, 48, 32, 0, 0 )
constant pixTile = createEx( Pixmap, "pixTile", Window1, 184, 168, 48, 32, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------
--  Window win_Tiles
constant win_Tiles = createEx( Window, "Tiles", 0, Default, Default, 204, 426, 0, 0 )
constant bttn_LoadTiles1 = createEx( PushButton, "Load Tiles", win_Tiles, 56, 4, 88, 28, 0, 0 )
constant EditText35 = createEx( EditText, "EditText35", win_Tiles, 4, 40, 188, 20, 0, 0 )
---------------------------------------------------------
--------------------------------------------------------------------------------
-- this program allows plotting of lines
-- on a bitmap to indicate tiled area

object pixBefore, pixLoad
sequence dib, bmp_plot_area, bmp_origin, bmp_size
integer dragging, painting
sequence originClick, lastPos, originBMP

	dragging = False
	painting = False
	lastPos = {}

	dib = {}
	pixBefore = 0
	bmp_plot_area = {0,0,0,0} --{x1,y1,x2,y2}

-- all this will be taken care of by xControls... soon... ?
sequence buffer, temp

temp = getClientRect(Window1)
temp = temp[3..4]
buffer = getRect(win_PixMix)
buffer = buffer[3..4]

buffer = temp-buffer

procedure setSizes()
-- this sets the part and size of the bitmap to display
-- according to the size of the available area
sequence plotarea, plotsize, bmparea, bmpsize, origin, farpoint
	plotarea = getRect(win_PixMix)
	plotsize = plotarea[3..4] - plotarea[1..2]

	bmparea = getRect(pixMix)
	bmpsize = bmparea[3..4] - bmparea[1..2]

	origin = bmp_plot_area[1..2]
	farpoint = plotsize

	if origin[1] < 0 then
		origin[1] = 0
	end if
	if origin[2] < 0 then
		origin[2] = 0
	end if
	if origin[1] + plotsize[1] > bmpsize[1] then
		origin[1] = bmpsize[1] - plotsize[1]
		if origin[1] < 0 then
			origin[1] = 0
		end if
	end if
	if origin[2] + plotsize[2] > bmpsize[2] then
		origin[2] = bmpsize[2] - plotsize[2]
		if origin[2] < 0 then
			origin[2] = 0
		end if
	end if
	if farpoint[1] > plotarea[3] then
		farpoint[1] = plotarea[3]
	end if
	if farpoint[2] > plotarea[4] then
		farpoint[2] = plotarea[4]
	end if
	bmp_plot_area[1..2] = origin
	bmp_plot_area[3..4] = farpoint

end procedure

sequence tileBitmaps
	tileBitmaps = {}

procedure draw_Tiles()
integer x, tilesize
	x = 80
	tilesize = 70
	if length(tileBitmaps) > 0 then
		-- plot 'em
		for t=1 to length(tileBitmaps) do
			VOID = getRect(tileBitmaps[t])
			stretchBlt( win_Tiles, 0, x, tilesize, tilesize, tileBitmaps[t], 0, 0, VOID[3], VOID[4], SRCCOPY )
			x += tilesize + 1
		end for
	end if
end procedure

procedure draw_Bitmap()
sequence plotrect, rect
	if pixBefore > 0 then
		setSizes()
		plotrect = getRect( win_PixMix )
		-- draw the bitmap
		if isChecked( chkbx_Photo ) then
			copyBlt( pixMix, 0,0, pixBefore )
		else
			rect = getRect(pixMix)
			setPenColor(pixMix, Black)
			setPenBrushColor(pixMix,Black)
			drawRectangle( pixMix, w32True,0,0,rect[3],rect[4])
		end if
		if isChecked( chkbx_Mask ) then
			transBlt( pixMix, 0,0, pixMask )
		end if
		bitBlt( win_PixMix, 0,0,pixMix,bmp_plot_area[1],bmp_plot_area[2],bmp_plot_area[3],bmp_plot_area[4],SRCCOPY)
	--	setText(statbar, sprintf("origin:%d,%d size:%d,%d plotted to:%d,%d",bmp_plot_area&plotrect[1..2]) )
		draw_Tiles()
	end if
end procedure

procedure resize_win_PixMix()
sequence pos, wsize, newsize
	pos = getPosition(win_PixMix)
	wsize = getClientRect(Window1)
	newsize = {wsize[3]-pos[1]-buffer[1], wsize[4]-pos[2]-buffer[2]}
	setCtlSize( win_PixMix, newsize[1], newsize[2] )
end procedure

procedure getUserBitmap()
sequence chosenFName
	chosenFName = getOpenFileName( Window1, "", "" )
	pixBefore = loadBitmapFromFile( chosenFName )
	VOID = getRect(pixBefore)
	setCtlSize(pixMix, VOID[3], VOID[4])
	setCtlSize(pixMask, VOID[3], VOID[4])

	setPenColor(pixMask,Black)
	setPenBrushColor(pixMask,Black)
	setTransparentColor(Black)
	drawRectangle( pixMask,w32True,0,0,VOID[3],VOID[4] )
end procedure

procedure getTileBitmap()
sequence chosenFName
	chosenFName = getOpenFileName( Window1, "", "" )
	pixLoad = loadBitmapFromFile( chosenFName )
	VOID = getRect(pixLoad)
	setCtlSize(pixTile, VOID[3], VOID[4])
	copyBlt( pixTile, 0, 0, pixLoad )
	pixLoad = {}
end procedure

procedure loadTileGraphics()
-- load tile graphics and display them in win_Tile
object list
sequence tileFolder
integer spot
	tileFolder = current_dir() & "\\tiles"
	if atom(dir(tileFolder)) then -- show directory getter
		tileFolder = selectDirectory("Select a Tiles Directory", "", 0,0)
	end if
	list = dir(tileFolder)
	if sequence(list) then
		for t=1 to length(list) do
			if match("d",list[t][D_ATTRIBUTES]) = 0 then -- not a directory
				spot = match(".",list[t][D_NAME])
				if spot > 0 then
					if equal(list[t][D_NAME][spot..length(list[t][D_NAME])], ".bmp") then
						-- it's a bitmap... load it up
						tileBitmaps &= loadBitmapFromFile( tileFolder & "\\" & list[t][D_NAME] )
					end if
				end if
			end if
		end for

		-- now that we have a list of bitmaps, show them on win_Tiles
		draw_Tiles()
	end if
end procedure

constant penWidthTrap = createMouseTrap( Window1, txt_PenWidth )
	filterMouseTrap( Window1, penWidthTrap, { WheelMove,WM_LBUTTONDOWN } )

procedure penWidth_onMouse (integer self, integer event, sequence params)--params is ()
	if params[1] = WheelMove then

    	VOID = getNumber( txt_PenWidth )
		if params[4] > 0 then
			if VOID < 30 then
				setText(txt_PenWidth, sprintf("%d",{VOID+1}))
			end if
		elsif params[4] < 0 then
			if VOID > 1 then
				setText(txt_PenWidth, sprintf("%d",{VOID-1}))
			end if
		end if
    else
        returnValue(0)
	end if
--	setText(statbar,sprintf("%d %d %d %d",params) )
end procedure
setHandler( penWidthTrap, w32HMouseTrap, routine_id("penWidth_onMouse"))

--------------------------------------------------------------------------------
procedure Window1_onGotFocus (integer self, integer event, sequence params)--params is ()
	draw_Bitmap()
end procedure
setHandler( Window1, w32HGotFocus, routine_id("Window1_onGotFocus"))
--------------------------------------------------------------------------------
procedure Window1_onKeyDown (integer self, integer event, sequence params)--params is ( atom scanCode, atom shift )
	if and_bits(params[2], ControlMask) then
		-- control is pressed?
		setMousePointer({Window1},WaitPointer)
	end if
end procedure
setHandler( {win_PixMix, Window1}, w32HKeyDown, routine_id("Window1_onKeyDown"))
--------------------------------------------------------------------------------
procedure Window1_onKeyUp (integer self, integer event, sequence params)--params is ( int scanCode, int shift )
	if and_bits(params[2], ControlMask) then
		-- control was released... restore pointer
		restoreMousePointer({Window1})   
	end if
end procedure
setHandler({win_PixMix, Window1}, w32HKeyUp, routine_id("Window1_onKeyUp"))
--------------------------------------------------------------------------------
procedure Window1_onOpen (integer self, integer event, sequence params)--params is ()
	getUserBitmap()
	loadTileGraphics()
end procedure
setHandler( Window1, w32HOpen, routine_id("Window1_onOpen"))
--------------------------------------------------------------------------------
procedure Window1_onResize (integer self, integer event, sequence params)--params is ( int style, int cx, int cy )
	resize_win_PixMix()
	draw_Bitmap()
end procedure
setHandler( Window1, w32HResize, routine_id("Window1_onResize"))

--------------------------------------------------------------------------------
procedure Window1_onActivate (integer self, integer event, sequence params)--params is ()
	draw_Bitmap()
end procedure
setHandler( Window1, w32HActivate, routine_id("Window1_onActivate"))
--------------------------------------------------------------------------------
procedure bttn_LoadPicture_onClick (integer self, integer event, sequence params)--params is ()
-- load picture into pix_Photo
	getUserBitmap()
	draw_Bitmap()
end procedure
setHandler( bttn_LoadPicture, w32HClick, routine_id("bttn_LoadPicture_onClick"))

--------------------------------------------------------------------------------
atom paintColor
paintColor = White

procedure win_PixMix_onMouse (integer self, integer event, sequence params)--params is ( int event, int x, int y, int shift )
sequence pos, currpos, bmp_pos, newPos, change, old_pos, direction, plotsize, pixsize

	bmp_pos = getRect( win_PixMix )
	pos = getPointerRelPos(win_PixMix)
	if params[1] = RightDown then
		painting = True
		paintColor = Black
		pos += bmp_plot_area[1..2]
		if length(lastPos) = 0 then
			lastPos = pos
		end if
		setPenColor( pixMask, paintColor )
		setPenWidth( pixMask, getNumber( txt_PenWidth) )
		drawLine(pixMask, lastPos[1],lastPos[2],pos[1],pos[2])
		lastPos = pos
		draw_Bitmap()
	elsif params[1] = RightUp or params[1] = LeftUp then -- not moving bitmap anymore
		painting = False
		dragging = False
		lastPos = {}
	elsif params[1] = LeftDown then
		-- if ctrl is down... moving!
		if 1=2 then
			dragging = True
			originClick = getPointerRelPos(win_PixMix)
			originBMP = bmp_plot_area[1..2]
		-- else... painting!
		else
			painting = True
			paintColor = White
			pos += bmp_plot_area[1..2]
			if length(lastPos) = 0 then
				lastPos = pos
			end if
			setPenColor( pixMask,paintColor )
			setPenWidth( pixMask, getNumber( txt_PenWidth) )
			drawLine(pixMask, lastPos[1],lastPos[2],pos[1],pos[2])
			lastPos = pos
		end if
		draw_Bitmap()
	elsif params[1] = WheelMove then
		VOID = message_box("Testing","Testing",MB_OK)
		direction = "nowhere"
		if params[5] > 0 then -- if pushing forward...
			direction = "out"
			-- ZoomFactor += 1 -- 2:1, 3:1, etc...
		elsif params[5] < 0 then -- if pulling backward...
			direction = "in"
			-- ZoomFactor -= 1 -- can't zoom out beyond 1:1
		end if
		-- setZoom( ZoomFactor )
		setText( statbar, "Zoom " & direction & " baby!")
	elsif params[1] = MouseMove then
		if painting then
			setPenColor(pixMask, paintColor)
			setPenWidth( pixMask, getNumber( txt_PenWidth) )
			pos += bmp_plot_area[1..2]
			drawLine(pixMask, lastPos[1],lastPos[2],pos[1],pos[2])
			lastPos = pos
			draw_Bitmap()
		elsif dragging then
			bmp_plot_area[1..2] = originBMP + ( originClick - pos )
			draw_Bitmap()
		end if
	end if
end procedure
setHandler( win_PixMix, w32HMouse, routine_id("win_PixMix_onMouse"))

--------------------------------------------------------------------------------
setVisible(win_Tiles,w32False)
procedure bttn_ViewTiles_onClick (integer self, integer event, sequence params)--params is ()
        setVisible( win_Tiles, not isVisible( win_Tiles ))
end procedure
setHandler( bttn_ViewTiles, w32HClick, routine_id("bttn_ViewTiles_onClick"))
--------------------------------------------------------------------------------
procedure chkbx_onClick (integer self, integer event, sequence params)--params is ()
	setFocus(win_PixMix)
	draw_Bitmap()--repaintWindow(win_PixMix)
end procedure
setHandler({chkbx_Background,chkbx_Mask, chkbx_Photo}, w32HClick, routine_id("chkbx_onClick"))

--------------------------------------------------------------------------------
procedure win_Tiles_onPaint (integer self, integer event, sequence params)--params is ( int x1, int y1, int x2, int y2 )
	draw_Tiles()
end procedure
setHandler( win_Tiles, w32HPaint, routine_id("win_Tiles_onPaint"))
--------------------------------------------------------------------------------
procedure bttn_LoadTiles1_onClick (integer self, integer event, sequence params)--params is ()
-- load and display a tile set
end procedure
setHandler( bttn_LoadTiles1, w32HClick, routine_id("bttn_LoadTiles1_onClick"))

WinMain( Window1,Normal )

