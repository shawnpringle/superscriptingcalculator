-- ex08.exw
--
-- This example places a menu in a window

include std/win32/msgbox.e
include win32lib.ew
without warning

createForm({
        "Menus,width=200, height=100",
                                 
        "Menu, &File",
            "MenuItem, name=New File, &New, tag=N, event=(click=ItemClicked)",
            "MenuItem, name=Open File, &Open..., tag=N, event=(click=ItemClicked)",
            "MenuItem, name=Save File, &Save, tag=0, event=(click=ItemClicked)",
            "MenuItem, name=Save File as, Save &As ...,tag=0, event=(click=ItemClicked)",
            "MenuItem, -",
            "MenuItem, name=Exit App, &Exit, flag=Autoclose",
        
        "Menu, &Edit",
            "MenuItem, name=Undo Edit, &Undo, tag=N,enable=false, event=(click=ItemClicked)",
            "MenuItem, -",
            "MenuItem, name=Cut, Cu&t, tag=1, event=(click=ItemClicked)",
            "MenuItem, name=Copy, &Copy, tag=1, event=(click=ItemClicked)",
            "MenuItem, name=Paste, &Paste, tag=1, event=(click=ItemClicked)",
            "MenuItem, name=Delete, De&lete, tag=1, event=(click=ItemClicked)",
        
        "Menu, &Help",
            "MenuItem, name=About,&About..., tag=N, event=click=AboutApp",
                  
        "StatusBar"
    })

-- We will need this control id later.
constant
    MenuUndo    = getNameId( "UndoEdit")

    

-- default behaviors                                                     
global procedure ItemClicked(integer self, integer event, sequence parms)
    integer lNewUndoState
    object lTag    
    w32string lName
    
    -- Get its tag value to see what we will do with the undo item.
    lTag = getUserProperty(self, "Tag")
    if length(lTag) = 0 then       
        -- No tag so don't do anything.
        return
    end if

    -- Okay, we have a tag.
    if equal(lTag[1], "N") then
        -- Don't change undo's state.
        lNewUndoState = isEnabled(MenuUndo)

    else
        -- Turn on/off the undo item as required.
        lNewUndoState = lTag[1]
    end if

    -- Update the undo item's Enabled state.
    setEnable(MenuUndo, lNewUndoState)


    -- Grab the menu item's name and display it.
    lName = getIdName(self)
    showMessage(lName)
    VOID = message_box( lName, "Selected", 0 )

end procedure
registerRoutine("ItemClicked", routine_id("ItemClicked"))

-- about... behavior
global procedure AboutApp(integer self, integer event, sequence parms)
    VOID = message_box(   sprintf("Win32Lib V%d.%d.%d\n%s",Win32LibVersion),
                            "Menu Demo",                  -- title
                            MB_ICONINFORMATION+MB_TASKMODAL )   -- icon
end procedure
registerRoutine("AboutApp", routine_id("AboutApp"))

include w32Start.ew
